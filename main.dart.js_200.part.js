// Generated by dart2js (NullSafetyMode.sound, csp, intern-composite-values), the Dart to JavaScript compiler version: 3.7.2.
((s, d, e) => {
  s[d] = s[d] || {};
  s[d][e] = s[d][e] || [];
  s[d][e].push({p: "main.dart.js_200", e: "beginPart"});
})(self, "$__dart_deferred_initializers__", "eventLog");
$__dart_deferred_initializers__.current = function(hunkHelpers, init, holdersList, $) {
  var J, A, D, I, F, K, L, Q, R, S, T, U, V, N, M, W,
  B = {
    BlurHash_BlurHash$decode(blurHash) {
      var sizeFlag, numCompX, numCompY, maxAc, components, i, j, t2, t3, t4, t5, g, b, t6, t7, t8,
        t1 = blurHash.length;
      if (t1 < 6)
        throw A.wrapException(B.BlurHashDecodeException$("BlurHash must not be null or '< 6' characters long."));
      sizeFlag = B.decode83(blurHash, 0, 1);
      numCompX = D.JSInt_methods.$mod(sizeFlag, 9) + 1;
      numCompY = D.JSInt_methods._tdivFast$1(sizeFlag, 9) + 1;
      if (t1 !== 4 + 2 * numCompX * numCompY)
        throw A.wrapException(B.BlurHashDecodeException$("Invalid number of components in BlurHash."));
      maxAc = (B.decode83(blurHash, 1, 2) + 1) / 166;
      components = J.JSArray_JSArray$allocateGrowable(numCompY, type$.List_ColorTriplet);
      for (t1 = type$.ColorTriplet, i = 0; i < numCompY; ++i)
        components[i] = A.List_List$filled(numCompX, new B.ColorTriplet(0, 0, 0), false, t1);
      for (j = 0; j < numCompY; ++j)
        for (t1 = j * numCompX, t2 = j === 0, i = 0; i < numCompX; ++i)
          if (i === 0 && t2) {
            t3 = B.decode83(blurHash, 2, 6);
            t4 = B.sRgbToLinear(t3 >>> 16);
            t5 = B.sRgbToLinear(t3 >>> 8 & 255);
            t3 = B.sRgbToLinear(t3 & 255);
            if (!(j < components.length))
              return A.ioore(components, j);
            D.JSArray_methods.$indexSet(components[j], i, new B.ColorTriplet(t4, t5, t3));
          } else {
            t3 = 4 + (i + t1) * 2;
            t3 = B.decode83(blurHash, t3, t3 + 2);
            g = D.JSNumber_methods.$mod(t3 / 19, 19);
            b = D.JSInt_methods.$mod(t3, 19);
            t3 = (t3 / 361 - 9) / 9;
            t4 = Math.pow(Math.abs(t3), 2);
            t3 = J.get$sign$in(t3);
            t5 = (g - 9) / 9;
            t6 = Math.pow(Math.abs(t5), 2);
            t5 = J.get$sign$in(t5);
            t7 = (b - 9) / 9;
            t8 = Math.pow(Math.abs(t7), 2);
            t7 = J.get$sign$in(t7);
            if (!(j < components.length))
              return A.ioore(components, j);
            D.JSArray_methods.$indexSet(components[j], i, new B.ColorTriplet(t4 * t3 * maxAc, t6 * t5 * maxAc, t8 * t7 * maxAc));
          }
      t1 = B._multiplyPunch(components, 1);
      if (0 >= t1.length)
        return A.ioore(t1, 0);
      return new B.BlurHash(t1);
    },
    _multiplyPunch(components, factor) {
      var i, t1, j, t2, t3;
      for (i = 0; i < components.length; ++i) {
        t1 = i !== 0;
        j = 0;
        while (true) {
          if (!(i < components.length))
            return A.ioore(components, i);
          t2 = components[i];
          if (!(j < t2.length))
            break;
          if (t1 && j !== 0) {
            t3 = t2[j];
            D.JSArray_methods.$indexSet(t2, j, new B.ColorTriplet(t3.r * factor, t3.g * factor, t3.b * factor));
          }
          ++j;
        }
      }
      return components;
    },
    _transform0(width, height, components) {
      var pixel, y, t1, x, t2, r, g, b, j, t3, t4, i, basis, t5, color, pixel0,
        pixels = A.List_List$filled(width * height * 4, 0, false, type$.int);
      for (pixel = 0, y = 0; y < height; ++y)
        for (t1 = 3.141592653589793 * y, x = 0; x < width; ++x) {
          for (t2 = 3.141592653589793 * x, r = 0, g = 0, b = 0, j = 0; t3 = components.length, j < t3; ++j) {
            t4 = t1 * j / height;
            i = 0;
            while (true) {
              if (0 >= t3)
                return A.ioore(components, 0);
              if (!(i < components[0].length))
                break;
              basis = Math.cos(t2 * i / width) * Math.cos(t4);
              t3 = components.length;
              if (!(j < t3))
                return A.ioore(components, j);
              t5 = components[j];
              if (!(i < t5.length))
                return A.ioore(t5, i);
              color = t5[i];
              r += color.r * basis;
              g += color.g * basis;
              b += color.b * basis;
              ++i;
            }
          }
          pixel0 = pixel + 1;
          D.JSArray_methods.$indexSet(pixels, pixel, B.linearTosRgb(r));
          pixel = pixel0 + 1;
          D.JSArray_methods.$indexSet(pixels, pixel0, B.linearTosRgb(g));
          pixel0 = pixel + 1;
          D.JSArray_methods.$indexSet(pixels, pixel, B.linearTosRgb(b));
          pixel = pixel0 + 1;
          D.JSArray_methods.$indexSet(pixels, pixel0, 255);
        }
      return new Uint8Array(A._ensureNativeList(pixels));
    },
    BlurHash: function BlurHash(t0) {
      this.components = t0;
    },
    BlurHashDecodeException$(message) {
      return new B.BlurHashDecodeException(message);
    },
    BlurHashDecodeException: function BlurHashDecodeException(t0) {
      this.message = t0;
    },
    sRgbToLinear(value) {
      var v = value / 255;
      if (v <= 0.04045)
        return v / 12.92;
      return Math.pow((v + 0.055) / 1.055, 2.4);
    },
    linearTosRgb(value) {
      var v = D.JSNumber_methods.clamp$2(value, 0, 1);
      if (v <= 0.0031308)
        return D.JSNumber_methods.toInt$0(v * 12.92 * 255 + 0.5);
      return D.JSNumber_methods.toInt$0((1.055 * Math.pow(v, 0.4166666666666667) - 0.055) * 255 + 0.5);
    },
    ColorTriplet: function ColorTriplet(t0, t1, t2) {
      this.r = t0;
      this.g = t1;
      this.b = t2;
    },
    MemoryImage: function MemoryImage(t0) {
      this.bytes = t0;
    },
    RenderAspectRatio: function RenderAspectRatio(t0, t1, t2, t3) {
      var _ = this;
      _._aspectRatio = t0;
      _.RenderObjectWithChildMixin__child = t1;
      _._layoutCacheStorage = t2;
      _.parentData = _._box$_size = null;
      _._depth = 0;
      _._object$_owner = _._object$_parent = null;
      _._needsLayout = true;
      _._relayoutBoundary = null;
      _._doingThisLayoutWithCallback = false;
      _._constraints = null;
      _.__RenderObject__wasRepaintBoundary_A = $;
      _._layerHandle = t3;
      _._needsCompositingBitsUpdate = false;
      _.__RenderObject__needsCompositing_A = $;
      _._needsPaint = true;
      _._needsCompositedLayerUpdate = false;
      _._cachedSemanticsConfiguration = null;
      _._needsSemanticsUpdate = true;
      _._semantics = null;
    },
    StreamBuilderBase: function StreamBuilderBase() {
    },
    _StreamBuilderBaseState: function _StreamBuilderBaseState(t0) {
      var _ = this;
      _._async0$_subscription = null;
      _.___StreamBuilderBaseState__summary_A = $;
      _._framework$_element = _._widget = null;
      _.$ti = t0;
    },
    _StreamBuilderBaseState__subscribe_closure: function _StreamBuilderBaseState__subscribe_closure(t0) {
      this.$this = t0;
    },
    _StreamBuilderBaseState__subscribe__closure1: function _StreamBuilderBaseState__subscribe__closure1(t0, t1) {
      this.$this = t0;
      this.data = t1;
    },
    _StreamBuilderBaseState__subscribe_closure1: function _StreamBuilderBaseState__subscribe_closure1(t0) {
      this.$this = t0;
    },
    _StreamBuilderBaseState__subscribe__closure: function _StreamBuilderBaseState__subscribe__closure(t0, t1, t2) {
      this.$this = t0;
      this.error = t1;
      this.stackTrace = t2;
    },
    _StreamBuilderBaseState__subscribe_closure0: function _StreamBuilderBaseState__subscribe_closure0(t0) {
      this.$this = t0;
    },
    _StreamBuilderBaseState__subscribe__closure0: function _StreamBuilderBaseState__subscribe__closure0(t0) {
      this.$this = t0;
    },
    StreamBuilder: function StreamBuilder(t0, t1, t2, t3) {
      var _ = this;
      _.builder = t0;
      _.stream = t1;
      _.key = t2;
      _.$ti = t3;
    },
    AspectRatio: function AspectRatio(t0, t1, t2) {
      this.aspectRatio = t0;
      this.child = t1;
      this.key = t2;
    },
    precacheImage(provider, context) {
      var listener, t1 = {},
        config = E.createLocalImageConfiguration(context, null),
        t2 = new A._Future($.Zone__current, type$._Future_void),
        completer = new A._AsyncCompleter(t2, type$._AsyncCompleter_void),
        stream = provider.resolve$1(config);
      t1.listener = null;
      listener = new A.ImageStreamListener(new B.precacheImage_closure(t1, completer, stream), null, new B.precacheImage_closure0(t1, completer, stream, null));
      t1.listener = listener;
      stream.addListener$1(0, listener);
      return t2;
    },
    precacheImage_closure: function precacheImage_closure(t0, t1, t2) {
      this._box_0 = t0;
      this.completer = t1;
      this.stream = t2;
    },
    precacheImage__closure: function precacheImage__closure(t0, t1, t2) {
      this._box_0 = t0;
      this.image = t1;
      this.stream = t2;
    },
    precacheImage_closure0: function precacheImage_closure0(t0, t1, t2, t3) {
      var _ = this;
      _._box_0 = t0;
      _.completer = t1;
      _.stream = t2;
      _.onError = t3;
    },
    FlyerChatImageMessage$(customImageProvider, index, message) {
      return new B.FlyerChatImageMessage(message, customImageProvider, null);
    },
    FlyerChatImageMessage: function FlyerChatImageMessage(t0, t1, t2) {
      this.message = t0;
      this.customImageProvider = t1;
      this.key = t2;
    },
    _FlyerChatImageMessageState: function _FlyerChatImageMessageState(t0, t1) {
      var _ = this;
      _.___FlyerChatImageMessageState__aspectRatio_A = _.___FlyerChatImageMessageState__imageProvider_A = _.___FlyerChatImageMessageState__chatController_F = $;
      _._placeholderProvider = null;
      _.TickerProviderStateMixin__tickers = t0;
      _.TickerProviderStateMixin__tickerModeNotifier = t1;
      _._framework$_element = _._widget = null;
    },
    _FlyerChatImageMessageState_initState_closure: function _FlyerChatImageMessageState_initState_closure(t0) {
      this.$this = t0;
    },
    _FlyerChatImageMessageState_didUpdateWidget_closure: function _FlyerChatImageMessageState_didUpdateWidget_closure(t0, t1) {
      this.$this = t0;
      this.newImage = t1;
    },
    _FlyerChatImageMessageState_build_closure: function _FlyerChatImageMessageState_build_closure() {
    },
    _FlyerChatImageMessageState__buildStack_closure0: function _FlyerChatImageMessageState__buildStack_closure0(t0, t1) {
      this.$this = t0;
      this.theme = t1;
    },
    _FlyerChatImageMessageState__buildStack_closure: function _FlyerChatImageMessageState__buildStack_closure(t0) {
      this.$this = t0;
    },
    _FlyerChatImageMessageState__buildStack_closure1: function _FlyerChatImageMessageState__buildStack_closure1(t0, t1) {
      this.$this = t0;
      this.theme = t1;
    },
    TimeAndStatus0: function TimeAndStatus0(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.time = t0;
      _.status = t1;
      _.showTime = t2;
      _.showStatus = t3;
      _.backgroundColor = t4;
      _.textStyle = t5;
      _.key = t6;
    },
    __FlyerChatImageMessageState_State_TickerProviderStateMixin: function __FlyerChatImageMessageState_State_TickerProviderStateMixin() {
    },
    getImageDimensions(provider) {
      var t1 = new A._Future($.Zone__current, type$._Future_Record_2_double_and_double),
        completer = new A._AsyncCompleter(t1, type$._AsyncCompleter_Record_2_double_and_double);
      new A.SynchronousFuture(provider, type$.SynchronousFuture_NetworkImage).then$1$1(0, new B.getImageDimensions_closure(provider, completer), type$.Null).catchError$1(new B.getImageDimensions_closure0(completer));
      return t1;
    },
    getImageDimensions_closure: function getImageDimensions_closure(t0, t1) {
      this.provider = t0;
      this.completer = t1;
    },
    getImageDimensions__closure: function getImageDimensions__closure(t0) {
      this.completer = t0;
    },
    getImageDimensions__closure0: function getImageDimensions__closure0(t0) {
      this.completer = t0;
    },
    getImageDimensions__closure1: function getImageDimensions__closure1(t0, t1) {
      this.stream = t0;
      this.listener = t1;
    },
    getImageDimensions_closure0: function getImageDimensions_closure0(t0) {
      this.completer = t0;
    },
    ChannelIterator: function ChannelIterator(t0) {
      this.index = -1;
      this.color = t0;
    },
    ChannelOrder: function ChannelOrder(t0, t1) {
      this.index = t0;
      this._name = t1;
    },
    ColorFloat16: function ColorFloat16(t0) {
      this.data = t0;
    },
    ColorFloat32: function ColorFloat32(t0) {
      this.data = t0;
    },
    ColorFloat64: function ColorFloat64(t0) {
      this.data = t0;
    },
    ColorInt16: function ColorInt16(t0) {
      this.data = t0;
    },
    ColorInt32: function ColorInt32(t0) {
      this.data = t0;
    },
    ColorInt8: function ColorInt8(t0) {
      this.data = t0;
    },
    ColorUint1: function ColorUint1(t0, t1) {
      this.length = t0;
      this.__ColorUint1_data_A = t1;
    },
    ColorUint16: function ColorUint16(t0) {
      this.data = t0;
    },
    ColorUint2: function ColorUint2(t0, t1) {
      this.length = t0;
      this.__ColorUint2_data_A = t1;
    },
    ColorUint32: function ColorUint32(t0) {
      this.data = t0;
    },
    ColorUint4: function ColorUint4(t0, t1) {
      this.length = t0;
      this.data = t1;
    },
    ColorUint8: function ColorUint8(t0) {
      this.data = t0;
    },
    ConstColorUint8: function ConstColorUint8(t0) {
      this.data = t0;
    },
    ConstColorRgb8: function ConstColorRgb8(t0) {
      this.data = t0;
    },
    convertFormatValue(value, from, to) {
      var t1;
      if (from === to)
        return value;
      switch (from.index) {
        case 0:
          if (value === 0)
            t1 = 0;
          else {
            t1 = C.Map_vw3Ow.$index(0, to);
            t1.toString;
          }
          return t1;
        case 1:
          switch (to.index) {
            case 0:
              return value === 0 ? 0 : 1;
            case 1:
              return value;
            case 2:
              return value * 5;
            case 3:
              return value * 75;
            case 4:
              return value * 21845;
            case 5:
              return value * 1431655765;
            case 6:
              return value * 42;
            case 7:
              return value * 10922;
            case 8:
              return value * 715827882;
            case 9:
            case 10:
            case 11:
              return value / 3;
          }
          break;
        case 2:
          switch (to.index) {
            case 0:
              return value === 0 ? 0 : 1;
            case 1:
              return D.JSInt_methods._shrOtherPositive$1(A._asInt(value), 1);
            case 2:
              return value;
            case 3:
              return value * 17;
            case 4:
              return value * 4369;
            case 5:
              return value * 286331153;
            case 6:
              return value * 8;
            case 7:
              return value * 2184;
            case 8:
              return value * 143165576;
            case 9:
            case 10:
            case 11:
              return value / 3;
          }
          break;
        case 3:
          switch (to.index) {
            case 0:
              return value === 0 ? 0 : 1;
            case 1:
              return D.JSInt_methods._shrOtherPositive$1(A._asInt(value), 6);
            case 2:
              return D.JSInt_methods._shrOtherPositive$1(A._asInt(value), 4);
            case 3:
              return value;
            case 4:
              return value * 257;
            case 5:
              return value * 16843009;
            case 6:
              return D.JSInt_methods._shrOtherPositive$1(A._asInt(value), 1);
            case 7:
              return value * 128;
            case 8:
              return value * 8421504;
            case 9:
            case 10:
            case 11:
              return value / 255;
          }
          break;
        case 4:
          switch (to.index) {
            case 0:
              return value === 0 ? 0 : 1;
            case 1:
              return D.JSInt_methods._shrOtherPositive$1(A._asInt(value), 14);
            case 2:
              return D.JSInt_methods._shrOtherPositive$1(A._asInt(value), 12);
            case 3:
              return D.JSInt_methods._shrOtherPositive$1(A._asInt(value), 8);
            case 4:
              return value;
            case 5:
              return A._asInt(value) << 8 >>> 0;
            case 6:
              return D.JSInt_methods._shrOtherPositive$1(A._asInt(value), 9);
            case 7:
              return D.JSInt_methods._shrOtherPositive$1(A._asInt(value), 1);
            case 8:
              return value * 524296;
            case 9:
            case 10:
            case 11:
              return value / 65535;
          }
          break;
        case 5:
          switch (to.index) {
            case 0:
              return value === 0 ? 0 : 1;
            case 1:
              return D.JSInt_methods._shrOtherPositive$1(A._asInt(value), 30);
            case 2:
              return D.JSInt_methods._shrOtherPositive$1(A._asInt(value), 28);
            case 3:
              return D.JSInt_methods._shrOtherPositive$1(A._asInt(value), 24);
            case 4:
              return D.JSInt_methods._shrOtherPositive$1(A._asInt(value), 16);
            case 5:
              return value;
            case 6:
              return D.JSInt_methods._shrOtherPositive$1(A._asInt(value), 25);
            case 7:
              return D.JSInt_methods._shrOtherPositive$1(A._asInt(value), 17);
            case 8:
              return D.JSInt_methods._shrOtherPositive$1(A._asInt(value), 1);
            case 9:
            case 10:
            case 11:
              return value / 4294967295;
          }
          break;
        case 6:
          switch (to.index) {
            case 0:
              return value === 0 ? 0 : 1;
            case 1:
              return value <= 0 ? 0 : D.JSInt_methods._shrOtherPositive$1(A._asInt(value), 5);
            case 2:
              return value <= 0 ? 0 : D.JSInt_methods._shrOtherPositive$1(A._asInt(value), 3);
            case 3:
              return value <= 0 ? 0 : A._asInt(value) << 1 >>> 0;
            case 4:
              return value <= 0 ? 0 : A._asInt(value) * 516;
            case 5:
              return value <= 0 ? 0 : A._asInt(value) * 33818640;
            case 6:
              return value;
            case 7:
              return value * 258;
            case 8:
              return value * 16909320;
            case 9:
            case 10:
            case 11:
              return value / 127;
          }
          break;
        case 7:
          switch (to.index) {
            case 0:
              return value === 0 ? 0 : 1;
            case 1:
              return value <= 0 ? 0 : D.JSInt_methods._shrOtherPositive$1(A._asInt(value), 15);
            case 2:
              return value <= 0 ? 0 : D.JSInt_methods._shrOtherPositive$1(A._asInt(value), 11);
            case 3:
              return value <= 0 ? 0 : D.JSInt_methods._shrOtherPositive$1(A._asInt(value), 7);
            case 4:
              return value <= 0 ? 0 : A._asInt(value) << 1 >>> 0;
            case 5:
              return value <= 0 ? 0 : A._asInt(value) * 131076;
            case 6:
              return D.JSInt_methods._shrOtherPositive$1(A._asInt(value), 8);
            case 7:
              return value;
            case 8:
              return A._asInt(value) * 65538;
            case 9:
            case 10:
            case 11:
              return value / 32767;
          }
          break;
        case 8:
          switch (to.index) {
            case 0:
              return value === 0 ? 0 : 1;
            case 1:
              return value <= 0 ? 0 : D.JSInt_methods._shrOtherPositive$1(A._asInt(value), 29);
            case 2:
              return value <= 0 ? 0 : D.JSInt_methods._shrOtherPositive$1(A._asInt(value), 27);
            case 3:
              return value <= 0 ? 0 : D.JSInt_methods._shrOtherPositive$1(A._asInt(value), 23);
            case 4:
              return value <= 0 ? 0 : D.JSInt_methods._shrOtherPositive$1(A._asInt(value), 16);
            case 5:
              return value <= 0 ? 0 : A._asInt(value) << 1 >>> 0;
            case 6:
              return D.JSInt_methods._shrOtherPositive$1(A._asInt(value), 24);
            case 7:
              return D.JSInt_methods._shrOtherPositive$1(A._asInt(value), 16);
            case 8:
              return value;
            case 9:
            case 10:
            case 11:
              return value / 2147483647;
          }
          break;
        case 9:
        case 10:
        case 11:
          switch (to.index) {
            case 0:
              return value === 0 ? 0 : 1;
            case 1:
              return D.JSNumber_methods.toInt$0(D.JSNumber_methods.clamp$2(value, 0, 1) * 3);
            case 2:
              return D.JSNumber_methods.toInt$0(D.JSNumber_methods.clamp$2(value, 0, 1) * 15);
            case 3:
              return D.JSNumber_methods.toInt$0(D.JSNumber_methods.clamp$2(value, 0, 1) * 255);
            case 4:
              return D.JSNumber_methods.toInt$0(D.JSNumber_methods.clamp$2(value, 0, 1) * 65535);
            case 5:
              return D.JSNumber_methods.toInt$0(D.JSNumber_methods.clamp$2(value, 0, 1) * 4294967295);
            case 6:
              return D.JSNumber_methods.toInt$0(value < 0 ? D.JSNumber_methods.clamp$2(value, -1, 1) * 128 : D.JSNumber_methods.clamp$2(value, -1, 1) * 127);
            case 7:
              return D.JSNumber_methods.toInt$0(value < 0 ? D.JSNumber_methods.clamp$2(value, -1, 1) * 32768 : D.JSNumber_methods.clamp$2(value, -1, 1) * 32767);
            case 8:
              return D.JSNumber_methods.toInt$0(value < 0 ? D.JSNumber_methods.clamp$2(value, -1, 1) * 2147483648 : D.JSNumber_methods.clamp$2(value, -1, 1) * 2147483647);
            case 9:
            case 10:
            case 11:
              return value;
          }
          break;
      }
    },
    Format: function Format(t0, t1) {
      this.index = t0;
      this._name = t1;
    },
    ExifData: function ExifData(t0) {
      this.directories = t0;
    },
    ExifTag$($name, type, count) {
      return new B.ExifTag($name, type);
    },
    ExifTag: function ExifTag(t0, t1) {
      this.name = t0;
      this.type = t1;
    },
    IfdContainer: function IfdContainer(t0) {
      this.directories = t0;
    },
    IfdDirectory: function IfdDirectory(t0, t1) {
      this.data = t0;
      this.sub = t1;
    },
    IfdValueType: function IfdValueType(t0, t1) {
      this.index = t0;
      this._name = t1;
    },
    IfdValue: function IfdValue() {
    },
    IfdValueLong: function IfdValueLong(t0) {
      this.value = t0;
    },
    Encoder: function Encoder() {
    },
    JpegChroma: function JpegChroma(t0, t1) {
      this.index = t0;
      this._name = t1;
    },
    JpegEncoder: function JpegEncoder(t0, t1, t2, t3, t4, t5, t6, t7, t8) {
      var _ = this;
      _._yTable = t0;
      _._uvTable = t1;
      _._fdtblY = t2;
      _._fdtblUv = t3;
      _._uvdcHuffman = _._ydcHuffman = null;
      _.__JpegEncoder__uvacHuffman_A = _.__JpegEncoder__yacHuffman_A = $;
      _._bitCode = t4;
      _._category = t5;
      _._outputfDCTQuant = t6;
      _._du = t7;
      _._rgbYuvTable = t8;
      _._currentQuality = null;
      _._byteNew = 0;
      _._bytePos = 7;
    },
    FrameType: function FrameType(t0, t1) {
      this.index = t0;
      this._name = t1;
    },
    Image0: function Image0() {
      this._exif = this.data = null;
      this.__Image_frames_AI = $;
    },
    ImageData1: function ImageData1() {
    },
    ImageDataFloat16: function ImageDataFloat16(t0, t1, t2, t3) {
      var _ = this;
      _.data = t0;
      _.width = t1;
      _.height = t2;
      _.numChannels = t3;
    },
    ImageDataFloat32: function ImageDataFloat32(t0, t1, t2, t3) {
      var _ = this;
      _.data = t0;
      _.width = t1;
      _.height = t2;
      _.numChannels = t3;
    },
    ImageDataFloat64: function ImageDataFloat64(t0, t1, t2, t3) {
      var _ = this;
      _.data = t0;
      _.width = t1;
      _.height = t2;
      _.numChannels = t3;
    },
    ImageDataInt16: function ImageDataInt16(t0, t1, t2, t3) {
      var _ = this;
      _.data = t0;
      _.width = t1;
      _.height = t2;
      _.numChannels = t3;
    },
    ImageDataInt32: function ImageDataInt32(t0, t1, t2, t3) {
      var _ = this;
      _.data = t0;
      _.width = t1;
      _.height = t2;
      _.numChannels = t3;
    },
    ImageDataInt8: function ImageDataInt8(t0, t1, t2, t3) {
      var _ = this;
      _.data = t0;
      _.width = t1;
      _.height = t2;
      _.numChannels = t3;
    },
    ImageDataUint1: function ImageDataUint1(t0, t1, t2, t3, t4) {
      var _ = this;
      _.__ImageDataUint1_data_F = $;
      _.rowStride = t0;
      _.palette = t1;
      _.width = t2;
      _.height = t3;
      _.numChannels = t4;
    },
    ImageDataUint16: function ImageDataUint16(t0, t1, t2, t3, t4) {
      var _ = this;
      _.data = t0;
      _.palette = t1;
      _.width = t2;
      _.height = t3;
      _.numChannels = t4;
    },
    ImageDataUint2: function ImageDataUint2(t0, t1, t2, t3, t4) {
      var _ = this;
      _.__ImageDataUint2_data_F = $;
      _.rowStride = t0;
      _.palette = t1;
      _.width = t2;
      _.height = t3;
      _.numChannels = t4;
    },
    ImageDataUint32: function ImageDataUint32(t0, t1, t2, t3) {
      var _ = this;
      _.data = t0;
      _.width = t1;
      _.height = t2;
      _.numChannels = t3;
    },
    ImageDataUint4: function ImageDataUint4(t0, t1, t2, t3, t4) {
      var _ = this;
      _.__ImageDataUint4_data_F = $;
      _.rowStride = t0;
      _.palette = t1;
      _.width = t2;
      _.height = t3;
      _.numChannels = t4;
    },
    ImageDataUint8: function ImageDataUint8(t0, t1, t2, t3, t4) {
      var _ = this;
      _.data = t0;
      _.palette = t1;
      _.width = t2;
      _.height = t3;
      _.numChannels = t4;
    },
    PixelFloat16$imageData(image) {
      return new B.PixelFloat16(-1, 0, -image.numChannels, image);
    },
    PixelFloat16: function PixelFloat16(t0, t1, t2, t3) {
      var _ = this;
      _._pixel_float16$_x = t0;
      _._pixel_float16$_y = t1;
      _._pixel_float16$_index = t2;
      _.image = t3;
    },
    PixelFloat32$imageData(image) {
      return new B.PixelFloat32(-1, 0, -image.numChannels, image);
    },
    PixelFloat32: function PixelFloat32(t0, t1, t2, t3) {
      var _ = this;
      _._pixel_float32$_x = t0;
      _._pixel_float32$_y = t1;
      _._pixel_float32$_index = t2;
      _.image = t3;
    },
    PixelFloat64$imageData(image) {
      return new B.PixelFloat64(-1, 0, -image.numChannels, image);
    },
    PixelFloat64: function PixelFloat64(t0, t1, t2, t3) {
      var _ = this;
      _._pixel_float64$_x = t0;
      _._pixel_float64$_y = t1;
      _._pixel_float64$_index = t2;
      _.image = t3;
    },
    PixelInt16$imageData(image) {
      return new B.PixelInt16(-1, 0, -image.numChannels, image);
    },
    PixelInt16: function PixelInt16(t0, t1, t2, t3) {
      var _ = this;
      _._pixel_int16$_x = t0;
      _._pixel_int16$_y = t1;
      _._pixel_int16$_index = t2;
      _.image = t3;
    },
    PixelInt32$imageData(image) {
      return new B.PixelInt32(-1, 0, -image.numChannels, image);
    },
    PixelInt32: function PixelInt32(t0, t1, t2, t3) {
      var _ = this;
      _._pixel_int32$_x = t0;
      _._pixel_int32$_y = t1;
      _._pixel_int32$_index = t2;
      _.image = t3;
    },
    PixelInt8$imageData(image) {
      return new B.PixelInt8(-1, 0, -image.numChannels, image);
    },
    PixelInt8: function PixelInt8(t0, t1, t2, t3) {
      var _ = this;
      _._pixel_int8$_x = t0;
      _._pixel_int8$_y = t1;
      _._pixel_int8$_index = t2;
      _.image = t3;
    },
    PixelUint1$imageData(image) {
      return new B.PixelUint1(-1, 0, 0, -1, 0, image);
    },
    PixelUint1: function PixelUint1(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _._pixel_uint1$_x = t0;
      _._pixel_uint1$_y = t1;
      _._pixel_uint1$_index = t2;
      _._pixel_uint1$_bitIndex = t3;
      _._pixel_uint1$_rowOffset = t4;
      _.image = t5;
    },
    PixelUint16$imageData(image) {
      return new B.PixelUint16(-1, 0, -image.numChannels, image);
    },
    PixelUint16: function PixelUint16(t0, t1, t2, t3) {
      var _ = this;
      _._pixel_uint16$_x = t0;
      _._pixel_uint16$_y = t1;
      _._pixel_uint16$_index = t2;
      _.image = t3;
    },
    PixelUint2$imageData(image) {
      return new B.PixelUint2(-1, 0, 0, -2, 0, image);
    },
    PixelUint2: function PixelUint2(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _._pixel_uint2$_x = t0;
      _._pixel_uint2$_y = t1;
      _._pixel_uint2$_index = t2;
      _._pixel_uint2$_bitIndex = t3;
      _._rowOffset = t4;
      _.image = t5;
    },
    PixelUint32$imageData(image) {
      return new B.PixelUint32(-1, 0, -image.numChannels, image);
    },
    PixelUint32: function PixelUint32(t0, t1, t2, t3) {
      var _ = this;
      _._pixel_uint32$_x = t0;
      _._pixel_uint32$_y = t1;
      _._pixel_uint32$_index = t2;
      _.image = t3;
    },
    PixelUint4$imageData(image) {
      return new B.PixelUint4(-1, 0, 0, -(image.numChannels << 2 >>> 0), image);
    },
    PixelUint4: function PixelUint4(t0, t1, t2, t3, t4) {
      var _ = this;
      _._pixel_uint4$_x = t0;
      _._pixel_uint4$_y = t1;
      _._pixel_uint4$_index = t2;
      _._bitIndex = t3;
      _.image = t4;
    },
    PixelUint8$imageData(image) {
      return new B.PixelUint8(-1, 0, -image.numChannels, image);
    },
    PixelUint8: function PixelUint8(t0, t1, t2, t3) {
      var _ = this;
      _._pixel_uint8$_x = t0;
      _._pixel_uint8$_y = t1;
      _._pixel_uint8$_index = t2;
      _.image = t3;
    },
    PixelUndefined: function PixelUndefined() {
    },
    ImageException: function ImageException(t0) {
      this.message = t0;
    },
    OutputBuffer$(bigEndian) {
      return new B.OutputBuffer(bigEndian, new Uint8Array(8192));
    },
    OutputBuffer: function OutputBuffer(t0, t1) {
      this.length = 0;
      this.bigEndian = t0;
      this._output_buffer$_buffer = t1;
    },
    ByteWriter: function ByteWriter(t0, t1) {
      this.data = t0;
      this.endian = t1;
      this.i = 0;
    },
    Channel$(nx, ny) {
      var t1 = new B.Channel(nx, ny);
      t1.Channel$2(nx, ny);
      return t1;
    },
    Channel: function Channel(t0, t1) {
      this.nx = t0;
      this.ny = t1;
      this.__Channel_ac_A = $;
    },
    Image1: function Image1(t0, t1, t2) {
      this.width = t0;
      this.height = t1;
      this.rgba = t2;
    },
    Uint32List_Uint32List$view(buffer) {
      return J.asUint32List$2$x(buffer, 0, null);
    },
    decode83(text, from, to) {
      var t1, i, result, index;
      for (t1 = text.length, i = from, result = 0; i < to; ++i) {
        if (!(i < t1))
          return A.ioore(text, i);
        index = C.Map_4Rm2t.$index(0, text[i]);
        if (index == null)
          throw A.wrapException(B.BlurHashDecodeException$("Invalid BlurHash encoding: invalid character " + A.S(index)));
        result = result * 83 + index;
      }
      return result;
    },
    _convertColor(c, c2, a) {
      var cl, g, ci, l, v,
        numChannels = c2.get$length(c2),
        format = c2.get$format(),
        t1 = c.get$palette(),
        fromFormat = t1 == null ? null : t1.get$format();
      if (fromFormat == null)
        fromFormat = c.get$format();
      cl = c.get$length(c);
      if (numChannels === 1) {
        g = c.get$length(c) > 2 ? c.get$luminance() : c.$index(0, 0);
        c2.$indexSet(0, 0, B.convertFormatValue(A._isInt(c.$index(0, 0)) ? D.JSNumber_methods.floor$0(g) : g, fromFormat, format));
      } else if (numChannels <= cl)
        for (ci = 0; ci < numChannels; ++ci)
          c2.$indexSet(0, ci, B.convertFormatValue(c.$index(0, ci), fromFormat, format));
      else if (cl === 2) {
        l = B.convertFormatValue(c.$index(0, 0), fromFormat, format);
        if (numChannels === 3) {
          c2.$indexSet(0, 0, l);
          c2.$indexSet(0, 1, l);
          c2.$indexSet(0, 2, l);
        } else {
          a = B.convertFormatValue(c.$index(0, 1), fromFormat, format);
          c2.$indexSet(0, 0, l);
          c2.$indexSet(0, 1, l);
          c2.$indexSet(0, 2, l);
          c2.$indexSet(0, 3, a);
        }
      } else {
        for (ci = 0; ci < cl; ++ci)
          c2.$indexSet(0, ci, B.convertFormatValue(c.$index(0, ci), fromFormat, format));
        v = cl === 1 ? c2.$index(0, 0) : 0;
        for (ci = cl; ci < numChannels; ++ci)
          c2.$indexSet(0, ci, ci === 3 ? a : v);
      }
      return c2;
    },
    convertColor(c, alpha, format, numChannels) {
      var c2, _null = null,
        t1 = c.get$palette(),
        fromFormat = t1 == null ? _null : t1.get$format();
      if (fromFormat == null)
        fromFormat = c.get$format();
      numChannels = c.get$length(c);
      if (format === fromFormat && numChannels === c.get$length(c)) {
        t1 = c.clone$0(0);
        return t1;
      }
      switch (format.index) {
        case 3:
          c2 = new B.ColorUint8(new Uint8Array(numChannels));
          return B._convertColor(c, c2, 0);
        case 0:
          return B._convertColor(c, new B.ColorUint1(numChannels, 0), 0);
        case 1:
          return B._convertColor(c, new B.ColorUint2(numChannels, 0), 0);
        case 2:
          t1 = numChannels < 3 ? 1 : 2;
          c2 = new B.ColorUint4(numChannels, new Uint8Array(t1));
          return B._convertColor(c, c2, 0);
        case 4:
          c2 = new B.ColorUint16(new Uint16Array(numChannels));
          return B._convertColor(c, c2, 0);
        case 5:
          c2 = new B.ColorUint32(new Uint32Array(numChannels));
          return B._convertColor(c, c2, 0);
        case 6:
          c2 = new B.ColorInt8(new Int8Array(numChannels));
          return B._convertColor(c, c2, 0);
        case 7:
          c2 = new B.ColorInt16(new Int16Array(numChannels));
          return B._convertColor(c, c2, 0);
        case 8:
          c2 = new B.ColorInt32(new Int32Array(numChannels));
          return B._convertColor(c, c2, 0);
        case 9:
          c2 = new B.ColorFloat16(new Uint16Array(numChannels));
          return B._convertColor(c, c2, 0);
        case 10:
          c2 = new B.ColorFloat32(new Float32Array(numChannels));
          return B._convertColor(c, c2, 0);
        case 11:
          c2 = new B.ColorFloat64(new Float64Array(numChannels));
          return B._convertColor(c, c2, 0);
      }
    },
    getLuminance(c) {
      return 0.299 * c.get$r(c) + 0.587 * c.get$g() + 0.114 * c.get$b(c);
    },
    Float16_doubleToFloat16(n) {
      var xI, e, m,
        t1 = $.$get$__float32();
      t1.$flags & 2 && A.throwUnsupportedOperation(t1);
      t1[0] = n;
      t1 = $.$get$__float32ToUint32();
      if (0 >= t1.length)
        return A.ioore(t1, 0);
      xI = t1[0];
      if (n === 0)
        return xI >>> 16;
      if ($.Float16__toFloatFloat32Data == null)
        B.Float16__initialize();
      e = xI >>> 23 & 511;
      t1 = $.Float16____eLut._readField$0();
      if (!(e < t1.length))
        return A.ioore(t1, e);
      e = t1[e];
      if (e !== 0) {
        m = xI & 8388607;
        return e + (m + 4095 + (m >>> 13 & 1) >>> 13);
      }
      return B.Float16__convert(xI);
    },
    Float16__convert(i) {
      var t, t1,
        s = i >>> 16 & 32768,
        e = (i >>> 23 & 255) - 112,
        m = i & 8388607;
      if (e <= 0) {
        if (e < -10)
          return s;
        m |= 8388608;
        t = 14 - e;
        return (s | D.JSInt_methods.$shr(m + (D.JSInt_methods.$shl(1, t - 1) - 1) + (D.JSInt_methods._shrReceiverPositive$1(m, t) & 1), t)) >>> 0;
      } else if (e === 143)
        if (m === 0)
          return s | 31744;
        else {
          m = m >>> 13;
          t1 = m === 0 ? 1 : 0;
          return s | m | t1 | 31744;
        }
      else {
        m = m + 4095 + (m >>> 13 & 1);
        if ((m & 8388608) !== 0) {
          ++e;
          m = 0;
        }
        if (e > 30)
          return s | 31744;
        return (s | e << 10 | m >>> 13) >>> 0;
      }
    },
    Float16__initialize() {
      var floatUint32Data, i, e, t2, t3,
        t1 = $.Float16__toFloatFloat32Data;
      if (t1 != null)
        return t1;
      floatUint32Data = new Uint32Array(65536);
      $.Float16__toFloatFloat32Data = J.asFloat32List$2$x(D.NativeUint32List_methods.get$buffer(floatUint32Data), 0, null);
      t1 = new Uint16Array(512);
      $.Float16____eLut._value = t1;
      for (i = 0; i < 256; ++i) {
        e = (i & 255) - 112;
        if (e <= 0 || e >= 30) {
          t1[i] = 0;
          t2 = (i | 256) >>> 0;
          if (!(t2 < 512))
            return A.ioore(t1, t2);
          t1[t2] = 0;
        } else {
          t2 = e << 10 >>> 0;
          t1[i] = t2;
          t3 = (i | 256) >>> 0;
          if (!(t3 < 512))
            return A.ioore(t1, t3);
          t1[t3] = (t2 | 32768) >>> 0;
        }
      }
      for (i = 0; i < 65536; ++i)
        floatUint32Data[i] = B.Float16__halfToFloat(i);
      t1 = $.Float16__toFloatFloat32Data;
      t1.toString;
      return t1;
    },
    Float16__halfToFloat(y) {
      var t1,
        s = y >>> 15 & 1,
        e = y >>> 10 & 31,
        m = y & 1023;
      if (e === 0)
        if (m === 0)
          return s << 31 >>> 0;
        else {
          for (; (m & 1024) === 0;) {
            m = m << 1;
            --e;
          }
          ++e;
          m &= 4294966271;
        }
      else if (e === 31) {
        t1 = s << 31;
        if (m === 0)
          return (t1 | 2139095040) >>> 0;
        else
          return (t1 | m << 13 | 2139095040) >>> 0;
      }
      return (s << 31 | e + 112 << 23 | m << 13) >>> 0;
    },
    rgbaToBmp(image) {
      var t4, i, t5, t6, t7,
        t1 = image.width,
        t2 = image.height,
        rgbSize = t1 * t2 * 4,
        fileSize = rgbSize + 54,
        t3 = new DataView(new ArrayBuffer(fileSize)),
        out = new B.ByteWriter(t3, D.C_Endian);
      out.writeUint16$1(19778);
      out.writeUint32$1(fileSize);
      out.writeUint32$1(0);
      out.writeUint32$1(54);
      out.writeUint32$1(40);
      out.writeUint32$1(t1);
      out.writeUint32$1(-t2);
      out.writeUint16$1(1);
      out.writeUint16$1(32);
      out.writeUint32$1(0);
      out.writeUint32$1(rgbSize);
      out.writeUint32$1(0);
      out.writeUint32$1(0);
      out.writeUint32$1(0);
      out.writeUint32$1(0);
      for (t1 = image.rgba, t2 = t1.length, t4 = t2 / 4 | 0, i = 0; i < t4; ++i) {
        t5 = i * 4;
        t6 = t5 + 2;
        if (!(t6 < t2))
          return A.ioore(t1, t6);
        t6 = t1[t6];
        t3.setUint8(out.i, t6);
        t6 = ++out.i;
        t7 = t5 + 1;
        if (!(t7 < t2))
          return A.ioore(t1, t7);
        t3.setUint8(t6, t1[t7]);
        t7 = ++out.i;
        if (!(t5 < t2))
          return A.ioore(t1, t5);
        t3.setUint8(t7, t1[t5]);
        t7 = ++out.i;
        t5 += 3;
        if (!(t5 < t2))
          return A.ioore(t1, t5);
        t3.setUint8(t7, t1[t5]);
        ++out.i;
      }
      return J.asUint8List$0$x(D.NativeByteData_methods.get$buffer(t3));
    },
    thumbHashToRGBA(hash) {
      var t2, t3, header24, header16, lDc, pDc, qDc, hasAlpha, isLandscape, lx, ly, aDc, acStart, lChannel, pChannel, qChannel, acIndex, aChannel, aAc, t4, ratio, w, h, t5, rgba, cxStop, cyStop, fx, fy, t6, t7, t8, t9, y, i, t10, x, t11, cx, cy, l, j, fy2, t12, q, p, f, a, t13, b, r, _s2_ = "ac",
        t1 = hash.length;
      if (0 >= t1)
        return A.ioore(hash, 0);
      t2 = hash[0];
      if (1 >= t1)
        return A.ioore(hash, 1);
      t3 = hash[1];
      if (2 >= t1)
        return A.ioore(hash, 2);
      header24 = t2 & 255 | (t3 & 255) << 8 | (hash[2] & 255) << 16;
      if (3 >= t1)
        return A.ioore(hash, 3);
      t3 = hash[3];
      if (4 >= t1)
        return A.ioore(hash, 4);
      header16 = t3 & 255 | (hash[4] & 255) << 8;
      lDc = (header24 & 63) / 63;
      pDc = (header24 >>> 6 & 63) / 31.5 - 1;
      qDc = (header24 >>> 12 & 63) / 31.5 - 1;
      hasAlpha = header24 >>> 23 !== 0;
      isLandscape = header16 >>> 15 !== 0;
      if (isLandscape)
        t2 = hasAlpha ? 5 : 7;
      else
        t2 = header16 & 7;
      lx = Math.max(3, t2);
      if (isLandscape)
        t2 = header16 & 7;
      else
        t2 = hasAlpha ? 5 : 7;
      ly = Math.max(3, t2);
      if (hasAlpha) {
        if (5 >= t1)
          return A.ioore(hash, 5);
        aDc = (hash[5] & 15) / 15;
      } else
        aDc = 1;
      if (5 >= t1)
        return A.ioore(hash, 5);
      t1 = hash[5];
      acStart = hasAlpha ? 6 : 5;
      lChannel = B.Channel$(lx, ly);
      pChannel = B.Channel$(3, 3);
      qChannel = B.Channel$(3, 3);
      acIndex = qChannel.decode$4(0, hash, acStart, pChannel.decode$4(0, hash, acStart, lChannel.decode$4(0, hash, acStart, 0, (header24 >>> 18 & 31) / 31), (header16 >>> 3 & 63) / 63 * 1.25), (header16 >>> 9 & 63) / 63 * 1.25);
      if (hasAlpha) {
        aChannel = B.Channel$(5, 5);
        aChannel.decode$4(0, hash, acStart, acIndex, (t1 >>> 4 & 15) / 15);
      } else
        aChannel = null;
      t1 = lChannel.__Channel_ac_A;
      t1 === $ && A.throwLateFieldNI(_s2_);
      t2 = pChannel.__Channel_ac_A;
      t2 === $ && A.throwLateFieldNI(_s2_);
      t3 = qChannel.__Channel_ac_A;
      t3 === $ && A.throwLateFieldNI(_s2_);
      if (aChannel == null)
        aAc = null;
      else {
        t4 = aChannel.__Channel_ac_A;
        t4 === $ && A.throwLateFieldNI(_s2_);
        aAc = t4;
      }
      ratio = B.thumbHashToApproximateAspectRatio(hash);
      t4 = ratio > 1;
      w = D.JSNumber_methods.round$0(t4 ? 32 : 32 * ratio);
      h = D.JSNumber_methods.round$0(t4 ? 32 / ratio : 32);
      t5 = w * h * 4;
      rgba = new Uint8Array(t5);
      t4 = hasAlpha ? 5 : 3;
      cxStop = Math.max(lx, t4);
      t4 = hasAlpha ? 5 : 3;
      cyStop = Math.max(ly, t4);
      t4 = type$.double;
      fx = A.List_List$filled(cxStop, 0, false, t4);
      fy = A.List_List$filled(cyStop, 0, false, t4);
      for (t4 = t2.length, t6 = t3.length, t7 = t1.length, t8 = 3.141592653589793 / h, t9 = 3.141592653589793 / w, y = 0, i = 0; y < h; ++y)
        for (t10 = t8 * (y + 0.5), x = 0; x < w; ++x, i += 4) {
          for (t11 = t9 * (x + 0.5), cx = 0; cx < cxStop; ++cx)
            D.JSArray_methods.$indexSet(fx, cx, Math.cos(t11 * cx));
          for (cy = 0; cy < cyStop; ++cy)
            D.JSArray_methods.$indexSet(fy, cy, Math.cos(t10 * cy));
          for (l = lDc, cy = 0, j = 0; cy < ly; ++cy) {
            if (!(cy < cyStop))
              return A.ioore(fy, cy);
            fy2 = fy[cy] * 2;
            cx = cy > 0 ? 0 : 1;
            t11 = lx * (ly - cy);
            for (; cx * ly < t11; ++cx, ++j) {
              if (!(j >= 0 && j < t7))
                return A.ioore(t1, j);
              t12 = t1[j];
              if (!(cx < cxStop))
                return A.ioore(fx, cx);
              l += t12 * fx[cx] * fy2;
            }
          }
          for (q = qDc, p = pDc, cy = 0, j = 0; cy < 3; ++cy) {
            if (!(cy < cyStop))
              return A.ioore(fy, cy);
            fy2 = fy[cy] * 2;
            cx = cy > 0 ? 0 : 1;
            t11 = 3 - cy;
            for (; cx < t11; ++cx, ++j) {
              if (!(cx < cxStop))
                return A.ioore(fx, cx);
              f = fx[cx] * fy2;
              if (!(j >= 0 && j < t4))
                return A.ioore(t2, j);
              p += t2[j] * f;
              if (!(j < t6))
                return A.ioore(t3, j);
              q += t3[j] * f;
            }
          }
          if (aAc != null)
            for (t11 = aAc.length, a = aDc, cy = 0, j = 0; cy < 5; ++cy) {
              if (!(cy < cyStop))
                return A.ioore(fy, cy);
              fy2 = fy[cy] * 2;
              cx = cy > 0 ? 0 : 1;
              t12 = 5 - cy;
              for (; cx < t12; ++cx, ++j) {
                if (!(j >= 0 && j < t11))
                  return A.ioore(aAc, j);
                t13 = aAc[j];
                if (!(cx < cxStop))
                  return A.ioore(fx, cx);
                a += t13 * fx[cx] * fy2;
              }
            }
          else
            a = aDc;
          b = l - 0.6666666666666666 * p;
          r = (3 * l - b + q) / 2;
          t11 = D.JSNumber_methods.round$0(Math.max(0, 255 * Math.min(1, r)));
          if (!(i >= 0 && i < t5))
            return A.ioore(rgba, i);
          rgba[i] = t11;
          t11 = i + 1;
          t12 = D.JSNumber_methods.round$0(Math.max(0, 255 * Math.min(1, r - q)));
          if (!(t11 < t5))
            return A.ioore(rgba, t11);
          rgba[t11] = t12;
          t12 = i + 2;
          t11 = D.JSNumber_methods.round$0(Math.max(0, 255 * Math.min(1, b)));
          if (!(t12 < t5))
            return A.ioore(rgba, t12);
          rgba[t12] = t11;
          t11 = i + 3;
          t12 = D.JSNumber_methods.round$0(Math.max(0, 255 * Math.min(1, a)));
          if (!(t11 < t5))
            return A.ioore(rgba, t11);
          rgba[t11] = t12;
        }
      return new B.Image1(w, h, rgba);
    },
    thumbHashToApproximateAspectRatio(hash) {
      var header, hasAlpha, isLandscape, lx, ly,
        t1 = hash.length;
      if (3 >= t1)
        return A.ioore(hash, 3);
      header = hash[3];
      hasAlpha = (hash[2] & 128) !== 0;
      if (4 >= t1)
        return A.ioore(hash, 4);
      isLandscape = (hash[4] & 128) !== 0;
      if (isLandscape)
        lx = hasAlpha ? 5 : 7;
      else
        lx = header & 7;
      if (isLandscape)
        ly = header & 7;
      else
        ly = hasAlpha ? 5 : 7;
      return lx / ly;
    }
  },
  C, O, P, X, Y, H, E, Z, G;
  J = holdersList[1];
  A = holdersList[0];
  D = holdersList[2];
  I = holdersList[124];
  F = holdersList[57];
  K = holdersList[175];
  L = holdersList[76];
  Q = holdersList[206];
  R = holdersList[132];
  S = holdersList[157];
  T = holdersList[78];
  U = holdersList[99];
  V = holdersList[131];
  N = holdersList[47];
  M = holdersList[53];
  W = holdersList[204];
  B = hunkHelpers.updateHolder(holdersList[13], B);
  C = holdersList[205];
  O = holdersList[38];
  P = holdersList[138];
  X = holdersList[135];
  Y = holdersList[84];
  H = holdersList[145];
  E = holdersList[136];
  Z = holdersList[168];
  G = holdersList[137];
  B.BlurHash.prototype = {};
  B.BlurHashDecodeException.prototype = {
    toString$0(_) {
      return "Exception: " + this.message;
    },
    $isException: 1
  };
  B.ColorTriplet.prototype = {
    $add(_, other) {
      type$.ColorTriplet._as(other);
      return new B.ColorTriplet(this.r + other.r, this.g + other.g, this.b + other.b);
    },
    $sub(_, other) {
      type$.ColorTriplet._as(other);
      return new B.ColorTriplet(this.r - other.r, this.g - other.g, this.b - other.b);
    },
    $mul(_, scalar) {
      return new B.ColorTriplet(this.r * scalar, this.g * scalar, this.b * scalar);
    },
    toString$0(_) {
      return "ColorTriplet(" + A.S(this.r) + ", " + A.S(this.g) + ", " + A.S(this.b) + ")";
    }
  };
  B.MemoryImage.prototype = {
    obtainKey$1(configuration) {
      return new A.SynchronousFuture(this, type$.SynchronousFuture_MemoryImage);
    },
    loadBuffer$2(key, decode) {
      type$.MemoryImage._as(key);
      return L.MultiFrameImageStreamCompleter$(null, this._image_provider$_loadAsync$2$decode(key, type$.Future_Codec_Function_ImmutableBuffer_$named_allowUpscaling_bool_and_cacheHeight_nullable_int_and_cacheWidth_nullable_int._as(decode)), "MemoryImage(" + ("<optimized out>#" + A.shortHash(key.bytes)) + ")", null, 1);
    },
    loadImage$2(key, decode) {
      type$.MemoryImage._as(key);
      return L.MultiFrameImageStreamCompleter$(null, this._image_provider$_loadAsync$2$decode(key, type$.Future_Codec_Function_ImmutableBuffer_$named_getTargetSize_nullable_TargetImageSize_Function_int_int._as(decode)), "MemoryImage(" + ("<optimized out>#" + A.shortHash(key.bytes)) + ")", null, 1);
    },
    _image_provider$_loadAsync$2$decode(key, decode) {
      return this._loadAsync$body$MemoryImage(key, type$.Future_Codec_Function_ImmutableBuffer._as(decode));
    },
    _loadAsync$body$MemoryImage(key, decode) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Codec),
        $async$returnValue, $async$self = this, $async$temp1;
      var $async$_image_provider$_loadAsync$2$decode = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$temp1 = decode;
              $async$goto = 3;
              return A._asyncAwait(L.ImmutableBuffer_fromUint8List($async$self.bytes), $async$_image_provider$_loadAsync$2$decode);
            case 3:
              // returning from await.
              $async$returnValue = $async$temp1.call$1($async$result);
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$_image_provider$_loadAsync$2$decode, $async$completer);
    },
    $eq(_, other) {
      var t1;
      if (other == null)
        return false;
      if (J.get$runtimeType$(other) !== A.getRuntimeTypeOfDartObject(this))
        return false;
      if (other instanceof B.MemoryImage)
        t1 = other.bytes === this.bytes;
      else
        t1 = false;
      return t1;
    },
    get$hashCode(_) {
      return A.Object_hash(A.Primitives_objectHashCode(this.bytes), 1, D.C_SentinelValue, D.C_SentinelValue, D.C_SentinelValue, D.C_SentinelValue, D.C_SentinelValue, D.C_SentinelValue, D.C_SentinelValue, D.C_SentinelValue, D.C_SentinelValue, D.C_SentinelValue, D.C_SentinelValue, D.C_SentinelValue, D.C_SentinelValue, D.C_SentinelValue, D.C_SentinelValue, D.C_SentinelValue, D.C_SentinelValue, D.C_SentinelValue);
    },
    toString$0(_) {
      return "MemoryImage(" + ("<optimized out>#" + A.shortHash(this.bytes)) + ", scale: " + D.JSInt_methods.toStringAsFixed$1(1, 1) + ")";
    }
  };
  B.RenderAspectRatio.prototype = {
    set$aspectRatio(_, value) {
      if (this._aspectRatio === value)
        return;
      this._aspectRatio = value;
      this.markNeedsLayout$0();
    },
    computeMinIntrinsicWidth$1(height) {
      var t1, t2;
      A._asDouble(height);
      if (isFinite(height))
        return height * this._aspectRatio;
      t1 = this.RenderObjectWithChildMixin__child;
      if (t1 == null)
        t1 = null;
      else {
        t2 = type$.double;
        t2 = t1._computeIntrinsics$2$3(D._IntrinsicDimension_0, height, t1.get$computeMinIntrinsicWidth(), t2, t2);
        t1 = t2;
      }
      return t1 == null ? 0 : t1;
    },
    computeMaxIntrinsicWidth$1(height) {
      var t1, t2;
      A._asDouble(height);
      if (isFinite(height))
        return height * this._aspectRatio;
      t1 = this.RenderObjectWithChildMixin__child;
      if (t1 == null)
        t1 = null;
      else {
        t2 = type$.double;
        t2 = t1._computeIntrinsics$2$3(D._IntrinsicDimension_1, height, t1.get$computeMaxIntrinsicWidth(), t2, t2);
        t1 = t2;
      }
      return t1 == null ? 0 : t1;
    },
    computeMinIntrinsicHeight$1(width) {
      var t1, t2;
      A._asDouble(width);
      if (isFinite(width))
        return width / this._aspectRatio;
      t1 = this.RenderObjectWithChildMixin__child;
      if (t1 == null)
        t1 = null;
      else {
        t2 = type$.double;
        t2 = t1._computeIntrinsics$2$3(D._IntrinsicDimension_2, width, t1.get$computeMinIntrinsicHeight(), t2, t2);
        t1 = t2;
      }
      return t1 == null ? 0 : t1;
    },
    computeMaxIntrinsicHeight$1(width) {
      var t1, t2;
      A._asDouble(width);
      if (isFinite(width))
        return width / this._aspectRatio;
      t1 = this.RenderObjectWithChildMixin__child;
      if (t1 == null)
        t1 = null;
      else {
        t2 = type$.double;
        t2 = t1._computeIntrinsics$2$3(D._IntrinsicDimension_3, width, t1.get$computeMaxIntrinsicHeight(), t2, t2);
        t1 = t2;
      }
      return t1 == null ? 0 : t1;
    },
    _applyAspectRatio$1(constraints) {
      var t1, height, width1, height0,
        width = constraints.minWidth,
        width0 = constraints.maxWidth;
      if (width >= width0 && constraints.minHeight >= constraints.maxHeight)
        return new A.Size(A.clampDouble(0, width, width0), A.clampDouble(0, constraints.minHeight, constraints.maxHeight));
      t1 = this._aspectRatio;
      if (isFinite(width0)) {
        height = width0 / t1;
        width1 = width0;
      } else {
        height = constraints.maxHeight;
        width1 = height * t1;
      }
      if (width1 > width0)
        height = width0 / t1;
      else
        width0 = width1;
      height0 = constraints.maxHeight;
      if (height > height0) {
        width0 = height0 * t1;
        height = height0;
      }
      if (width0 < width)
        height = width / t1;
      else
        width = width0;
      height0 = constraints.minHeight;
      if (height < height0) {
        width = height0 * t1;
        height = height0;
      }
      return constraints.constrain$1(new A.Size(width, height));
    },
    computeDryLayout$1(constraints) {
      return this._applyAspectRatio$1(constraints);
    },
    computeDryBaseline$2(constraints, baseline) {
      var t1 = type$.BoxConstraints;
      t1._as(constraints);
      type$.TextBaseline._as(baseline);
      return this.super$RenderProxyBoxMixin$computeDryBaseline(E.BoxConstraints$tight(this._computeIntrinsics$2$3(D.C__DryLayout, constraints, this.get$_computeDryLayout(), t1, type$.Size)), baseline);
    },
    performLayout$0() {
      var _this = this,
        t1 = type$.BoxConstraints;
      _this._box$_size = _this._computeIntrinsics$2$3(D.C__DryLayout, t1._as(A.RenderObject.prototype.get$constraints.call(_this)), _this.get$_computeDryLayout(), t1, type$.Size);
      t1 = _this.RenderObjectWithChildMixin__child;
      if (t1 != null)
        t1.layout$1(E.BoxConstraints$tight(_this.get$size(0)));
    }
  };
  B.StreamBuilderBase.prototype = {
    createState$0() {
      return new B._StreamBuilderBaseState(this.$ti._eval$1("_StreamBuilderBaseState<StreamBuilderBase.T,StreamBuilderBase.S>"));
    }
  };
  B._StreamBuilderBaseState.prototype = {
    initState$0() {
      var t1, _this = this;
      _this.super$State$initState();
      t1 = _this._widget;
      t1.toString;
      t1 = F.AsyncSnapshot$nothing(t1.$ti._precomputed1);
      _this.set$___StreamBuilderBaseState__summary_A(_this.$ti._rest[1]._as(t1));
      _this._async0$_subscribe$0();
    },
    didUpdateWidget$1(oldWidget) {
      var t2, t3, _this = this,
        t1 = _this.$ti;
      t1._eval$1("StreamBuilderBase<1,2>")._as(oldWidget);
      _this.super$State$didUpdateWidget(oldWidget);
      if (!oldWidget.stream.$eq(0, _this._widget.stream)) {
        if (_this._async0$_subscription != null) {
          _this._async0$_unsubscribe$0();
          t2 = _this._widget;
          t2.toString;
          t3 = _this.___StreamBuilderBaseState__summary_A;
          t3 === $ && A.throwLateFieldNI("_summary");
          t2.$ti._eval$1("AsyncSnapshot<1>")._as(t3);
          _this.set$___StreamBuilderBaseState__summary_A(t1._rest[1]._as(new F.AsyncSnapshot(K.ConnectionState_0, t3.data, t3.error, t3.stackTrace, t3.$ti)));
        }
        _this._async0$_subscribe$0();
      }
    },
    build$1(context) {
      var t2,
        t1 = this._widget;
      t1.toString;
      t2 = this.___StreamBuilderBaseState__summary_A;
      t2 === $ && A.throwLateFieldNI("_summary");
      return t1.builder.call$2(context, t1.$ti._eval$1("AsyncSnapshot<1>")._as(t2));
    },
    dispose$0() {
      this._async0$_unsubscribe$0();
      this.super$State$dispose();
    },
    _async0$_subscribe$0() {
      var t1, t2, _this = this;
      _this.set$_async0$_subscription(_this._widget.stream.listen$3$onDone$onError(new B._StreamBuilderBaseState__subscribe_closure(_this), new B._StreamBuilderBaseState__subscribe_closure0(_this), new B._StreamBuilderBaseState__subscribe_closure1(_this)));
      t1 = _this._widget;
      t1.toString;
      t2 = _this.___StreamBuilderBaseState__summary_A;
      t2 === $ && A.throwLateFieldNI("_summary");
      t1.$ti._eval$1("AsyncSnapshot<1>")._as(t2);
      _this.set$___StreamBuilderBaseState__summary_A(_this.$ti._rest[1]._as(new F.AsyncSnapshot(K.ConnectionState_1, t2.data, t2.error, t2.stackTrace, t2.$ti)));
    },
    _async0$_unsubscribe$0() {
      var t1 = this._async0$_subscription;
      if (t1 != null) {
        t1.cancel$0(0);
        this.set$_async0$_subscription(null);
      }
    },
    set$_async0$_subscription(_subscription) {
      this._async0$_subscription = this.$ti._eval$1("StreamSubscription<1>?")._as(_subscription);
    },
    set$___StreamBuilderBaseState__summary_A(___StreamBuilderBaseState__summary_A) {
      this.___StreamBuilderBaseState__summary_A = this.$ti._rest[1]._as(___StreamBuilderBaseState__summary_A);
    }
  };
  B.StreamBuilder.prototype = {};
  B.AspectRatio.prototype = {
    createRenderObject$1(context) {
      var t1 = new B.RenderAspectRatio(this.aspectRatio, null, new A._LayoutCacheStorage(), A.LayerHandle$(type$.ContainerLayer));
      t1.RenderObject$0();
      t1.set$child(null);
      return t1;
    },
    updateRenderObject$2(context, renderObject) {
      type$.RenderAspectRatio._as(renderObject).set$aspectRatio(0, this.aspectRatio);
    }
  };
  B.FlyerChatImageMessage.prototype = {
    createState$0() {
      return new B._FlyerChatImageMessageState(null, null);
    }
  };
  B._FlyerChatImageMessageState.prototype = {
    initState$0() {
      var t1, height, width, t2, t3, t4, thumbhashBytes, image, t5, t6, t7, t8, t9, _this = this, _null = null;
      _this.super$State$initState();
      t1 = _this._widget.message;
      height = t1.height;
      width = t1.width;
      t2 = height == null;
      if (!t2 && width != null && height > 0 && width > 0) {
        if (typeof width !== "number")
          return width.$div();
        if (typeof height !== "number")
          return A.iae(height);
        _this.___FlyerChatImageMessageState__aspectRatio_A = width / height;
      } else {
        t3 = t1.thumbhash;
        t4 = t3 == null ? _null : t3.length !== 0;
        if (t4 === true) {
          t3.toString;
          thumbhashBytes = D.C_Base64Decoder.convert$1(D.C_Base64Codec.normalize$1(0, t3));
          _this.___FlyerChatImageMessageState__aspectRatio_A = B.thumbHashToApproximateAspectRatio(thumbhashBytes);
          _this.set$_placeholderProvider(new B.MemoryImage(B.rgbaToBmp(B.thumbHashToRGBA(thumbhashBytes))));
        } else {
          t1 = t1.blurhash;
          t3 = t1 == null ? _null : t1.length !== 0;
          if (t3 === true) {
            _this.___FlyerChatImageMessageState__aspectRatio_A = 1;
            t1.toString;
            image = new B.Image0();
            image.Image$fromBytes$19$backgroundColor$bytes$bytesOffset$exif$format$frameDuration$frameIndex$frameType$height$iccp$loopCount$numChannels$order$palette$paletteFormat$rowStride$textData$width$withPalette(_null, D.NativeUint8List_methods.get$buffer(B._transform0(35, 20, B.BlurHash_BlurHash$decode(t1).components)), 0, _null, C.Format_3, 0, 0, C.FrameType_2, 20, _null, 0, 4, _null, _null, C.Format_3, _null, _null, 35, false);
            t1 = new Uint8Array(64);
            t3 = new Uint8Array(64);
            t4 = new Float32Array(64);
            t5 = new Float32Array(64);
            t6 = A.List_List$filled(65535, _null, false, type$.nullable_List_int);
            t7 = type$.nullable_int;
            t8 = A.List_List$filled(65535, _null, false, t7);
            t9 = A.List_List$filled(64, _null, false, t7);
            t7 = A.List_List$filled(64, _null, false, t7);
            t1 = new B.JpegEncoder(t1, t3, t4, t5, t6, t8, t9, t7, new Int32Array(2048));
            t1.set$_ydcHuffman(t1._computeHuffmanTable$2(C.List_zcj, C.List_74c));
            t1.set$_uvdcHuffman(t1._computeHuffmanTable$2(C.List_NZS, C.List_74c));
            t3 = type$.List_nullable_List_int;
            t1.set$__JpegEncoder__yacHuffman_A(t3._as(t1._computeHuffmanTable$2(C.List_2BR, C.List_CZS)));
            t1.set$__JpegEncoder__uvacHuffman_A(t3._as(t1._computeHuffmanTable$2(C.List_GUW, C.List_X1N)));
            t1._initCategoryNumber$0();
            t1._initRgbYuvTable$0();
            t1.setQuality$1(100);
            _this.set$_placeholderProvider(new B.MemoryImage(t1.encode$2$chroma(image, C.JpegChroma_0)));
          } else
            _this.___FlyerChatImageMessageState__aspectRatio_A = 1;
        }
      }
      t1 = _this._framework$_element;
      t1.toString;
      t3 = type$.ChatController;
      t3 = t3._as(I.Provider_of(t1, false, t3));
      _this.___FlyerChatImageMessageState__chatController_F !== $ && A.throwLateFieldAI("_chatController");
      _this.___FlyerChatImageMessageState__chatController_F = t3;
      _this.set$___FlyerChatImageMessageState__imageProvider_A(type$.ImageProvider_Object._as(_this.get$_targetProvider()));
      if (width == null || t2) {
        t1 = _this.___FlyerChatImageMessageState__imageProvider_A;
        t1 === $ && A.throwLateFieldNI("_imageProvider");
        B.getImageDimensions(t1).then$1$1(0, new B._FlyerChatImageMessageState_initState_closure(_this), type$.Null);
      }
    },
    didUpdateWidget$1(oldWidget) {
      var t1, newImage, _this = this;
      type$.FlyerChatImageMessage._as(oldWidget);
      _this.super$State$didUpdateWidget(oldWidget);
      t1 = _this._widget.message;
      if (oldWidget.message.source !== t1.source) {
        newImage = _this.get$_targetProvider();
        t1 = _this._framework$_element;
        t1.toString;
        B.precacheImage(newImage, t1).then$1$1(0, new B._FlyerChatImageMessageState_didUpdateWidget_closure(_this, newImage), type$.Null);
      }
    },
    dispose$0() {
      var t1 = this._placeholderProvider;
      if (t1 != null)
        t1.evict$0();
      this.super$__FlyerChatImageMessageState_State_TickerProviderStateMixin$dispose();
    },
    build$1(context) {
      var t2, t3, t4, timeAndStatus, _this = this, _null = null,
        theme = N.SelectContext_select(context, new B._FlyerChatImageMessageState_build_closure(), type$.ChatTheme, type$.Record_4_TextStyle_labelSmall_and_Color_onSurface_and_BorderRadiusGeometry_shape_and_Color_surfaceContainerLow),
        isSentByMe = J.$eq$(I.Provider_of(context, false, type$.String), _this._widget.message.authorId),
        textDirection = context.dependOnInheritedWidgetOfExactType$1$0(type$.Directionality).textDirection,
        t1 = _this._widget;
      t1 = t1.message.get$resolvedTime();
      t2 = _this._widget.message.get$resolvedStatus();
      _this._widget.toString;
      t3 = G.Color_vnR.withValues$1$alpha(0.6);
      _this._widget.toString;
      t4 = theme._values[0].copyWith$1$color(G.Color_wst);
      timeAndStatus = new B.TimeAndStatus0(t1, t2, true, isSentByMe, t3, t4, _null);
      _this._widget.toString;
      t1 = theme._values[2];
      t2 = _this.___FlyerChatImageMessageState__aspectRatio_A;
      t2 === $ && A.throwLateFieldNI("_aspectRatio");
      t3 = _this._buildStack$4(_null, theme, textDirection, timeAndStatus);
      return T.ClipRRect$(t1, E.Container$(_null, new B.AspectRatio(t2, t3, _null), D.Clip_0, _null, C.BoxConstraints_yse, _null, _null, _null, _null, _null, _null, _null, _null, _null));
    },
    _buildStack$4(constraints, theme, textDirection, timeAndStatus) {
      var t2, _this = this, _null = null,
        t1 = _this._placeholderProvider;
      if (t1 != null)
        t1 = O.Image$(_null, P.BoxFit_0, _null, _null, t1, _null, _null, _null);
      else {
        _this._widget.toString;
        t1 = theme._values[3];
        t1 = E.Container$(_null, _null, D.Clip_0, t1, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null);
      }
      t2 = _this.___FlyerChatImageMessageState__imageProvider_A;
      t2 === $ && A.throwLateFieldNI("_imageProvider");
      _this._widget.toString;
      t2 = A._setArrayType([t1, O.Image$(_null, P.BoxFit_0, new B._FlyerChatImageMessageState__buildStack_closure(_this), _null, t2, new B._FlyerChatImageMessageState__buildStack_closure0(_this, theme), _null, _null)], type$.JSArray_Widget);
      t1 = _this.___FlyerChatImageMessageState__chatController_F;
      t1 === $ && A.throwLateFieldNI("_chatController");
      t2.push(new B.StreamBuilder(new B._FlyerChatImageMessageState__buildStack_closure1(_this, theme), t1.getUploadProgress$1(_this._widget.message.id), _null, type$.StreamBuilder_double));
      _this._widget.toString;
      if (timeAndStatus != null)
        t2.push(X.Positioned_Positioned$directional(8, timeAndStatus, 8, _null, _null, textDirection, _null, _null));
      return new E.Stack(G.AlignmentDirectional_m1_m1, _null, G.StackFit_1, D.Clip_1, t2, _null);
    },
    get$_targetProvider() {
      var t1 = this._widget.customImageProvider;
      return t1;
    },
    set$___FlyerChatImageMessageState__imageProvider_A(___FlyerChatImageMessageState__imageProvider_A) {
      this.___FlyerChatImageMessageState__imageProvider_A = type$.ImageProvider_Object._as(___FlyerChatImageMessageState__imageProvider_A);
    },
    set$_placeholderProvider(_placeholderProvider) {
      this._placeholderProvider = type$.nullable_ImageProvider_Object._as(_placeholderProvider);
    },
    $isTickerProvider: 1
  };
  B.TimeAndStatus0.prototype = {
    build$1(context) {
      var t4, _this = this, _null = null,
        timeFormat = I.Provider_of(context, true, type$.DateFormat),
        t1 = E.BorderRadius$circular(12),
        t2 = A._setArrayType([], type$.JSArray_Widget),
        t3 = _this.time;
      if (t3 != null)
        t2.push(R.Text$(timeFormat.format$1(t3.toLocal$0()), _null, _null, _null, _null, _null, _null, _null, _this.textStyle, _null, _null, _null, _null, _null));
      if (_this.showStatus && _this.status != null) {
        t3 = _this.status;
        t4 = _this.textStyle;
        if (t3 === W.MessageStatus_3)
          t2.push(new E.SizedBox(6, 6, M.CircularProgressIndicator$(_null, t4.color, _null, _null, _null, _null, _null, 2, _null, _null), _null));
        else {
          t3.toString;
          t3 = N.getIconForStatus(t3);
          t2.push(E.Icon$(t3, t4.color, _null, 12));
        }
      }
      return E.Container$(_null, V.Row$(t2, H.CrossAxisAlignment_2, _null, H.MainAxisAlignment_0, H.MainAxisSize_0, 2, _null, _null, H.VerticalDirection_1), D.Clip_0, _null, _null, new E.BoxDecoration(_this.backgroundColor, _null, _null, t1, _null, _null, _null, G.BoxShape_0), _null, _null, _null, _null, Q.EdgeInsets_8_4_8_4, _null, _null, _null);
    }
  };
  B.__FlyerChatImageMessageState_State_TickerProviderStateMixin.prototype = {
    activate$0() {
      this.super$State$activate();
      this._updateTickerModeNotifier$0();
      this._updateTickers$0();
    },
    dispose$0() {
      var _this = this,
        t1 = _this.TickerProviderStateMixin__tickerModeNotifier;
      if (t1 != null)
        t1.removeListener$1(0, _this.get$_updateTickers());
      _this.set$_tickerModeNotifier(null);
      _this.super$State$dispose();
    }
  };
  B.ChannelIterator.prototype = {
    moveNext$0() {
      var t1 = this.color;
      return ++this.index < t1.get$length(t1);
    },
    get$current(_) {
      return this.color.$index(0, this.index);
    },
    $isIterator: 1
  };
  B.ChannelOrder.prototype = {
    _enumToString$0() {
      return "ChannelOrder." + this._name;
    }
  };
  B.ColorFloat16.prototype = {
    clone$0(_) {
      return new B.ColorFloat16(new Uint16Array(A._ensureNativeList(this.data)));
    },
    get$format() {
      return C.Format_9;
    },
    get$length(_) {
      return this.data.length;
    },
    get$palette() {
      return null;
    },
    $index(_, index) {
      var t1, t2;
      A._asInt(index);
      t1 = this.data;
      t2 = t1.length;
      if (index < t2) {
        if (!(index >= 0))
          return A.ioore(t1, index);
        t1 = t1[index];
        t2 = $.Float16__toFloatFloat32Data;
        t2 = t2 != null ? t2 : B.Float16__initialize();
        if (!(t1 < t2.length))
          return A.ioore(t2, t1);
        t1 = t2[t1];
      } else
        t1 = 0;
      return t1;
    },
    $indexSet(_, index, value) {
      var t1, t2, t3;
      A._asInt(index);
      A._asNum(value);
      t1 = this.data;
      t2 = t1.length;
      if (index < t2) {
        t3 = B.Float16_doubleToFloat16(value);
        t1.$flags & 2 && A.throwUnsupportedOperation(t1);
        if (!(index >= 0))
          return A.ioore(t1, index);
        t1[index] = t3;
      }
    },
    get$r(_) {
      var t2,
        t1 = this.data;
      if (!D.NativeUint16List_methods.get$isEmpty(t1)) {
        if (0 >= t1.length)
          return A.ioore(t1, 0);
        t1 = t1[0];
        t2 = $.Float16__toFloatFloat32Data;
        t2 = t2 != null ? t2 : B.Float16__initialize();
        if (!(t1 < t2.length))
          return A.ioore(t2, t1);
        t1 = t2[t1];
      } else
        t1 = 0;
      return t1;
    },
    set$r(_, v) {
      var t2,
        t1 = this.data;
      if (!D.NativeUint16List_methods.get$isEmpty(t1)) {
        t2 = B.Float16_doubleToFloat16(v);
        t1.$flags & 2 && A.throwUnsupportedOperation(t1);
        if (0 >= t1.length)
          return A.ioore(t1, 0);
        t1[0] = t2;
      }
    },
    get$g() {
      var t2,
        t1 = this.data;
      if (t1.length > 1) {
        t1 = t1[1];
        t2 = $.Float16__toFloatFloat32Data;
        t2 = t2 != null ? t2 : B.Float16__initialize();
        if (!(t1 < t2.length))
          return A.ioore(t2, t1);
        t1 = t2[t1];
      } else
        t1 = 0;
      return t1;
    },
    set$g(v) {
      var t2,
        t1 = this.data;
      if (t1.length > 1) {
        t2 = B.Float16_doubleToFloat16(v);
        t1.$flags & 2 && A.throwUnsupportedOperation(t1);
        t1[1] = t2;
      }
    },
    get$b(_) {
      var t2,
        t1 = this.data;
      if (t1.length > 2) {
        t1 = t1[2];
        t2 = $.Float16__toFloatFloat32Data;
        t2 = t2 != null ? t2 : B.Float16__initialize();
        if (!(t1 < t2.length))
          return A.ioore(t2, t1);
        t1 = t2[t1];
      } else
        t1 = 0;
      return t1;
    },
    set$b(_, v) {
      var t2,
        t1 = this.data;
      if (t1.length > 2) {
        t2 = B.Float16_doubleToFloat16(v);
        t1.$flags & 2 && A.throwUnsupportedOperation(t1);
        t1[2] = t2;
      }
    },
    get$aNormalized() {
      var t2,
        t1 = this.data;
      if (t1.length > 3) {
        t1 = t1[3];
        t2 = $.Float16__toFloatFloat32Data;
        t2 = t2 != null ? t2 : B.Float16__initialize();
        if (!(t1 < t2.length))
          return A.ioore(t2, t1);
        t1 = t2[t1];
      } else
        t1 = 0;
      return t1 / 1;
    },
    get$luminance() {
      return B.getLuminance(this);
    },
    get$iterator(_) {
      return new B.ChannelIterator(this);
    },
    $eq(_, other) {
      if (other == null)
        return false;
      return type$.Color._is(other) && other.get$length(other) === this.data.length && other.get$hashCode(other) === A.Object_hashAll(A.List_List$of(this, true, A._instanceType(this)._eval$1("Iterable.E")));
    },
    get$hashCode(_) {
      return A.Object_hashAll(A.List_List$of(this, true, A._instanceType(this)._eval$1("Iterable.E")));
    },
    $isColor1: 1
  };
  B.ColorFloat32.prototype = {
    clone$0(_) {
      return new B.ColorFloat32(new Float32Array(A._ensureNativeList(this.data)));
    },
    get$format() {
      return C.Format_10;
    },
    get$length(_) {
      return this.data.length;
    },
    get$palette() {
      return null;
    },
    $index(_, index) {
      var t1, t2;
      A._asInt(index);
      t1 = this.data;
      t2 = t1.length;
      if (index < t2) {
        if (!(index >= 0))
          return A.ioore(t1, index);
        t1 = t1[index];
      } else
        t1 = 0;
      return t1;
    },
    $indexSet(_, index, value) {
      var t1, t2;
      A._asInt(index);
      A._asNum(value);
      t1 = this.data;
      t2 = t1.length;
      if (index < t2) {
        t1.$flags & 2 && A.throwUnsupportedOperation(t1);
        if (!(index >= 0))
          return A.ioore(t1, index);
        t1[index] = value;
      }
    },
    get$r(_) {
      var t1 = this.data;
      if (!D.NativeFloat32List_methods.get$isEmpty(t1)) {
        if (0 >= t1.length)
          return A.ioore(t1, 0);
        t1 = t1[0];
      } else
        t1 = 0;
      return t1;
    },
    set$r(_, r) {
      var t1 = this.data;
      if (!D.NativeFloat32List_methods.get$isEmpty(t1)) {
        t1.$flags & 2 && A.throwUnsupportedOperation(t1);
        if (0 >= t1.length)
          return A.ioore(t1, 0);
        t1[0] = r;
      }
    },
    get$g() {
      var t1 = this.data;
      return t1.length > 1 ? t1[1] : 0;
    },
    set$g(g) {
      var t1 = this.data;
      if (t1.length > 1) {
        t1.$flags & 2 && A.throwUnsupportedOperation(t1);
        t1[1] = g;
      }
    },
    get$b(_) {
      var t1 = this.data;
      return t1.length > 2 ? t1[2] : 0;
    },
    set$b(_, b) {
      var t1 = this.data;
      if (t1.length > 2) {
        t1.$flags & 2 && A.throwUnsupportedOperation(t1);
        t1[2] = b;
      }
    },
    get$aNormalized() {
      var t1 = this.data;
      return (t1.length > 3 ? t1[3] : 1) / 1;
    },
    get$luminance() {
      return B.getLuminance(this);
    },
    get$iterator(_) {
      return new B.ChannelIterator(this);
    },
    $eq(_, other) {
      if (other == null)
        return false;
      return type$.Color._is(other) && other.get$length(other) === this.data.length && other.get$hashCode(other) === A.Object_hashAll(A.List_List$of(this, true, A._instanceType(this)._eval$1("Iterable.E")));
    },
    get$hashCode(_) {
      return A.Object_hashAll(A.List_List$of(this, true, A._instanceType(this)._eval$1("Iterable.E")));
    },
    $isColor1: 1
  };
  B.ColorFloat64.prototype = {
    clone$0(_) {
      return new B.ColorFloat64(new Float64Array(A._ensureNativeList(this.data)));
    },
    get$format() {
      return C.Format_11;
    },
    get$length(_) {
      return this.data.length;
    },
    get$palette() {
      return null;
    },
    $index(_, index) {
      var t1, t2;
      A._asInt(index);
      t1 = this.data;
      t2 = t1.length;
      if (index < t2) {
        if (!(index >= 0))
          return A.ioore(t1, index);
        t1 = t1[index];
      } else
        t1 = 0;
      return t1;
    },
    $indexSet(_, index, value) {
      var t1, t2;
      A._asInt(index);
      A._asNum(value);
      t1 = this.data;
      t2 = t1.length;
      if (index < t2) {
        t1.$flags & 2 && A.throwUnsupportedOperation(t1);
        if (!(index >= 0))
          return A.ioore(t1, index);
        t1[index] = value;
      }
    },
    get$r(_) {
      var t1 = this.data;
      if (!D.NativeFloat64List_methods.get$isEmpty(t1)) {
        if (0 >= t1.length)
          return A.ioore(t1, 0);
        t1 = t1[0];
      } else
        t1 = 0;
      return t1;
    },
    set$r(_, r) {
      var t1 = this.data;
      if (!D.NativeFloat64List_methods.get$isEmpty(t1)) {
        t1.$flags & 2 && A.throwUnsupportedOperation(t1);
        if (0 >= t1.length)
          return A.ioore(t1, 0);
        t1[0] = r;
      }
    },
    get$g() {
      var t1 = this.data;
      return t1.length > 1 ? t1[1] : 0;
    },
    set$g(g) {
      var t1 = this.data;
      if (t1.length > 1) {
        t1.$flags & 2 && A.throwUnsupportedOperation(t1);
        t1[1] = g;
      }
    },
    get$b(_) {
      var t1 = this.data;
      return t1.length > 2 ? t1[2] : 0;
    },
    set$b(_, b) {
      var t1 = this.data;
      if (t1.length > 2) {
        t1.$flags & 2 && A.throwUnsupportedOperation(t1);
        t1[2] = b;
      }
    },
    get$aNormalized() {
      var t1 = this.data;
      return (t1.length > 3 ? t1[3] : 1) / 1;
    },
    get$luminance() {
      return B.getLuminance(this);
    },
    get$iterator(_) {
      return new B.ChannelIterator(this);
    },
    $eq(_, other) {
      if (other == null)
        return false;
      return type$.Color._is(other) && other.get$length(other) === this.data.length && other.get$hashCode(other) === A.Object_hashAll(A.List_List$of(this, true, A._instanceType(this)._eval$1("Iterable.E")));
    },
    get$hashCode(_) {
      return A.Object_hashAll(A.List_List$of(this, true, A._instanceType(this)._eval$1("Iterable.E")));
    },
    $isColor1: 1
  };
  B.ColorInt16.prototype = {
    clone$0(_) {
      return new B.ColorInt16(new Int16Array(A._ensureNativeList(this.data)));
    },
    get$format() {
      return C.Format_7;
    },
    get$length(_) {
      return this.data.length;
    },
    get$palette() {
      return null;
    },
    $index(_, index) {
      var t1, t2;
      A._asInt(index);
      t1 = this.data;
      t2 = t1.length;
      if (index < t2) {
        if (!(index >= 0))
          return A.ioore(t1, index);
        t1 = t1[index];
      } else
        t1 = 0;
      return t1;
    },
    $indexSet(_, index, value) {
      var t1, t2, t3;
      A._asInt(index);
      A._asNum(value);
      t1 = this.data;
      t2 = t1.length;
      if (index < t2) {
        t3 = D.JSNumber_methods.toInt$0(value);
        t1.$flags & 2 && A.throwUnsupportedOperation(t1);
        if (!(index >= 0))
          return A.ioore(t1, index);
        t1[index] = t3;
      }
    },
    get$r(_) {
      var t1 = this.data;
      if (!D.NativeInt16List_methods.get$isEmpty(t1)) {
        if (0 >= t1.length)
          return A.ioore(t1, 0);
        t1 = t1[0];
      } else
        t1 = 0;
      return t1;
    },
    set$r(_, r) {
      var t2,
        t1 = this.data;
      if (!D.NativeInt16List_methods.get$isEmpty(t1)) {
        t2 = D.JSInt_methods.toInt$0(r);
        t1.$flags & 2 && A.throwUnsupportedOperation(t1);
        if (0 >= t1.length)
          return A.ioore(t1, 0);
        t1[0] = t2;
      }
    },
    get$g() {
      var t1 = this.data;
      return t1.length > 1 ? t1[1] : 0;
    },
    set$g(g) {
      var t2,
        t1 = this.data;
      if (t1.length > 1) {
        t2 = D.JSInt_methods.toInt$0(g);
        t1.$flags & 2 && A.throwUnsupportedOperation(t1);
        t1[1] = t2;
      }
    },
    get$b(_) {
      var t1 = this.data;
      return t1.length > 2 ? t1[2] : 0;
    },
    set$b(_, b) {
      var t2,
        t1 = this.data;
      if (t1.length > 2) {
        t2 = D.JSInt_methods.toInt$0(b);
        t1.$flags & 2 && A.throwUnsupportedOperation(t1);
        t1[2] = t2;
      }
    },
    get$aNormalized() {
      var t1 = this.data;
      return (t1.length > 3 ? t1[3] : 0) / 32767;
    },
    get$luminance() {
      return B.getLuminance(this);
    },
    get$iterator(_) {
      return new B.ChannelIterator(this);
    },
    $eq(_, other) {
      if (other == null)
        return false;
      return type$.Color._is(other) && other.get$length(other) === this.data.length && other.get$hashCode(other) === A.Object_hashAll(A.List_List$of(this, true, A._instanceType(this)._eval$1("Iterable.E")));
    },
    get$hashCode(_) {
      return A.Object_hashAll(A.List_List$of(this, true, A._instanceType(this)._eval$1("Iterable.E")));
    },
    $isColor1: 1
  };
  B.ColorInt32.prototype = {
    clone$0(_) {
      return new B.ColorInt32(new Int32Array(A._ensureNativeList(this.data)));
    },
    get$format() {
      return C.Format_8;
    },
    get$length(_) {
      return this.data.length;
    },
    get$palette() {
      return null;
    },
    $index(_, index) {
      var t1, t2;
      A._asInt(index);
      t1 = this.data;
      t2 = t1.length;
      if (index < t2) {
        if (!(index >= 0))
          return A.ioore(t1, index);
        t1 = t1[index];
      } else
        t1 = 0;
      return t1;
    },
    $indexSet(_, index, value) {
      var t1, t2, t3;
      A._asInt(index);
      A._asNum(value);
      t1 = this.data;
      t2 = t1.length;
      if (index < t2) {
        t3 = D.JSNumber_methods.toInt$0(value);
        t1.$flags & 2 && A.throwUnsupportedOperation(t1);
        if (!(index >= 0))
          return A.ioore(t1, index);
        t1[index] = t3;
      }
    },
    get$r(_) {
      var t1 = this.data;
      if (!D.NativeInt32List_methods.get$isEmpty(t1)) {
        if (0 >= t1.length)
          return A.ioore(t1, 0);
        t1 = t1[0];
      } else
        t1 = 0;
      return t1;
    },
    set$r(_, r) {
      var t1 = this.data;
      if (!D.NativeInt32List_methods.get$isEmpty(t1)) {
        t1.$flags & 2 && A.throwUnsupportedOperation(t1);
        if (0 >= t1.length)
          return A.ioore(t1, 0);
        t1[0] = r;
      }
    },
    get$g() {
      var t1 = this.data;
      return t1.length > 1 ? t1[1] : 0;
    },
    set$g(g) {
      var t2,
        t1 = this.data;
      if (t1.length > 1) {
        t2 = D.JSInt_methods.toInt$0(g);
        t1.$flags & 2 && A.throwUnsupportedOperation(t1);
        t1[1] = t2;
      }
    },
    get$b(_) {
      var t1 = this.data;
      return t1.length > 2 ? t1[2] : 0;
    },
    set$b(_, b) {
      var t2,
        t1 = this.data;
      if (t1.length > 2) {
        t2 = D.JSInt_methods.toInt$0(b);
        t1.$flags & 2 && A.throwUnsupportedOperation(t1);
        t1[2] = t2;
      }
    },
    get$aNormalized() {
      var t1 = this.data;
      return (t1.length > 3 ? t1[3] : 0) / 2147483647;
    },
    get$luminance() {
      return B.getLuminance(this);
    },
    get$iterator(_) {
      return new B.ChannelIterator(this);
    },
    $eq(_, other) {
      if (other == null)
        return false;
      return type$.Color._is(other) && other.get$length(other) === this.data.length && other.get$hashCode(other) === A.Object_hashAll(A.List_List$of(this, true, A._instanceType(this)._eval$1("Iterable.E")));
    },
    get$hashCode(_) {
      return A.Object_hashAll(A.List_List$of(this, true, A._instanceType(this)._eval$1("Iterable.E")));
    },
    $isColor1: 1
  };
  B.ColorInt8.prototype = {
    clone$0(_) {
      return new B.ColorInt8(new Int8Array(A._ensureNativeList(this.data)));
    },
    get$format() {
      return C.Format_6;
    },
    get$length(_) {
      return this.data.length;
    },
    get$palette() {
      return null;
    },
    $index(_, index) {
      var t1, t2;
      A._asInt(index);
      t1 = this.data;
      t2 = t1.length;
      if (index < t2) {
        if (!(index >= 0))
          return A.ioore(t1, index);
        t1 = t1[index];
      } else
        t1 = 0;
      return t1;
    },
    $indexSet(_, index, value) {
      var t1, t2, t3;
      A._asInt(index);
      A._asNum(value);
      t1 = this.data;
      t2 = t1.length;
      if (index < t2) {
        t3 = D.JSNumber_methods.toInt$0(value);
        t1.$flags & 2 && A.throwUnsupportedOperation(t1);
        if (!(index >= 0))
          return A.ioore(t1, index);
        t1[index] = t3;
      }
    },
    get$r(_) {
      var t1 = this.data;
      if (!D.NativeInt8List_methods.get$isEmpty(t1)) {
        if (0 >= t1.length)
          return A.ioore(t1, 0);
        t1 = t1[0];
      } else
        t1 = 0;
      return t1;
    },
    set$r(_, r) {
      var t2,
        t1 = this.data;
      if (!D.NativeInt8List_methods.get$isEmpty(t1)) {
        t2 = D.JSInt_methods.toInt$0(r);
        t1.$flags & 2 && A.throwUnsupportedOperation(t1);
        if (0 >= t1.length)
          return A.ioore(t1, 0);
        t1[0] = t2;
      }
    },
    get$g() {
      var t1 = this.data;
      return t1.length > 1 ? t1[1] : 0;
    },
    set$g(g) {
      var t2,
        t1 = this.data;
      if (t1.length > 1) {
        t2 = D.JSInt_methods.toInt$0(g);
        t1.$flags & 2 && A.throwUnsupportedOperation(t1);
        t1[1] = t2;
      }
    },
    get$b(_) {
      var t1 = this.data;
      return t1.length > 2 ? t1[2] : 0;
    },
    set$b(_, b) {
      var t2,
        t1 = this.data;
      if (t1.length > 2) {
        t2 = D.JSInt_methods.toInt$0(b);
        t1.$flags & 2 && A.throwUnsupportedOperation(t1);
        t1[2] = t2;
      }
    },
    get$aNormalized() {
      var t1 = this.data;
      return (t1.length > 3 ? t1[3] : 0) / 127;
    },
    get$luminance() {
      return B.getLuminance(this);
    },
    get$iterator(_) {
      return new B.ChannelIterator(this);
    },
    $eq(_, other) {
      if (other == null)
        return false;
      return type$.Color._is(other) && other.get$length(other) === this.data.length && other.get$hashCode(other) === A.Object_hashAll(A.List_List$of(this, true, A._instanceType(this)._eval$1("Iterable.E")));
    },
    get$hashCode(_) {
      return A.Object_hashAll(A.List_List$of(this, true, A._instanceType(this)._eval$1("Iterable.E")));
    },
    $isColor1: 1
  };
  B.ColorUint1.prototype = {
    clone$0(_) {
      var t1 = this.__ColorUint1_data_A;
      t1 === $ && A.throwLateFieldNI("data");
      return new B.ColorUint1(this.length, t1);
    },
    get$format() {
      return C.Format_0;
    },
    get$palette() {
      return null;
    },
    _color_uint1$_getChannel$1(ci) {
      var t1;
      if (ci < this.length) {
        t1 = this.__ColorUint1_data_A;
        t1 === $ && A.throwLateFieldNI("data");
        t1 = D.JSInt_methods._shrReceiverPositive$1(t1, 7 - ci) & 1;
      } else
        t1 = 0;
      return t1;
    },
    _color_uint1$_setChannel$2(ci, value) {
      var t1;
      if (ci >= this.length)
        return;
      ci = 7 - ci;
      t1 = this.__ColorUint1_data_A;
      t1 === $ && A.throwLateFieldNI("data");
      this.__ColorUint1_data_A = value !== 0 ? (t1 | D.JSInt_methods.$shl(1, ci)) >>> 0 : (t1 & ~(D.JSInt_methods.$shl(1, ci) & 255)) >>> 0;
    },
    $index(_, index) {
      return this._color_uint1$_getChannel$1(A._asInt(index));
    },
    $indexSet(_, index, value) {
      return this._color_uint1$_setChannel$2(A._asInt(index), A._asNum(value));
    },
    get$r(_) {
      return this._color_uint1$_getChannel$1(0);
    },
    set$r(_, v) {
      this._color_uint1$_setChannel$2(0, v);
    },
    get$g() {
      return this._color_uint1$_getChannel$1(1);
    },
    set$g(v) {
      this._color_uint1$_setChannel$2(1, v);
    },
    get$b(_) {
      return this._color_uint1$_getChannel$1(2);
    },
    set$b(_, v) {
      this._color_uint1$_setChannel$2(2, v);
    },
    get$aNormalized() {
      return this._color_uint1$_getChannel$1(3) / 1;
    },
    get$luminance() {
      return B.getLuminance(this);
    },
    get$iterator(_) {
      return new B.ChannelIterator(this);
    },
    $eq(_, other) {
      if (other == null)
        return false;
      return type$.Color._is(other) && other.get$length(other) === this.length && other.get$hashCode(other) === A.Object_hashAll(A.List_List$of(this, true, A._instanceType(this)._eval$1("Iterable.E")));
    },
    get$hashCode(_) {
      return A.Object_hashAll(A.List_List$of(this, true, A._instanceType(this)._eval$1("Iterable.E")));
    },
    $isColor1: 1,
    get$length(receiver) {
      return this.length;
    }
  };
  B.ColorUint16.prototype = {
    clone$0(_) {
      return new B.ColorUint16(new Uint16Array(A._ensureNativeList(this.data)));
    },
    get$format() {
      return C.Format_4;
    },
    get$length(_) {
      return this.data.length;
    },
    get$palette() {
      return null;
    },
    $index(_, index) {
      var t1, t2;
      A._asInt(index);
      t1 = this.data;
      t2 = t1.length;
      if (index < t2) {
        if (!(index >= 0))
          return A.ioore(t1, index);
        t1 = t1[index];
      } else
        t1 = 0;
      return t1;
    },
    $indexSet(_, index, value) {
      var t1, t2, t3;
      A._asInt(index);
      A._asNum(value);
      t1 = this.data;
      t2 = t1.length;
      if (index < t2) {
        t3 = D.JSNumber_methods.toInt$0(value);
        t1.$flags & 2 && A.throwUnsupportedOperation(t1);
        if (!(index >= 0))
          return A.ioore(t1, index);
        t1[index] = t3;
      }
    },
    get$r(_) {
      var t1 = this.data;
      if (!D.NativeUint16List_methods.get$isEmpty(t1)) {
        if (0 >= t1.length)
          return A.ioore(t1, 0);
        t1 = t1[0];
      } else
        t1 = 0;
      return t1;
    },
    set$r(_, r) {
      var t2,
        t1 = this.data;
      if (!D.NativeUint16List_methods.get$isEmpty(t1)) {
        t2 = D.JSInt_methods.toInt$0(r);
        t1.$flags & 2 && A.throwUnsupportedOperation(t1);
        if (0 >= t1.length)
          return A.ioore(t1, 0);
        t1[0] = t2;
      }
    },
    get$g() {
      var t1 = this.data;
      return t1.length > 1 ? t1[1] : 0;
    },
    set$g(g) {
      var t2,
        t1 = this.data;
      if (t1.length > 1) {
        t2 = D.JSInt_methods.toInt$0(g);
        t1.$flags & 2 && A.throwUnsupportedOperation(t1);
        t1[1] = t2;
      }
    },
    get$b(_) {
      var t1 = this.data;
      return t1.length > 2 ? t1[2] : 0;
    },
    set$b(_, b) {
      var t2,
        t1 = this.data;
      if (t1.length > 2) {
        t2 = D.JSInt_methods.toInt$0(b);
        t1.$flags & 2 && A.throwUnsupportedOperation(t1);
        t1[2] = t2;
      }
    },
    get$aNormalized() {
      var t1 = this.data;
      return (t1.length > 3 ? t1[3] : 0) / 65535;
    },
    get$luminance() {
      return B.getLuminance(this);
    },
    get$iterator(_) {
      return new B.ChannelIterator(this);
    },
    $eq(_, other) {
      if (other == null)
        return false;
      return type$.Color._is(other) && other.get$length(other) === this.data.length && other.get$hashCode(other) === A.Object_hashAll(A.List_List$of(this, true, A._instanceType(this)._eval$1("Iterable.E")));
    },
    get$hashCode(_) {
      return A.Object_hashAll(A.List_List$of(this, true, A._instanceType(this)._eval$1("Iterable.E")));
    },
    $isColor1: 1
  };
  B.ColorUint2.prototype = {
    clone$0(_) {
      var t1 = this.__ColorUint2_data_A;
      t1 === $ && A.throwLateFieldNI("data");
      return new B.ColorUint2(this.length, t1);
    },
    get$format() {
      return C.Format_1;
    },
    get$palette() {
      return null;
    },
    _color_uint2$_getChannel$1(ci) {
      var t1;
      if (ci < this.length) {
        t1 = this.__ColorUint2_data_A;
        t1 === $ && A.throwLateFieldNI("data");
        t1 = D.JSInt_methods._shrReceiverPositive$1(t1, 6 - (ci << 1 >>> 0)) & 3;
      } else
        t1 = 0;
      return t1;
    },
    _color_uint2$_setChannel$2(ci, value) {
      var mask, t1, t2;
      if (ci >= this.length)
        return;
      if (!(ci >= 0 && ci < 4))
        return A.ioore(C.List_63_207_243_252, ci);
      mask = C.List_63_207_243_252[ci];
      t1 = D.JSNumber_methods.toInt$0(value);
      t2 = this.__ColorUint2_data_A;
      t2 === $ && A.throwLateFieldNI("data");
      this.__ColorUint2_data_A = (t2 & mask | D.JSInt_methods.$shl(t1 & 3, 6 - (ci << 1 >>> 0))) >>> 0;
    },
    $index(_, index) {
      return this._color_uint2$_getChannel$1(A._asInt(index));
    },
    $indexSet(_, index, value) {
      return this._color_uint2$_setChannel$2(A._asInt(index), A._asNum(value));
    },
    get$r(_) {
      return this._color_uint2$_getChannel$1(0);
    },
    set$r(_, v) {
      this._color_uint2$_setChannel$2(0, v);
    },
    get$g() {
      return this._color_uint2$_getChannel$1(1);
    },
    set$g(v) {
      this._color_uint2$_setChannel$2(1, v);
    },
    get$b(_) {
      return this._color_uint2$_getChannel$1(2);
    },
    set$b(_, v) {
      this._color_uint2$_setChannel$2(2, v);
    },
    get$aNormalized() {
      return this._color_uint2$_getChannel$1(3) / 3;
    },
    get$luminance() {
      return B.getLuminance(this);
    },
    get$iterator(_) {
      return new B.ChannelIterator(this);
    },
    $eq(_, other) {
      if (other == null)
        return false;
      return type$.Color._is(other) && other.get$length(other) === this.length && other.get$hashCode(other) === A.Object_hashAll(A.List_List$of(this, true, A._instanceType(this)._eval$1("Iterable.E")));
    },
    get$hashCode(_) {
      return A.Object_hashAll(A.List_List$of(this, true, A._instanceType(this)._eval$1("Iterable.E")));
    },
    $isColor1: 1,
    get$length(receiver) {
      return this.length;
    }
  };
  B.ColorUint32.prototype = {
    clone$0(_) {
      return new B.ColorUint32(new Uint32Array(A._ensureNativeList(this.data)));
    },
    get$format() {
      return C.Format_5;
    },
    get$length(_) {
      return this.data.length;
    },
    get$palette() {
      return null;
    },
    $index(_, index) {
      var t1, t2;
      A._asInt(index);
      t1 = this.data;
      t2 = t1.length;
      if (index < t2) {
        if (!(index >= 0))
          return A.ioore(t1, index);
        t1 = t1[index];
      } else
        t1 = 0;
      return t1;
    },
    $indexSet(_, index, value) {
      var t1, t2, t3;
      A._asInt(index);
      A._asNum(value);
      t1 = this.data;
      t2 = t1.length;
      if (index < t2) {
        t3 = D.JSNumber_methods.toInt$0(value);
        t1.$flags & 2 && A.throwUnsupportedOperation(t1);
        if (!(index >= 0))
          return A.ioore(t1, index);
        t1[index] = t3;
      }
    },
    get$r(_) {
      var t1 = this.data;
      if (!D.NativeUint32List_methods.get$isEmpty(t1)) {
        if (0 >= t1.length)
          return A.ioore(t1, 0);
        t1 = t1[0];
      } else
        t1 = 0;
      return t1;
    },
    set$r(_, r) {
      var t2,
        t1 = this.data;
      if (!D.NativeUint32List_methods.get$isEmpty(t1)) {
        t2 = D.JSInt_methods.toInt$0(r);
        t1.$flags & 2 && A.throwUnsupportedOperation(t1);
        if (0 >= t1.length)
          return A.ioore(t1, 0);
        t1[0] = t2;
      }
    },
    get$g() {
      var t1 = this.data;
      return t1.length > 1 ? t1[1] : 0;
    },
    set$g(g) {
      var t2,
        t1 = this.data;
      if (t1.length > 1) {
        t2 = D.JSInt_methods.toInt$0(g);
        t1.$flags & 2 && A.throwUnsupportedOperation(t1);
        t1[1] = t2;
      }
    },
    get$b(_) {
      var t1 = this.data;
      return t1.length > 2 ? t1[2] : 0;
    },
    set$b(_, b) {
      var t2,
        t1 = this.data;
      if (t1.length > 2) {
        t2 = D.JSInt_methods.toInt$0(b);
        t1.$flags & 2 && A.throwUnsupportedOperation(t1);
        t1[2] = t2;
      }
    },
    get$aNormalized() {
      var t1 = this.data;
      return (t1.length > 3 ? t1[3] : 0) / 4294967295;
    },
    get$luminance() {
      return B.getLuminance(this);
    },
    get$iterator(_) {
      return new B.ChannelIterator(this);
    },
    $eq(_, other) {
      if (other == null)
        return false;
      return type$.Color._is(other) && other.get$length(other) === this.data.length && other.get$hashCode(other) === A.Object_hashAll(A.List_List$of(this, true, A._instanceType(this)._eval$1("Iterable.E")));
    },
    get$hashCode(_) {
      return A.Object_hashAll(A.List_List$of(this, true, A._instanceType(this)._eval$1("Iterable.E")));
    },
    $isColor1: 1
  };
  B.ColorUint4.prototype = {
    clone$0(_) {
      return new B.ColorUint4(this.length, new Uint8Array(A._ensureNativeList(this.data)));
    },
    get$format() {
      return C.Format_2;
    },
    get$palette() {
      return null;
    },
    _getChannel$1(ci) {
      var t1, t2;
      if (ci < 0 || ci >= this.length)
        t1 = 0;
      else {
        t1 = this.data;
        t2 = t1.length;
        if (ci < 2) {
          if (0 >= t2)
            return A.ioore(t1, 0);
          t1 = D.JSInt_methods._shrReceiverPositive$1(t1[0], 4 - (ci << 2 >>> 0)) & 15;
        } else {
          if (1 >= t2)
            return A.ioore(t1, 1);
          t1 = D.JSInt_methods._shrReceiverPositive$1(t1[1], 4 - ((ci & 1) << 2)) & 15;
        }
      }
      return t1;
    },
    _setChannel$2(ci, value) {
      var vi, i, t1, t2;
      if (ci >= this.length)
        return;
      vi = D.JSInt_methods.clamp$2(D.JSNumber_methods.toInt$0(value), 0, 15);
      if (ci > 1) {
        ci &= 1;
        i = 1;
      } else
        i = 0;
      if (ci === 0) {
        t1 = this.data;
        if (!(i < t1.length))
          return A.ioore(t1, i);
        t2 = t1[i];
        t1.$flags & 2 && A.throwUnsupportedOperation(t1);
        t1[i] = (t2 & 15 | vi << 4) >>> 0;
      } else if (ci === 1) {
        t1 = this.data;
        if (!(i < t1.length))
          return A.ioore(t1, i);
        t2 = t1[i];
        t1.$flags & 2 && A.throwUnsupportedOperation(t1);
        t1[i] = (t2 & 240 | vi) >>> 0;
      }
    },
    $index(_, index) {
      return this._getChannel$1(A._asInt(index));
    },
    $indexSet(_, index, value) {
      return this._setChannel$2(A._asInt(index), A._asNum(value));
    },
    get$r(_) {
      return this._getChannel$1(0);
    },
    set$r(_, v) {
      this._setChannel$2(0, v);
    },
    get$g() {
      return this._getChannel$1(1);
    },
    set$g(v) {
      this._setChannel$2(1, v);
    },
    get$b(_) {
      return this._getChannel$1(2);
    },
    set$b(_, v) {
      this._setChannel$2(2, v);
    },
    get$aNormalized() {
      return this._getChannel$1(3) / 15;
    },
    get$luminance() {
      return B.getLuminance(this);
    },
    get$iterator(_) {
      return new B.ChannelIterator(this);
    },
    $eq(_, other) {
      if (other == null)
        return false;
      return type$.Color._is(other) && other.get$length(other) === this.length && other.get$hashCode(other) === A.Object_hashAll(A.List_List$of(this, true, A._instanceType(this)._eval$1("Iterable.E")));
    },
    get$hashCode(_) {
      return A.Object_hashAll(A.List_List$of(this, true, A._instanceType(this)._eval$1("Iterable.E")));
    },
    $isColor1: 1,
    get$length(receiver) {
      return this.length;
    }
  };
  B.ColorUint8.prototype = {
    clone$0(_) {
      return new B.ColorUint8(new Uint8Array(A._ensureNativeList(this.data)));
    },
    get$format() {
      return C.Format_3;
    },
    get$length(_) {
      return this.data.length;
    },
    get$palette() {
      return null;
    },
    $index(_, index) {
      var t1, t2;
      A._asInt(index);
      t1 = this.data;
      t2 = t1.length;
      if (index < t2) {
        if (!(index >= 0))
          return A.ioore(t1, index);
        t1 = t1[index];
      } else
        t1 = 0;
      return t1;
    },
    $indexSet(_, index, value) {
      var t1, t2, t3;
      A._asInt(index);
      A._asNum(value);
      t1 = this.data;
      t2 = t1.length;
      if (index < t2) {
        t3 = D.JSNumber_methods.toInt$0(value);
        t1.$flags & 2 && A.throwUnsupportedOperation(t1);
        if (!(index >= 0))
          return A.ioore(t1, index);
        t1[index] = t3;
      }
    },
    get$r(_) {
      var t1 = this.data;
      if (!D.NativeUint8List_methods.get$isEmpty(t1)) {
        if (0 >= t1.length)
          return A.ioore(t1, 0);
        t1 = t1[0];
      } else
        t1 = 0;
      return t1;
    },
    set$r(_, r) {
      var t2,
        t1 = this.data;
      if (!D.NativeUint8List_methods.get$isEmpty(t1)) {
        t2 = D.JSInt_methods.toInt$0(r);
        t1.$flags & 2 && A.throwUnsupportedOperation(t1);
        if (0 >= t1.length)
          return A.ioore(t1, 0);
        t1[0] = t2;
      }
    },
    get$g() {
      var t1 = this.data;
      return t1.length > 1 ? t1[1] : 0;
    },
    set$g(g) {
      var t2,
        t1 = this.data;
      if (t1.length > 1) {
        t2 = D.JSInt_methods.toInt$0(g);
        t1.$flags & 2 && A.throwUnsupportedOperation(t1);
        t1[1] = t2;
      }
    },
    get$b(_) {
      var t1 = this.data;
      return t1.length > 2 ? t1[2] : 0;
    },
    set$b(_, b) {
      var t2,
        t1 = this.data;
      if (t1.length > 2) {
        t2 = D.JSInt_methods.toInt$0(b);
        t1.$flags & 2 && A.throwUnsupportedOperation(t1);
        t1[2] = t2;
      }
    },
    get$aNormalized() {
      var t1 = this.data;
      return (t1.length > 3 ? t1[3] : 255) / 255;
    },
    get$luminance() {
      return B.getLuminance(this);
    },
    get$iterator(_) {
      return new B.ChannelIterator(this);
    },
    $eq(_, other) {
      if (other == null)
        return false;
      return type$.Color._is(other) && other.get$length(other) === this.data.length && other.get$hashCode(other) === A.Object_hashAll(A.List_List$of(this, true, A._instanceType(this)._eval$1("Iterable.E")));
    },
    get$hashCode(_) {
      return A.Object_hashAll(A.List_List$of(this, true, A._instanceType(this)._eval$1("Iterable.E")));
    },
    $isColor1: 1
  };
  B.ConstColorUint8.prototype = {
    clone$0(_) {
      return new B.ConstColorUint8(this.data);
    },
    get$format() {
      return C.Format_3;
    },
    get$length(_) {
      return 4;
    },
    get$palette() {
      return null;
    },
    $index(_, index) {
      var t1;
      A._asInt(index);
      if (index >= 0 && index < 4) {
        t1 = index << 3 >>> 0;
        t1 = D.JSInt_methods._shrBothPositive$1((this.data & D.JSInt_methods._shlPositive$1(255, t1)) >>> 0, t1);
      } else
        t1 = 0;
      return t1;
    },
    $indexSet(_, index, value) {
      A._asInt(index);
      A._asNum(value);
    },
    get$r(_) {
      return this.$index(0, 0);
    },
    set$r(_, v) {
    },
    get$g() {
      return this.$index(0, 1);
    },
    set$g(v) {
    },
    get$b(_) {
      return this.$index(0, 2);
    },
    set$b(_, v) {
    },
    get$a(_) {
      return this.$index(0, 3);
    },
    get$aNormalized() {
      return this.get$a(this) / 255;
    },
    get$luminance() {
      return B.getLuminance(this);
    },
    get$iterator(_) {
      return new B.ChannelIterator(this);
    },
    $eq(_, other) {
      var _this = this;
      if (other == null)
        return false;
      return type$.Color._is(other) && other.get$length(other) === _this.get$length(_this) && other.get$hashCode(other) === A.Object_hashAll(A.List_List$of(_this, true, A._instanceType(_this)._eval$1("Iterable.E")));
    },
    get$hashCode(_) {
      return A.Object_hashAll(A.List_List$of(this, true, A._instanceType(this)._eval$1("Iterable.E")));
    },
    $isColor1: 1
  };
  B.ConstColorRgb8.prototype = {
    get$a(_) {
      return 255;
    },
    get$aNormalized() {
      return 1;
    },
    get$length(_) {
      return 3;
    }
  };
  B.Format.prototype = {
    _enumToString$0() {
      return "Format." + this._name;
    }
  };
  B.ExifData.prototype = {
    getTagName$1(tag) {
      var t1 = $.$get$exifImageTags();
      if (!t1.containsKey$1(0, tag))
        return "<unknown>";
      return t1.$index(0, tag).name;
    },
    toString$0(_) {
      var t1, t2, t3, t4, t5, t6, t7, t8, directory, t9, value, t10, subDirectory, t11, _this = this;
      for (t1 = _this.directories, t2 = new A.LinkedHashMapKeyIterator(t1, t1._modifications, t1._first, A._instanceType(t1)._eval$1("LinkedHashMapKeyIterator<1>")), t3 = type$.int, t4 = type$.IfdValue, t5 = type$.String, t6 = type$.IfdDirectory, t7 = ""; t2.moveNext$0();) {
        t8 = t2.__js_helper$_current;
        t7 += t8 + "\n";
        directory = t1.$index(0, t8);
        for (t8 = directory.data, t8 = new A.LinkedHashMapKeyIterator(t8, t8._modifications, t8._first, A._instanceType(t8)._eval$1("LinkedHashMapKeyIterator<1>")); t8.moveNext$0();) {
          t9 = t8.__js_helper$_current;
          value = directory.$index(0, t9);
          t7 = value == null ? t7 + ("\t" + _this.getTagName$1(t9) + "\n") : t7 + ("\t" + _this.getTagName$1(t9) + ": " + value.toString$0(0) + "\n");
        }
        for (t8 = directory.sub.directories, t9 = new A.LinkedHashMapKeyIterator(t8, t8._modifications, t8._first, A._instanceType(t8)._eval$1("LinkedHashMapKeyIterator<1>")); t9.moveNext$0();) {
          t10 = t9.__js_helper$_current;
          t7 += t10 + "\n";
          if (!t8.containsKey$1(0, t10))
            t8.$indexSet(0, t10, new B.IfdDirectory(A.LinkedHashMap_LinkedHashMap$_empty(t3, t4), new B.IfdContainer(A.LinkedHashMap_LinkedHashMap$_empty(t5, t6))));
          subDirectory = t8.$index(0, t10);
          for (t10 = subDirectory.data, t10 = new A.LinkedHashMapKeyIterator(t10, t10._modifications, t10._first, A._instanceType(t10)._eval$1("LinkedHashMapKeyIterator<1>")); t10.moveNext$0();) {
            t11 = t10.__js_helper$_current;
            value = subDirectory.$index(0, t11);
            t7 = value == null ? t7 + ("\t" + _this.getTagName$1(t11) + "\n") : t7 + ("\t" + _this.getTagName$1(t11) + ": " + value.toString$0(0) + "\n");
          }
        }
      }
      return t7.charCodeAt(0) == 0 ? t7 : t7;
    },
    write$1(_, out) {
      var t1, t2, t3, offsets, t4, t5, t6, t7, t8, dataOffset, t9, t10, t11, t12, dataSize, subSize, t13, numIfd, i, $name, ifd, _this = this, _s4_ = "exif",
        _s7_ = "interop",
        saveEndian = out.bigEndian;
      out.bigEndian = true;
      out.writeUint16$1(19789);
      out.writeUint16$1(42);
      out.writeUint32$1(8);
      t1 = _this.directories;
      if (t1.$index(0, "ifd0") == null)
        t1.$indexSet(0, "ifd0", new B.IfdDirectory(A.LinkedHashMap_LinkedHashMap$_empty(type$.int, type$.IfdValue), new B.IfdContainer(A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.IfdDirectory))));
      t2 = type$.String;
      t3 = type$.int;
      offsets = A.LinkedHashMap_LinkedHashMap$_empty(t2, t3);
      for (t4 = A._instanceType(t1), t5 = t4._eval$1("LinkedHashMapKeysIterable<1>"), t6 = new A.LinkedHashMapKeyIterator(t1, t1._modifications, t1._first, t4._eval$1("LinkedHashMapKeyIterator<1>")), t7 = type$.IfdValue, t8 = type$.IfdDirectory, dataOffset = 8; t6.moveNext$0();) {
        t9 = t6.__js_helper$_current;
        t10 = t1.$index(0, t9);
        t10.toString;
        offsets.$indexSet(0, t9, dataOffset);
        t9 = t10.sub.directories;
        if (t9.containsKey$1(0, _s4_)) {
          t11 = new Uint32Array(1);
          t11[0] = 0;
          t10.$indexSet(0, 34665, new B.IfdValueLong(t11));
        } else
          t10.data.remove$1(0, 34665);
        if (t9.containsKey$1(0, _s7_)) {
          t11 = new Uint32Array(1);
          t11[0] = 0;
          t10.$indexSet(0, 40965, new B.IfdValueLong(t11));
        } else
          t10.data.remove$1(0, 40965);
        if (t9.containsKey$1(0, "gps")) {
          t11 = new Uint32Array(1);
          t11[0] = 0;
          t10.$indexSet(0, 34853, new B.IfdValueLong(t11));
        } else
          t10.data.remove$1(0, 34853);
        t10 = t10.data;
        dataOffset += 2 + 12 * t10.__js_helper$_length + 4;
        for (t10 = new A.LinkedHashMapValueIterator(t10, t10._modifications, t10._first, A._instanceType(t10)._eval$1("LinkedHashMapValueIterator<2>")); t10.moveNext$0();) {
          t11 = t10.__js_helper$_current;
          t12 = t11.get$type(t11).index;
          if (!(t12 < 13))
            return A.ioore(C.List_w4E, t12);
          dataSize = C.List_w4E[t12] * t11.get$length(t11);
          if (dataSize > 4)
            dataOffset += dataSize;
        }
        for (t10 = new A.LinkedHashMapKeyIterator(t9, t9._modifications, t9._first, A._instanceType(t9)._eval$1("LinkedHashMapKeyIterator<1>")); t10.moveNext$0();) {
          t11 = t10.__js_helper$_current;
          if (!t9.containsKey$1(0, t11))
            t9.$indexSet(0, t11, new B.IfdDirectory(A.LinkedHashMap_LinkedHashMap$_empty(t3, t7), new B.IfdContainer(A.LinkedHashMap_LinkedHashMap$_empty(t2, t8))));
          t12 = t9.$index(0, t11);
          t12.toString;
          offsets.$indexSet(0, t11, dataOffset);
          t12 = t12.data;
          subSize = 2 + 12 * t12.__js_helper$_length;
          for (t11 = new A.LinkedHashMapValueIterator(t12, t12._modifications, t12._first, A._instanceType(t12)._eval$1("LinkedHashMapValueIterator<2>")); t11.moveNext$0();) {
            t12 = t11.__js_helper$_current;
            t13 = t12.get$type(t12).index;
            if (!(t13 < 13))
              return A.ioore(C.List_w4E, t13);
            dataSize = C.List_w4E[t13] * t12.get$length(t12);
            if (dataSize > 4)
              subSize += dataSize;
          }
          dataOffset += subSize;
        }
      }
      numIfd = t1.__js_helper$_length;
      for (t6 = numIfd - 1, t4 = t4._eval$1("LinkedHashMapValuesIterable<2>"), i = 0; i < numIfd; ++i) {
        $name = new A.LinkedHashMapKeysIterable(t1, t5).elementAt$1(0, i);
        ifd = new A.LinkedHashMapValuesIterable(t1, t4).elementAt$1(0, i);
        t9 = ifd.sub.directories;
        if (t9.containsKey$1(0, _s4_)) {
          t10 = ifd.$index(0, 34665);
          t10.toString;
          t11 = offsets.$index(0, _s4_);
          t11.toString;
          t10.setInt$1(t11);
        }
        if (t9.containsKey$1(0, _s7_)) {
          t10 = ifd.$index(0, 40965);
          t10.toString;
          t11 = offsets.$index(0, _s7_);
          t11.toString;
          t10.setInt$1(t11);
        }
        if (t9.containsKey$1(0, "gps")) {
          t10 = ifd.$index(0, 34853);
          t10.toString;
          t11 = offsets.$index(0, "gps");
          t11.toString;
          t10.setInt$1(t11);
        }
        t10 = offsets.$index(0, $name);
        t10.toString;
        _this._writeDirectory$3(out, ifd, t10 + 2 + 12 * ifd.data.__js_helper$_length + 4);
        if (i === t6)
          out.writeUint32$1(0);
        else {
          t10 = offsets.$index(0, new A.LinkedHashMapKeysIterable(t1, t5).elementAt$1(0, i + 1));
          t10.toString;
          out.writeUint32$1(t10);
        }
        _this._writeDirectoryLargeValues$2(out, ifd);
        for (t10 = new A.LinkedHashMapKeyIterator(t9, t9._modifications, t9._first, A._instanceType(t9)._eval$1("LinkedHashMapKeyIterator<1>")); t10.moveNext$0();) {
          t11 = t10.__js_helper$_current;
          if (!t9.containsKey$1(0, t11))
            t9.$indexSet(0, t11, new B.IfdDirectory(A.LinkedHashMap_LinkedHashMap$_empty(t3, t7), new B.IfdContainer(A.LinkedHashMap_LinkedHashMap$_empty(t2, t8))));
          t12 = t9.$index(0, t11);
          t12.toString;
          t11 = offsets.$index(0, t11);
          t11.toString;
          _this._writeDirectory$3(out, t12, t11 + 2 + 12 * t12.data.__js_helper$_length);
          _this._writeDirectoryLargeValues$2(out, t12);
        }
      }
      out.bigEndian = saveEndian;
    },
    _writeDirectory$3(out, ifd, dataOffset) {
      var t2, t3, t4, tagType, tagLength, size,
        t1 = ifd.data;
      out.writeUint16$1(t1.__js_helper$_length);
      for (t1 = new A.LinkedHashMapKeyIterator(t1, t1._modifications, t1._first, A._instanceType(t1)._eval$1("LinkedHashMapKeyIterator<1>")); t1.moveNext$0();) {
        t2 = t1.__js_helper$_current;
        t3 = ifd.$index(0, t2);
        t3.toString;
        t4 = t2 === 273;
        tagType = t4 && t3.get$type(t3) === C.IfdValueType_7 ? C.IfdValueType_4 : t3.get$type(t3);
        tagLength = t4 && t3.get$type(t3) === C.IfdValueType_7 ? 1 : t3.get$length(t3);
        out.writeUint16$1(t2);
        out.writeUint16$1(tagType.index);
        out.writeUint32$1(tagLength);
        t2 = t3.get$type(t3).index;
        if (!(t2 < 13))
          return A.ioore(C.List_w4E, t2);
        size = C.List_w4E[t2] * t3.get$length(t3);
        if (size <= 4) {
          t3.write$1(0, out);
          for (; size < 4;) {
            out.writeByte$1(0);
            ++size;
          }
        } else {
          out.writeUint32$1(dataOffset);
          dataOffset += size;
        }
      }
      return dataOffset;
    },
    _writeDirectoryLargeValues$2(out, ifd) {
      var t1, t2, t3;
      for (t1 = ifd.data, t1 = new A.LinkedHashMapValueIterator(t1, t1._modifications, t1._first, A._instanceType(t1)._eval$1("LinkedHashMapValueIterator<2>")); t1.moveNext$0();) {
        t2 = t1.__js_helper$_current;
        t3 = t2.get$type(t2).index;
        if (!(t3 < 13))
          return A.ioore(C.List_w4E, t3);
        if (C.List_w4E[t3] * t2.get$length(t2) > 4)
          t2.write$1(0, out);
      }
    }
  };
  B.ExifTag.prototype = {};
  B.IfdContainer.prototype = {
    get$isEmpty(_) {
      var t2,
        t1 = this.directories;
      if (t1.__js_helper$_length === 0)
        return true;
      for (t1 = new A.LinkedHashMapValueIterator(t1, t1._modifications, t1._first, A._instanceType(t1)._eval$1("LinkedHashMapValueIterator<2>")); t1.moveNext$0();) {
        t2 = t1.__js_helper$_current;
        if (!(t2.data.__js_helper$_length === 0 && t2.sub.get$isEmpty(0)))
          return false;
      }
      return true;
    },
    containsKey$1(_, key) {
      return this.directories.containsKey$1(0, key);
    },
    clear$0(_) {
      this.directories.clear$0(0);
    },
    $index(_, ifdName) {
      var t1;
      A._asString(ifdName);
      t1 = this.directories;
      if (!t1.containsKey$1(0, ifdName))
        t1.$indexSet(0, ifdName, new B.IfdDirectory(A.LinkedHashMap_LinkedHashMap$_empty(type$.int, type$.IfdValue), new B.IfdContainer(A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.IfdDirectory))));
      t1 = t1.$index(0, ifdName);
      t1.toString;
      return t1;
    },
    $indexSet(_, ifdName, value) {
      this.directories.$indexSet(0, ifdName, type$.IfdDirectory._as(value));
    }
  };
  B.IfdDirectory.prototype = {
    get$isEmpty(_) {
      return this.data.__js_helper$_length === 0 && this.sub.get$isEmpty(0);
    },
    containsKey$1(_, tag) {
      return this.data.containsKey$1(0, A._asInt(tag));
    },
    $index(_, tag) {
      if (typeof tag == "string")
        tag = C.Map_1DOpr.$index(0, tag);
      if (A._isInt(tag))
        return this.data.$index(0, tag);
      return null;
    },
    $indexSet(_, tag, value) {
      var tagInfo;
      if (typeof tag == "string")
        tag = C.Map_1DOpr.$index(0, tag);
      if (!A._isInt(tag))
        return;
      if (value instanceof B.IfdValue)
        this.data.$indexSet(0, tag, value);
      else {
        tagInfo = $.$get$exifImageTags().$index(0, tag);
        if (tagInfo != null)
          switch (tagInfo.type.index) {
            case 1:
              break;
            case 2:
              break;
            case 3:
              break;
            case 4:
              break;
            case 5:
              break;
            case 6:
              break;
            case 7:
              break;
            case 8:
              break;
            case 9:
              break;
            case 10:
              break;
            case 11:
              break;
            case 12:
              break;
            case 0:
              break;
          }
      }
    }
  };
  B.IfdValueType.prototype = {
    _enumToString$0() {
      return "IfdValueType." + this._name;
    }
  };
  B.IfdValue.prototype = {
    toDouble$0(_) {
      return 0;
    },
    toString$0(_) {
      return "";
    },
    $eq(_, other) {
      var _this = this;
      if (other == null)
        return false;
      return other instanceof B.IfdValue && _this.get$type(_this) === other.get$type(other) && _this.get$length(_this) === other.get$length(other) && _this.get$hashCode(_this) === other.get$hashCode(other);
    },
    get$hashCode(_) {
      return 0;
    },
    setInt$1(v) {
    }
  };
  B.IfdValueLong.prototype = {
    get$type(_) {
      return C.IfdValueType_4;
    },
    get$length(_) {
      return this.value.length;
    },
    $eq(_, other) {
      var t1, t2;
      if (other == null)
        return false;
      if (other instanceof B.IfdValueLong) {
        t1 = this.value;
        t2 = other.value;
        t1 = t1.length === t2.length && A.Object_hashAll(t1) === A.Object_hashAll(t2);
      } else
        t1 = false;
      return t1;
    },
    get$hashCode(_) {
      return A.Object_hashAll(this.value);
    },
    setInt$1(v) {
      var t1 = this.value;
      t1.$flags & 2 && A.throwUnsupportedOperation(t1);
      if (0 >= t1.length)
        return A.ioore(t1, 0);
      t1[0] = v;
    },
    write$1(_, out) {
      var i,
        t1 = this.value,
        l = t1.length;
      for (i = 0; i < l; ++i)
        out.writeUint32$1(t1[i]);
    },
    toString$0(_) {
      var t1 = this.value,
        t2 = t1.length;
      if (t2 === 1) {
        if (0 >= t2)
          return A.ioore(t1, 0);
        t1 = "" + t1[0];
      } else
        t1 = A.S(t1);
      return t1;
    }
  };
  B.Encoder.prototype = {};
  B.JpegChroma.prototype = {
    _enumToString$0() {
      return "JpegChroma." + this._name;
    }
  };
  B.JpegEncoder.prototype = {
    setQuality$1(quality) {
      quality = D.JSNumber_methods.toInt$0(D.JSInt_methods.clamp$2(quality, 1, 100));
      if (this._currentQuality === quality)
        return;
      this._initQuantTables$1(quality < 50 ? D.JSNumber_methods.floor$0(5000 / quality) : D.JSInt_methods.floor$0(200 - quality * 2));
      this._currentQuality = quality;
    },
    encode$2$chroma(image, chroma) {
      var t1, t2, width, height, ydu, udu, vdu, dcy, dcu, dcv, y, x, t3, t4, i, sudu, svdu, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, _this = this,
        _s11_ = "_yacHuffman",
        _s12_ = "_uvacHuffman",
        fp = B.OutputBuffer$(true);
      _this._writeMarker$2(fp, 216);
      _this._writeMarker$2(fp, 224);
      fp.writeUint16$1(16);
      fp.writeByte$1(74);
      fp.writeByte$1(70);
      fp.writeByte$1(73);
      fp.writeByte$1(70);
      fp.writeByte$1(0);
      fp.writeByte$1(1);
      fp.writeByte$1(1);
      fp.writeByte$1(0);
      fp.writeUint16$1(1);
      fp.writeUint16$1(1);
      fp.writeByte$1(0);
      fp.writeByte$1(0);
      t1 = image._exif;
      _this._writeAPP1$2(fp, t1 == null ? image._exif = new B.ExifData(A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.IfdDirectory)) : t1);
      _this._writeDQT$1(fp);
      t1 = image.get$width(0);
      t2 = image.get$height(0);
      _this._writeMarker$2(fp, 192);
      fp.writeUint16$1(17);
      fp.writeByte$1(8);
      fp.writeUint16$1(t2);
      fp.writeUint16$1(t1);
      fp.writeByte$1(3);
      fp.writeByte$1(1);
      t1 = chroma === C.JpegChroma_0;
      fp.writeByte$1(t1 ? 17 : 34);
      fp.writeByte$1(0);
      fp.writeByte$1(2);
      fp.writeByte$1(17);
      fp.writeByte$1(1);
      fp.writeByte$1(3);
      fp.writeByte$1(17);
      fp.writeByte$1(1);
      _this._writeDHT$1(fp);
      _this._writeMarker$2(fp, 218);
      fp.writeUint16$1(12);
      fp.writeByte$1(3);
      fp.writeByte$1(1);
      fp.writeByte$1(0);
      fp.writeByte$1(2);
      fp.writeByte$1(17);
      fp.writeByte$1(3);
      fp.writeByte$1(17);
      fp.writeByte$1(0);
      fp.writeByte$1(63);
      fp.writeByte$1(0);
      _this._byteNew = 0;
      _this._bytePos = 7;
      width = image.get$width(0);
      height = image.get$height(0);
      if (t1) {
        ydu = new Float32Array(64);
        udu = new Float32Array(64);
        vdu = new Float32Array(64);
        for (t1 = _this._fdtblY, t2 = _this._fdtblUv, dcy = 0, dcu = 0, dcv = 0, y = 0; y < height; y += 8)
          for (x = 0; x < width; x += 8) {
            _this._calculateYUV$8(image, x, y, width, height, ydu, udu, vdu);
            t3 = _this._ydcHuffman;
            t4 = _this.__JpegEncoder__yacHuffman_A;
            t4 === $ && A.throwLateFieldNI(_s11_);
            dcy = _this._processDU$6(fp, ydu, t1, dcy, t3, t4);
            t4 = _this._uvdcHuffman;
            t3 = _this.__JpegEncoder__uvacHuffman_A;
            t3 === $ && A.throwLateFieldNI(_s12_);
            dcu = _this._processDU$6(fp, udu, t2, dcu, t4, t3);
            dcv = _this._processDU$6(fp, vdu, t2, dcv, _this._uvdcHuffman, _this.__JpegEncoder__uvacHuffman_A);
          }
      } else {
        t1 = type$.Float32List;
        ydu = J.JSArray_JSArray$allocateGrowable(4, t1);
        for (i = 0; i < 4; ++i)
          ydu[i] = new Float32Array(64);
        udu = J.JSArray_JSArray$allocateGrowable(4, t1);
        for (i = 0; i < 4; ++i)
          udu[i] = new Float32Array(64);
        vdu = J.JSArray_JSArray$allocateGrowable(4, t1);
        for (i = 0; i < 4; ++i)
          vdu[i] = new Float32Array(64);
        sudu = new Float32Array(64);
        svdu = new Float32Array(64);
        for (t1 = _this._fdtblY, t2 = _this._fdtblUv, dcy = 0, dcu = 0, dcv = 0, y = 0; y < height; y += 16)
          for (t3 = y + 8, x = 0; x < width; x += 16) {
            t4 = ydu[0];
            t5 = udu[0];
            t6 = vdu[0];
            _this._calculateYUV$8(image, x, y, width, height, t4, t5, t6);
            t7 = x + 8;
            t8 = ydu[1];
            t9 = udu[1];
            t10 = vdu[1];
            _this._calculateYUV$8(image, t7, y, width, height, t8, t9, t10);
            t11 = ydu[2];
            t12 = udu[2];
            t13 = vdu[2];
            _this._calculateYUV$8(image, x, t3, width, height, t11, t12, t13);
            t14 = ydu[3];
            t15 = udu[3];
            t16 = vdu[3];
            _this._calculateYUV$8(image, t7, t3, width, height, t14, t15, t16);
            _this._downsampleDU$5(sudu, t5, t9, t12, t15);
            _this._downsampleDU$5(svdu, t6, t10, t13, t16);
            t16 = _this._ydcHuffman;
            t13 = _this.__JpegEncoder__yacHuffman_A;
            t13 === $ && A.throwLateFieldNI(_s11_);
            dcy = _this._processDU$6(fp, t14, t1, _this._processDU$6(fp, t11, t1, _this._processDU$6(fp, t8, t1, _this._processDU$6(fp, t4, t1, dcy, t16, t13), _this._ydcHuffman, _this.__JpegEncoder__yacHuffman_A), _this._ydcHuffman, _this.__JpegEncoder__yacHuffman_A), _this._ydcHuffman, _this.__JpegEncoder__yacHuffman_A);
            t13 = _this._uvdcHuffman;
            t16 = _this.__JpegEncoder__uvacHuffman_A;
            t16 === $ && A.throwLateFieldNI(_s12_);
            dcu = _this._processDU$6(fp, sudu, t2, dcu, t13, t16);
            dcv = _this._processDU$6(fp, svdu, t2, dcv, _this._uvdcHuffman, _this.__JpegEncoder__uvacHuffman_A);
          }
      }
      t1 = _this._bytePos;
      if (t1 >= 0) {
        ++t1;
        _this._writeBits$2(fp, A._setArrayType([D.JSInt_methods.$shl(1, t1) - 1, t1], type$.JSArray_int));
      }
      _this._writeMarker$2(fp, 217);
      return J.asUint8List$2$x(D.NativeUint8List_methods.get$buffer(fp._output_buffer$_buffer), 0, fp.length);
    },
    _calculateYUV$8(image, x, y, width, height, ydu, udu, vdu) {
      var t1, t2, pos, row, yy, xx, t3, p, a, invA, r, g, b, t4, t5;
      for (t1 = this._rgbYuvTable, t2 = y + 1, pos = 0; pos < 64; ++pos) {
        row = pos >>> 3;
        yy = y + row;
        xx = x + (pos & 7);
        if (yy >= height)
          yy -= t2 + row - height;
        if (xx >= width)
          xx -= xx - width + 1;
        t3 = image.data;
        p = t3 == null ? null : t3.getPixel$3(xx, yy, null);
        if (p == null)
          p = new B.PixelUndefined();
        if (p.get$format() !== C.Format_3)
          p = p.convert$1$format(C.Format_3);
        if (p.get$length(p) > 3) {
          a = p.get$aNormalized();
          invA = 1 - a;
          p.set$r(0, D.JSNumber_methods.round$0(p.get$r(p) * a + C.ConstColorRgb8_4294967295.$index(0, 0) * invA));
          p.set$g(D.JSNumber_methods.round$0(p.get$g() * a + C.ConstColorRgb8_4294967295.$index(0, 0) * invA));
          p.set$b(0, D.JSNumber_methods.round$0(p.get$b(p) * a + C.ConstColorRgb8_4294967295.$index(0, 0) * invA));
        }
        r = D.JSNumber_methods.toInt$0(p.get$r(p));
        g = D.JSNumber_methods.toInt$0(p.get$g());
        b = D.JSNumber_methods.toInt$0(p.get$b(p));
        if (!(r >= 0 && r < 2048))
          return A.ioore(t1, r);
        t3 = t1[r];
        t4 = g + 256;
        if (!(t4 >= 0 && t4 < 2048))
          return A.ioore(t1, t4);
        t4 = t1[t4];
        t5 = b + 512;
        if (!(t5 >= 0 && t5 < 2048))
          return A.ioore(t1, t5);
        t5 = D.JSInt_methods._shrOtherPositive$1(t3 + t4 + t1[t5], 16);
        ydu.$flags & 2 && A.throwUnsupportedOperation(ydu);
        if (!(pos < 64))
          return A.ioore(ydu, pos);
        ydu[pos] = t5 - 128;
        t5 = r + 768;
        if (!(t5 < 2048))
          return A.ioore(t1, t5);
        t5 = t1[t5];
        t4 = g + 1024;
        if (!(t4 >= 0 && t4 < 2048))
          return A.ioore(t1, t4);
        t4 = t1[t4];
        t3 = b + 1280;
        if (!(t3 >= 0 && t3 < 2048))
          return A.ioore(t1, t3);
        t3 = D.JSInt_methods._shrOtherPositive$1(t5 + t4 + t1[t3], 16);
        udu.$flags & 2 && A.throwUnsupportedOperation(udu);
        if (!(pos < 64))
          return A.ioore(udu, pos);
        udu[pos] = t3 - 128;
        t3 = r + 1280;
        if (!(t3 < 2048))
          return A.ioore(t1, t3);
        t3 = t1[t3];
        t4 = g + 1536;
        if (!(t4 >= 0 && t4 < 2048))
          return A.ioore(t1, t4);
        t4 = t1[t4];
        t5 = b + 1792;
        if (!(t5 >= 0 && t5 < 2048))
          return A.ioore(t1, t5);
        t5 = D.JSInt_methods._shrOtherPositive$1(t3 + t4 + t1[t5], 16);
        vdu.$flags & 2 && A.throwUnsupportedOperation(vdu);
        if (!(pos < 64))
          return A.ioore(vdu, pos);
        vdu[pos] = t5 - 128;
      }
    },
    _downsampleDU$5(duOut, duIn1, duIn2, duIn3, duIn4) {
      var t1, posOut, du, pos, t2, t3, t4, t5;
      for (t1 = duOut.$flags | 0, posOut = 0; posOut < 64; ++posOut) {
        if (posOut < 32)
          du = D.JSInt_methods.$mod(posOut, 8) < 4 ? duIn1 : duIn2;
        else
          du = D.JSInt_methods.$mod(posOut, 8) < 4 ? duIn3 : duIn4;
        pos = (D.JSInt_methods._tdivFast$1(D.JSInt_methods.$mod(posOut, 32), 8) << 4 >>> 0) + (D.JSInt_methods.$mod(posOut, 4) << 1 >>> 0);
        if (!(pos < 64))
          return A.ioore(du, pos);
        t2 = du[pos];
        t3 = pos + 1;
        if (!(t3 < 64))
          return A.ioore(du, t3);
        t3 = du[t3];
        t4 = pos + 8;
        if (!(t4 < 64))
          return A.ioore(du, t4);
        t4 = du[t4];
        t5 = pos + 9;
        if (!(t5 < 64))
          return A.ioore(du, t5);
        t5 = du[t5];
        t1 & 2 && A.throwUnsupportedOperation(duOut);
        if (!(posOut < 64))
          return A.ioore(duOut, posOut);
        duOut[posOut] = (t2 + t3 + t4 + t5) / 4;
      }
    },
    _writeMarker$2(fp, marker) {
      fp.writeByte$1(255);
      fp.writeByte$1(marker & 255);
    },
    _initQuantTables$1(sf) {
      var t1, t2, i, t, t3, j, u, t4, t5, t6, k, row, col, t7, t8, t9, t10, _this = this;
      for (t1 = _this._yTable, t2 = t1.$flags | 0, i = 0; i < 64; ++i) {
        t = D.JSNumber_methods.floor$0((C.List_aYr[i] * sf + 50) / 100);
        if (t < 1)
          t = 1;
        else if (t > 255)
          t = 255;
        t3 = C.List_EVh[i];
        t2 & 2 && A.throwUnsupportedOperation(t1);
        if (!(t3 < 64))
          return A.ioore(t1, t3);
        t1[t3] = t;
      }
      for (t2 = _this._uvTable, t3 = t2.$flags | 0, j = 0; j < 64; ++j) {
        u = D.JSNumber_methods.floor$0((C.List_6sz[j] * sf + 50) / 100);
        if (u < 1)
          u = 1;
        else if (u > 255)
          u = 255;
        t4 = C.List_EVh[j];
        t3 & 2 && A.throwUnsupportedOperation(t2);
        if (!(t4 < 64))
          return A.ioore(t2, t4);
        t2[t4] = u;
      }
      for (t3 = _this._fdtblY, t4 = t3.$flags | 0, t5 = _this._fdtblUv, t6 = t5.$flags | 0, k = 0, row = 0; row < 8; ++row)
        for (col = 0; col < 8; ++col) {
          if (!(k >= 0 && k < 64))
            return A.ioore(C.List_EVh, k);
          t7 = C.List_EVh[k];
          if (!(t7 < 64))
            return A.ioore(t1, t7);
          t8 = t1[t7];
          t9 = C.List_A98[row];
          t10 = C.List_A98[col];
          t4 & 2 && A.throwUnsupportedOperation(t3);
          t3[k] = 1 / (t8 * t9 * t10 * 8);
          t7 = t2[t7];
          t6 & 2 && A.throwUnsupportedOperation(t5);
          t5[k] = 1 / (t7 * t9 * t10 * 8);
          ++k;
        }
    },
    _computeHuffmanTable$2(nrCodes, stdTable) {
      var ht, t2, codeValue, posInTable, k, j, index,
        t1 = type$.List_int;
      t1._as(nrCodes);
      t1._as(stdTable);
      t1 = type$.JSArray_int;
      ht = A._setArrayType([A._setArrayType([], t1)], type$.JSArray_nullable_List_int);
      for (t2 = stdTable.length, codeValue = 0, posInTable = 0, k = 1; k <= 16; ++k) {
        for (j = 1; j <= nrCodes[k]; ++j) {
          if (!(posInTable >= 0 && posInTable < t2))
            return A.ioore(stdTable, posInTable);
          index = stdTable[posInTable];
          if (ht.length <= index)
            D.JSArray_methods.set$length(ht, index + 1);
          D.JSArray_methods.$indexSet(ht, index, A._setArrayType([codeValue, k], t1));
          ++posInTable;
          ++codeValue;
        }
        codeValue *= 2;
      }
      return ht;
    },
    _initCategoryNumber$0() {
      var t1, t2, t3, nrLower, nrUpper, cat, nr, t4, nrNeg, t5, t6;
      for (t1 = this._category, t2 = this._bitCode, t3 = type$.JSArray_int, nrLower = 1, nrUpper = 2, cat = 1; cat <= 15; ++cat) {
        for (nr = nrLower; nr < nrUpper; ++nr) {
          t4 = 32767 + nr;
          D.JSArray_methods.$indexSet(t1, t4, cat);
          D.JSArray_methods.$indexSet(t2, t4, A._setArrayType([nr, cat], t3));
        }
        for (t4 = nrUpper - 1, nrNeg = -t4, t5 = -nrLower; nrNeg <= t5; ++nrNeg) {
          t6 = 32767 + nrNeg;
          D.JSArray_methods.$indexSet(t1, t6, cat);
          D.JSArray_methods.$indexSet(t2, t6, A._setArrayType([t4 + nrNeg, cat], t3));
        }
        nrLower = nrLower << 1 >>> 0;
        nrUpper = nrUpper << 1 >>> 0;
      }
    },
    _initRgbYuvTable$0() {
      var t1, t2, i;
      for (t1 = this._rgbYuvTable, t2 = t1.$flags | 0, i = 0; i < 256; ++i) {
        t2 & 2 && A.throwUnsupportedOperation(t1);
        t1[i] = 19595 * i;
        t1[i + 256] = 38470 * i;
        t1[i + 512] = 7471 * i + 32768;
        t1[i + 768] = -11059 * i;
        t1[i + 1024] = -21709 * i;
        t1[i + 1280] = 32768 * i + 8421375;
        t1[i + 1536] = -27439 * i;
        t1[i + 1792] = -5329 * i;
      }
    },
    _fDCTQuant$2(data, fdtbl) {
      var dataOff, i, d0, t2, d1, t3, d2, t4, d3, t5, d4, t6, d5, t7, d6, t8, d7, tmp0, tmp7, tmp1, tmp6, tmp2, tmp5, tmp3, tmp10, tmp13, tmp11, z1, tmp12, z5, z2, z4, z3, z11, z13, tmp0p2, tmp7p2, tmp1p2, tmp6p2, tmp2p2, tmp5p2, tmp3p2, tmp10p2, tmp13p2, tmp11p2, z1p2, tmp12p2, z5p2, z2p2, z4p2, z3p2, z11p2, z13p2, fDCTQuant,
        t1 = type$.List_double;
      t1._as(data);
      t1._as(fdtbl);
      for (t1 = data.$flags | 0, dataOff = 0, i = 0; i < 8; ++i) {
        if (!(dataOff < 64))
          return A.ioore(data, dataOff);
        d0 = data[dataOff];
        t2 = dataOff + 1;
        if (!(t2 < 64))
          return A.ioore(data, t2);
        d1 = data[t2];
        t3 = dataOff + 2;
        if (!(t3 < 64))
          return A.ioore(data, t3);
        d2 = data[t3];
        t4 = dataOff + 3;
        if (!(t4 < 64))
          return A.ioore(data, t4);
        d3 = data[t4];
        t5 = dataOff + 4;
        if (!(t5 < 64))
          return A.ioore(data, t5);
        d4 = data[t5];
        t6 = dataOff + 5;
        if (!(t6 < 64))
          return A.ioore(data, t6);
        d5 = data[t6];
        t7 = dataOff + 6;
        if (!(t7 < 64))
          return A.ioore(data, t7);
        d6 = data[t7];
        t8 = dataOff + 7;
        if (!(t8 < 64))
          return A.ioore(data, t8);
        d7 = data[t8];
        tmp0 = d0 + d7;
        tmp7 = d0 - d7;
        tmp1 = d1 + d6;
        tmp6 = d1 - d6;
        tmp2 = d2 + d5;
        tmp5 = d2 - d5;
        tmp3 = d3 + d4;
        tmp10 = tmp0 + tmp3;
        tmp13 = tmp0 - tmp3;
        tmp11 = tmp1 + tmp2;
        t1 & 2 && A.throwUnsupportedOperation(data);
        if (!(dataOff < 64))
          return A.ioore(data, dataOff);
        data[dataOff] = tmp10 + tmp11;
        if (!(t5 < 64))
          return A.ioore(data, t5);
        data[t5] = tmp10 - tmp11;
        z1 = (tmp1 - tmp2 + tmp13) * 0.707106781;
        if (!(t3 < 64))
          return A.ioore(data, t3);
        data[t3] = tmp13 + z1;
        if (!(t7 < 64))
          return A.ioore(data, t7);
        data[t7] = tmp13 - z1;
        tmp10 = d3 - d4 + tmp5;
        tmp12 = tmp6 + tmp7;
        z5 = (tmp10 - tmp12) * 0.382683433;
        z2 = 0.5411961 * tmp10 + z5;
        z4 = 1.306562965 * tmp12 + z5;
        z3 = (tmp5 + tmp6) * 0.707106781;
        z11 = tmp7 + z3;
        z13 = tmp7 - z3;
        if (!(t6 < 64))
          return A.ioore(data, t6);
        data[t6] = z13 + z2;
        if (!(t4 < 64))
          return A.ioore(data, t4);
        data[t4] = z13 - z2;
        if (!(t2 < 64))
          return A.ioore(data, t2);
        data[t2] = z11 + z4;
        if (!(t8 < 64))
          return A.ioore(data, t8);
        data[t8] = z11 - z4;
        dataOff += 8;
      }
      for (dataOff = 0, i = 0; i < 8; ++i) {
        if (!(dataOff < 64))
          return A.ioore(data, dataOff);
        d0 = data[dataOff];
        t2 = dataOff + 8;
        if (!(t2 < 64))
          return A.ioore(data, t2);
        d1 = data[t2];
        t3 = dataOff + 16;
        if (!(t3 < 64))
          return A.ioore(data, t3);
        d2 = data[t3];
        t4 = dataOff + 24;
        if (!(t4 < 64))
          return A.ioore(data, t4);
        d3 = data[t4];
        t5 = dataOff + 32;
        if (!(t5 < 64))
          return A.ioore(data, t5);
        d4 = data[t5];
        t6 = dataOff + 40;
        if (!(t6 < 64))
          return A.ioore(data, t6);
        d5 = data[t6];
        t7 = dataOff + 48;
        if (!(t7 < 64))
          return A.ioore(data, t7);
        d6 = data[t7];
        t8 = dataOff + 56;
        if (!(t8 < 64))
          return A.ioore(data, t8);
        d7 = data[t8];
        tmp0p2 = d0 + d7;
        tmp7p2 = d0 - d7;
        tmp1p2 = d1 + d6;
        tmp6p2 = d1 - d6;
        tmp2p2 = d2 + d5;
        tmp5p2 = d2 - d5;
        tmp3p2 = d3 + d4;
        tmp10p2 = tmp0p2 + tmp3p2;
        tmp13p2 = tmp0p2 - tmp3p2;
        tmp11p2 = tmp1p2 + tmp2p2;
        t1 & 2 && A.throwUnsupportedOperation(data);
        if (!(dataOff < 64))
          return A.ioore(data, dataOff);
        data[dataOff] = tmp10p2 + tmp11p2;
        if (!(t5 < 64))
          return A.ioore(data, t5);
        data[t5] = tmp10p2 - tmp11p2;
        z1p2 = (tmp1p2 - tmp2p2 + tmp13p2) * 0.707106781;
        if (!(t3 < 64))
          return A.ioore(data, t3);
        data[t3] = tmp13p2 + z1p2;
        if (!(t7 < 64))
          return A.ioore(data, t7);
        data[t7] = tmp13p2 - z1p2;
        tmp10p2 = d3 - d4 + tmp5p2;
        tmp12p2 = tmp6p2 + tmp7p2;
        z5p2 = (tmp10p2 - tmp12p2) * 0.382683433;
        z2p2 = 0.5411961 * tmp10p2 + z5p2;
        z4p2 = 1.306562965 * tmp12p2 + z5p2;
        z3p2 = (tmp5p2 + tmp6p2) * 0.707106781;
        z11p2 = tmp7p2 + z3p2;
        z13p2 = tmp7p2 - z3p2;
        if (!(t6 < 64))
          return A.ioore(data, t6);
        data[t6] = z13p2 + z2p2;
        if (!(t4 < 64))
          return A.ioore(data, t4);
        data[t4] = z13p2 - z2p2;
        if (!(t2 < 64))
          return A.ioore(data, t2);
        data[t2] = z11p2 + z4p2;
        if (!(t8 < 64))
          return A.ioore(data, t8);
        data[t8] = z11p2 - z4p2;
        ++dataOff;
      }
      for (t1 = this._outputfDCTQuant, i = 0; i < 64; ++i) {
        fDCTQuant = data[i] * fdtbl[i];
        D.JSArray_methods.$indexSet(t1, i, fDCTQuant > 0 ? D.JSNumber_methods.toInt$0(fDCTQuant + 0.5) : D.JSNumber_methods.toInt$0(fDCTQuant - 0.5));
      }
      return t1;
    },
    _writeAPP1$2(out, exif) {
      var exifData, exifBytes;
      if (exif.get$isEmpty(0))
        return;
      exifData = B.OutputBuffer$(false);
      exif.write$1(0, exifData);
      exifBytes = J.asUint8List$2$x(D.NativeUint8List_methods.get$buffer(exifData._output_buffer$_buffer), 0, exifData.length);
      this._writeMarker$2(out, 225);
      out.writeUint16$1(exifBytes.length + 8);
      out.writeUint32$1(1165519206);
      out.writeUint16$1(0);
      out.writeBytes$1(exifBytes);
    },
    _writeDQT$1(out) {
      var t1, i, j;
      this._writeMarker$2(out, 219);
      out.writeUint16$1(132);
      out.writeByte$1(0);
      for (t1 = this._yTable, i = 0; i < 64; ++i)
        out.writeByte$1(t1[i]);
      out.writeByte$1(1);
      for (t1 = this._uvTable, j = 0; j < 64; ++j)
        out.writeByte$1(t1[j]);
    },
    _writeDHT$1(out) {
      var i, j, k, l, m, n, o, p;
      this._writeMarker$2(out, 196);
      out.writeUint16$1(418);
      out.writeByte$1(0);
      for (i = 0; i < 16;) {
        ++i;
        out.writeByte$1(C.List_zcj[i]);
      }
      for (j = 0; j <= 11; ++j)
        out.writeByte$1(C.List_74c[j]);
      out.writeByte$1(16);
      for (k = 0; k < 16;) {
        ++k;
        out.writeByte$1(C.List_2BR[k]);
      }
      for (l = 0; l <= 161; ++l)
        out.writeByte$1(C.List_CZS[l]);
      out.writeByte$1(1);
      for (m = 0; m < 16;) {
        ++m;
        out.writeByte$1(C.List_NZS[m]);
      }
      for (n = 0; n <= 11; ++n)
        out.writeByte$1(C.List_74c[n]);
      out.writeByte$1(17);
      for (o = 0; o < 16;) {
        ++o;
        out.writeByte$1(C.List_GUW[o]);
      }
      for (p = 0; p <= 161; ++p)
        out.writeByte$1(C.List_X1N[p]);
    },
    _processDU$6(out, cdu, fdtbl, dc, htdc, htac) {
      var eob, m16Zeroes, duDct, j, t2, diff, t3, pos, end0pos, t4, i, i0, nrzeroes, lng, nrmarker, t5, _this = this,
        t1 = type$.List_double;
      t1._as(cdu);
      t1._as(fdtbl);
      type$.nullable_List_nullable_List_int._as(htdc);
      type$.List_nullable_List_int._as(htac);
      t1 = htac.length;
      if (0 >= t1)
        return A.ioore(htac, 0);
      eob = htac[0];
      if (240 >= t1)
        return A.ioore(htac, 240);
      m16Zeroes = htac[240];
      duDct = _this._fDCTQuant$2(cdu, fdtbl);
      for (t1 = _this._du, j = 0; j < 64; ++j)
        D.JSArray_methods.$indexSet(t1, C.List_EVh[j], duDct[j]);
      t2 = t1[0];
      t2.toString;
      diff = t2 - dc;
      if (diff === 0) {
        if (0 >= htdc.length)
          return A.ioore(htdc, 0);
        t3 = htdc[0];
        t3.toString;
        _this._writeBits$2(out, t3);
      } else {
        pos = 32767 + diff;
        htdc.toString;
        t3 = _this._category;
        if (!(pos >= 0 && pos < 65535))
          return A.ioore(t3, pos);
        t3 = t3[pos];
        t3.toString;
        if (!(t3 < htdc.length))
          return A.ioore(htdc, t3);
        t3 = htdc[t3];
        t3.toString;
        _this._writeBits$2(out, t3);
        t3 = _this._bitCode[pos];
        t3.toString;
        _this._writeBits$2(out, t3);
      }
      end0pos = 63;
      while (true) {
        if (!(end0pos > 0 && t1[end0pos] === 0))
          break;
        --end0pos;
      }
      if (end0pos === 0) {
        eob.toString;
        _this._writeBits$2(out, eob);
        return t2;
      }
      for (t3 = _this._category, t4 = _this._bitCode, i = 1; i <= end0pos;) {
        i0 = i;
        while (true) {
          if (!(i0 >= 0 && i0 < 64))
            return A.ioore(t1, i0);
          if (!(t1[i0] === 0 && i0 <= end0pos))
            break;
          ++i0;
        }
        nrzeroes = i0 - i;
        if (nrzeroes >= 16) {
          lng = D.JSInt_methods._shrOtherPositive$1(nrzeroes, 4);
          for (nrmarker = 1; nrmarker <= lng; ++nrmarker) {
            m16Zeroes.toString;
            _this._writeBits$2(out, m16Zeroes);
          }
          nrzeroes &= 15;
        }
        t5 = t1[i0];
        t5.toString;
        pos = 32767 + t5;
        if (!(pos >= 0 && pos < 65535))
          return A.ioore(t3, pos);
        t5 = t3[pos];
        t5.toString;
        t5 = (nrzeroes << 4 >>> 0) + t5;
        if (!(t5 < htac.length))
          return A.ioore(htac, t5);
        t5 = htac[t5];
        t5.toString;
        _this._writeBits$2(out, t5);
        t5 = t4[pos];
        t5.toString;
        _this._writeBits$2(out, t5);
        i = i0 + 1;
      }
      if (end0pos !== 63) {
        eob.toString;
        _this._writeBits$2(out, eob);
      }
      return t2;
    },
    _writeBits$2(out, bits) {
      var t1, value, posval, _this = this;
      type$.List_int._as(bits);
      t1 = bits.length;
      if (0 >= t1)
        return A.ioore(bits, 0);
      value = bits[0];
      if (1 >= t1)
        return A.ioore(bits, 1);
      posval = bits[1] - 1;
      for (; posval >= 0;) {
        if ((value & D.JSInt_methods.$shl(1, posval)) >>> 0 !== 0)
          _this._byteNew = (_this._byteNew | D.JSInt_methods.$shl(1, _this._bytePos)) >>> 0;
        --posval;
        if (--_this._bytePos < 0) {
          t1 = _this._byteNew;
          if (t1 === 255) {
            out.writeByte$1(255);
            out.writeByte$1(0);
          } else
            out.writeByte$1(t1);
          _this._bytePos = 7;
          _this._byteNew = 0;
        }
      }
    },
    set$_ydcHuffman(_ydcHuffman) {
      this._ydcHuffman = type$.nullable_List_nullable_List_int._as(_ydcHuffman);
    },
    set$_uvdcHuffman(_uvdcHuffman) {
      this._uvdcHuffman = type$.nullable_List_nullable_List_int._as(_uvdcHuffman);
    },
    set$__JpegEncoder__yacHuffman_A(__JpegEncoder__yacHuffman_A) {
      this.__JpegEncoder__yacHuffman_A = type$.List_nullable_List_int._as(__JpegEncoder__yacHuffman_A);
    },
    set$__JpegEncoder__uvacHuffman_A(__JpegEncoder__uvacHuffman_A) {
      this.__JpegEncoder__uvacHuffman_A = type$.List_nullable_List_int._as(__JpegEncoder__uvacHuffman_A);
    }
  };
  B.FrameType.prototype = {
    _enumToString$0() {
      return "FrameType." + this._name;
    }
  };
  B.Image0.prototype = {
    Image$fromBytes$19$backgroundColor$bytes$bytesOffset$exif$format$frameDuration$frameIndex$frameType$height$iccp$loopCount$numChannels$order$palette$paletteFormat$rowStride$textData$width$withPalette(backgroundColor, bytes, bytesOffset, exif, format, frameDuration, frameIndex, frameType, height, iccp, loopCount, numChannels, order, palette, paletteFormat, rowStride, textData, width, withPalette) {
      var t1, toBytes, fromBytes, t2, dataStride, stride, dOff, bOff, y, dOff0, p, r, g, b, a, _this = this,
        value = _this.__Image_frames_AI;
      if (value === $) {
        value = A._setArrayType([], type$.JSArray_Image);
        _this.set$__Image_frames_AI(value);
      }
      D.JSArray_methods.add$1(value, _this);
      if (numChannels > 4)
        throw A.wrapException(new B.ImageException("An Image can only have 1-4 channels."));
      if (numChannels === 3)
        order = C.ChannelOrder_4;
      else if (numChannels === 4)
        order = C.ChannelOrder_0;
      else {
        t1 = numChannels === 1 ? C.ChannelOrder_7 : C.ChannelOrder_6;
        order = t1;
      }
      if (numChannels === 1)
        order = C.ChannelOrder_7;
      else if (numChannels === 2)
        order = C.ChannelOrder_6;
      else if (numChannels === 3) {
        if (order !== C.ChannelOrder_4 && order !== C.ChannelOrder_5)
          order = C.ChannelOrder_4;
      } else if (numChannels === 4)
        if (order !== C.ChannelOrder_1 && order !== C.ChannelOrder_0 && order !== C.ChannelOrder_2 && order !== C.ChannelOrder_3)
          order = C.ChannelOrder_0;
      _this._createImageData$5(width, height, format, numChannels, palette);
      t1 = _this.data;
      if (t1 == null)
        return;
      toBytes = J.asUint8List$0$x(t1.get$buffer(t1));
      fromBytes = J.asUint8List$2$x(bytes, bytesOffset, null);
      if (format === C.Format_0)
        rowStride = D.JSNumber_methods.ceil$0(width * numChannels / 8);
      else if (format === C.Format_1) {
        t1 = D.JSNumber_methods.ceil$0(width * numChannels / 4);
        rowStride = t1;
      } else {
        t1 = width * numChannels;
        if (format === C.Format_2)
          t1 = D.JSNumber_methods.ceil$0(t1 / 2);
        else {
          t2 = C.Map_vw4lG.$index(0, format);
          t2.toString;
          t2 = t1 * t2;
          t1 = t2;
        }
        rowStride = t1;
      }
      dataStride = _this.data.get$rowStride();
      stride = Math.min(A.checkNum(rowStride), dataStride);
      dOff = 0;
      bOff = 0;
      y = 0;
      while (y < height) {
        dOff0 = dOff + dataStride;
        D.NativeUint8List_methods.setRange$3(toBytes, dOff, dOff0, A.Uint8List_Uint8List$sublistView(fromBytes, bOff, bOff + stride));
        ++y;
        if (typeof rowStride !== "number")
          return A.iae(rowStride);
        bOff += rowStride;
        dOff = dOff0;
      }
      if (numChannels === 3 && order === C.ChannelOrder_5)
        for (t1 = _this.data, t1 = t1.get$iterator(t1); t1.moveNext$0();) {
          p = t1.get$current(t1);
          r = p.get$r(p);
          p.set$r(0, p.get$b(p));
          p.set$b(0, r);
        }
      else {
        t1 = numChannels === 4;
        if (t1 && order === C.ChannelOrder_2)
          for (t1 = _this.data, t1 = t1.get$iterator(t1); t1.moveNext$0();) {
            p = t1.get$current(t1);
            r = p.get$r(p);
            g = p.get$g();
            b = p.get$b(p);
            p.set$r(0, p.get$a(p));
            p.set$g(b);
            p.set$b(0, g);
            p.set$a(0, r);
          }
        else if (t1 && order === C.ChannelOrder_3)
          for (t1 = _this.data, t1 = t1.get$iterator(t1); t1.moveNext$0();) {
            p = t1.get$current(t1);
            r = p.get$r(p);
            g = p.get$g();
            b = p.get$b(p);
            p.set$r(0, p.get$a(p));
            p.set$g(r);
            p.set$b(0, g);
            p.set$a(0, b);
          }
        else if (t1 && order === C.ChannelOrder_1)
          for (t1 = _this.data, t1 = t1.get$iterator(t1); t1.moveNext$0();) {
            p = t1.get$current(t1);
            r = p.get$r(p);
            g = p.get$g();
            b = p.get$b(p);
            a = p.get$a(p);
            p.set$r(0, b);
            p.set$g(g);
            p.set$b(0, r);
            p.set$a(0, a);
          }
      }
    },
    _createImageData$5(width, height, format, numChannels, palette) {
      var t1, t2, _this = this, _null = null;
      switch (format.index) {
        case 0:
          if (palette == null) {
            t1 = D.JSNumber_methods.ceil$0(width * numChannels / 8);
            t2 = new B.ImageDataUint1(t1, _null, width, height, numChannels);
            t1 = Math.max(t1 * height, 1);
            t2.__ImageDataUint1_data_F = new Uint8Array(t1);
            _this.data = t2;
          } else {
            t1 = D.JSNumber_methods.ceil$0(width / 8);
            t2 = new B.ImageDataUint1(t1, palette, width, height, 1);
            t1 = Math.max(t1 * height, 1);
            t2.__ImageDataUint1_data_F = new Uint8Array(t1);
            _this.data = t2;
          }
          break;
        case 1:
          if (palette == null) {
            t1 = D.JSNumber_methods.ceil$0(width * (numChannels << 1 >>> 0) / 8);
            t2 = new B.ImageDataUint2(t1, _null, width, height, numChannels);
            t1 = Math.max(t1 * height, 1);
            t2.__ImageDataUint2_data_F = new Uint8Array(t1);
            _this.data = t2;
          } else {
            t1 = D.JSNumber_methods.ceil$0(width / 4);
            t2 = new B.ImageDataUint2(t1, palette, width, height, 1);
            t1 = Math.max(t1 * height, 1);
            t2.__ImageDataUint2_data_F = new Uint8Array(t1);
            _this.data = t2;
          }
          break;
        case 2:
          if (palette == null) {
            if (numChannels === 2)
              t1 = width;
            else if (numChannels === 4)
              t1 = width * 2;
            else
              t1 = numChannels === 3 ? D.JSNumber_methods.ceil$0(width * 1.5) : D.JSNumber_methods.ceil$0(width / 2);
            t2 = new B.ImageDataUint4(t1, _null, width, height, numChannels);
            t1 = Math.max(t1 * height, 1);
            t2.__ImageDataUint4_data_F = new Uint8Array(t1);
            _this.data = t2;
          } else {
            t1 = D.JSNumber_methods.ceil$0(width / 2);
            t2 = new B.ImageDataUint4(t1, palette, width, height, 1);
            t1 = Math.max(t1 * height, 1);
            t2.__ImageDataUint4_data_F = new Uint8Array(t1);
            _this.data = t2;
          }
          break;
        case 3:
          t1 = width * height;
          if (palette == null)
            _this.data = new B.ImageDataUint8(new Uint8Array(t1 * numChannels), _null, width, height, numChannels);
          else
            _this.data = new B.ImageDataUint8(new Uint8Array(t1), palette, width, height, 1);
          break;
        case 4:
          t1 = width * height;
          if (palette == null)
            _this.data = new B.ImageDataUint16(new Uint16Array(t1 * numChannels), _null, width, height, numChannels);
          else
            _this.data = new B.ImageDataUint16(new Uint16Array(t1), palette, width, height, 1);
          break;
        case 5:
          _this.data = new B.ImageDataUint32(new Uint32Array(width * height * numChannels), width, height, numChannels);
          break;
        case 6:
          _this.data = new B.ImageDataInt8(new Int8Array(width * height * numChannels), width, height, numChannels);
          break;
        case 7:
          _this.data = new B.ImageDataInt16(new Int16Array(width * height * numChannels), width, height, numChannels);
          break;
        case 8:
          _this.data = new B.ImageDataInt32(new Int32Array(width * height * numChannels), width, height, numChannels);
          break;
        case 9:
          _this.data = new B.ImageDataFloat16(new Uint16Array(width * height * numChannels), width, height, numChannels);
          break;
        case 10:
          _this.data = new B.ImageDataFloat32(new Float32Array(width * height * numChannels), width, height, numChannels);
          break;
        case 11:
          _this.data = new B.ImageDataFloat64(new Float64Array(width * height * 4 * numChannels), width, height, numChannels);
          break;
      }
    },
    toString$0(_) {
      var _this = this,
        t1 = _this.get$width(0),
        t2 = _this.get$height(0),
        t3 = _this.get$format(),
        t4 = _this.data;
      t4 = t4 == null ? null : t4.get$palette();
      t4 = t4 == null ? null : t4.numChannels;
      if (t4 == null) {
        t4 = _this.data;
        t4 = t4 == null ? null : t4.numChannels;
      }
      if (t4 == null)
        t4 = 0;
      return "Image(" + t1 + ", " + t2 + ", " + t3._name + ", " + t4 + ")";
    },
    get$width(_) {
      var t1 = this.data;
      t1 = t1 == null ? null : t1.width;
      return t1 == null ? 0 : t1;
    },
    get$height(_) {
      var t1 = this.data;
      t1 = t1 == null ? null : t1.height;
      return t1 == null ? 0 : t1;
    },
    get$format() {
      var t1 = this.data;
      t1 = t1 == null ? null : t1.get$format();
      return t1 == null ? C.Format_3 : t1;
    },
    get$iterator(_) {
      var t1 = this.data;
      return t1.get$iterator(t1);
    },
    clear$1(_, color) {
      var t1;
      type$.nullable_Color._as(color);
      t1 = this.data;
      return t1 == null ? null : t1.clear$1(0, color);
    },
    clear$0(_) {
      return this.clear$1(0, null);
    },
    set$__Image_frames_AI(__Image_frames_AI) {
      this.__Image_frames_AI = type$.List_Image._as(__Image_frames_AI);
    }
  };
  B.ImageData1.prototype = {
    get$palette() {
      return null;
    }
  };
  B.ImageDataFloat16.prototype = {
    get$format() {
      return C.Format_9;
    },
    get$buffer(_) {
      return D.NativeUint16List_methods.get$buffer(this.data);
    },
    get$rowStride() {
      return this.width * this.numChannels * 2;
    },
    get$iterator(_) {
      return B.PixelFloat16$imageData(this);
    },
    get$length(_) {
      return this.data.byteLength;
    },
    getPixel$3(x, y, pixel) {
      var t1, t2,
        pixel0 = B.PixelFloat16$imageData(this);
      pixel = pixel0;
      pixel._pixel_float16$_x = x;
      pixel._pixel_float16$_y = y;
      t1 = pixel.image;
      t2 = t1.numChannels;
      pixel._pixel_float16$_index = y * t1.width * t2 + x * t2;
      return pixel;
    },
    toString$0(_) {
      return "ImageDataFloat16(" + this.width + ", " + this.height + ", " + this.numChannels + ")";
    },
    clear$1(_, c) {
      type$.nullable_Color._as(c);
    },
    clear$0(_) {
      return this.clear$1(0, null);
    }
  };
  B.ImageDataFloat32.prototype = {
    get$format() {
      return C.Format_10;
    },
    get$buffer(_) {
      return D.NativeFloat32List_methods.get$buffer(this.data);
    },
    get$iterator(_) {
      return B.PixelFloat32$imageData(this);
    },
    get$length(_) {
      return this.data.byteLength;
    },
    get$rowStride() {
      return this.width * this.numChannels * 4;
    },
    getPixel$3(x, y, pixel) {
      var t1, t2,
        pixel0 = B.PixelFloat32$imageData(this);
      pixel = pixel0;
      pixel._pixel_float32$_x = x;
      pixel._pixel_float32$_y = y;
      t1 = pixel.image;
      t2 = t1.numChannels;
      pixel._pixel_float32$_index = y * t1.width * t2 + x * t2;
      return pixel;
    },
    toString$0(_) {
      return "ImageDataFloat32(" + this.width + ", " + this.height + ", " + this.numChannels + ")";
    },
    clear$1(_, c) {
      type$.nullable_Color._as(c);
    },
    clear$0(_) {
      return this.clear$1(0, null);
    }
  };
  B.ImageDataFloat64.prototype = {
    get$format() {
      return C.Format_11;
    },
    get$buffer(_) {
      return D.NativeFloat64List_methods.get$buffer(this.data);
    },
    get$length(_) {
      return this.data.byteLength;
    },
    get$iterator(_) {
      return B.PixelFloat64$imageData(this);
    },
    get$rowStride() {
      return this.width * this.numChannels * 8;
    },
    getPixel$3(x, y, pixel) {
      var t1, t2,
        pixel0 = B.PixelFloat64$imageData(this);
      pixel = pixel0;
      pixel._pixel_float64$_x = x;
      pixel._pixel_float64$_y = y;
      t1 = pixel.image;
      t2 = t1.numChannels;
      pixel._pixel_float64$_index = y * t1.width * t2 + x * t2;
      return pixel;
    },
    toString$0(_) {
      return "ImageDataFloat64(" + this.width + ", " + this.height + ", " + this.numChannels + ")";
    },
    clear$1(_, c) {
      type$.nullable_Color._as(c);
    },
    clear$0(_) {
      return this.clear$1(0, null);
    }
  };
  B.ImageDataInt16.prototype = {
    get$format() {
      return C.Format_7;
    },
    get$buffer(_) {
      return D.NativeInt16List_methods.get$buffer(this.data);
    },
    get$iterator(_) {
      return B.PixelInt16$imageData(this);
    },
    get$length(_) {
      return this.data.byteLength;
    },
    get$rowStride() {
      return this.width * this.numChannels * 2;
    },
    getPixel$3(x, y, pixel) {
      var t1, t2,
        pixel0 = B.PixelInt16$imageData(this);
      pixel = pixel0;
      pixel._pixel_int16$_x = x;
      pixel._pixel_int16$_y = y;
      t1 = pixel.image;
      t2 = t1.numChannels;
      pixel._pixel_int16$_index = y * t1.width * t2 + x * t2;
      return pixel;
    },
    toString$0(_) {
      return "ImageDataInt16(" + this.width + ", " + this.height + ", " + this.numChannels + ")";
    },
    clear$1(_, c) {
      type$.nullable_Color._as(c);
    },
    clear$0(_) {
      return this.clear$1(0, null);
    }
  };
  B.ImageDataInt32.prototype = {
    get$format() {
      return C.Format_8;
    },
    get$buffer(_) {
      return D.NativeInt32List_methods.get$buffer(this.data);
    },
    get$rowStride() {
      return this.width * this.numChannels * 4;
    },
    get$iterator(_) {
      return B.PixelInt32$imageData(this);
    },
    get$length(_) {
      return this.data.byteLength;
    },
    getPixel$3(x, y, pixel) {
      var t1, t2,
        pixel0 = B.PixelInt32$imageData(this);
      pixel = pixel0;
      pixel._pixel_int32$_x = x;
      pixel._pixel_int32$_y = y;
      t1 = pixel.image;
      t2 = t1.numChannels;
      pixel._pixel_int32$_index = y * t1.width * t2 + x * t2;
      return pixel;
    },
    toString$0(_) {
      return "ImageDataInt32(" + this.width + ", " + this.height + ", " + this.numChannels + ")";
    },
    clear$1(_, c) {
      type$.nullable_Color._as(c);
    },
    clear$0(_) {
      return this.clear$1(0, null);
    }
  };
  B.ImageDataInt8.prototype = {
    get$format() {
      return C.Format_6;
    },
    get$buffer(_) {
      return D.NativeInt8List_methods.get$buffer(this.data);
    },
    get$rowStride() {
      return this.width * this.numChannels;
    },
    get$iterator(_) {
      return B.PixelInt8$imageData(this);
    },
    get$length(_) {
      return this.data.byteLength;
    },
    getPixel$3(x, y, pixel) {
      var t1, t2,
        pixel0 = B.PixelInt8$imageData(this);
      pixel = pixel0;
      pixel._pixel_int8$_x = x;
      pixel._pixel_int8$_y = y;
      t1 = pixel.image;
      t2 = t1.numChannels;
      pixel._pixel_int8$_index = y * t1.width * t2 + x * t2;
      return pixel;
    },
    toString$0(_) {
      return "ImageDataInt8(" + this.width + ", " + this.height + ", " + this.numChannels + ")";
    },
    clear$1(_, c) {
      type$.nullable_Color._as(c);
    },
    clear$0(_) {
      return this.clear$1(0, null);
    }
  };
  B.ImageDataUint1.prototype = {
    ImageDataUint1$palette$3(width, height, palette) {
      var t1 = Math.max(this.rowStride * height, 1);
      t1 = new Uint8Array(t1);
      this.__ImageDataUint1_data_F !== $ && A.throwLateFieldAI("data");
      this.__ImageDataUint1_data_F = t1;
    },
    get$format() {
      return C.Format_0;
    },
    get$length(_) {
      var t1 = this.__ImageDataUint1_data_F;
      t1 === $ && A.throwLateFieldNI("data");
      return t1.byteLength;
    },
    get$buffer(_) {
      var t1 = this.__ImageDataUint1_data_F;
      t1 === $ && A.throwLateFieldNI("data");
      return D.NativeUint8List_methods.get$buffer(t1);
    },
    get$iterator(_) {
      return B.PixelUint1$imageData(this);
    },
    getPixel$3(x, y, pixel) {
      var t1, t2;
      pixel = B.PixelUint1$imageData(this);
      pixel._pixel_uint1$_x = x;
      pixel._pixel_uint1$_y = y;
      t1 = pixel.image;
      t2 = y * t1.rowStride;
      pixel._pixel_uint1$_rowOffset = t2;
      t1 = x * t1.numChannels;
      pixel._pixel_uint1$_index = t2 + D.JSInt_methods._shrOtherPositive$1(t1, 3);
      pixel._pixel_uint1$_bitIndex = t1 & 7;
      return pixel;
    },
    toString$0(_) {
      return "ImageDataUint1(" + this.width + ", " + this.height + ", " + this.numChannels + ")";
    },
    clear$1(_, c) {
      type$.nullable_Color._as(c);
    },
    clear$0(_) {
      return this.clear$1(0, null);
    },
    get$rowStride() {
      return this.rowStride;
    },
    get$palette() {
      return this.palette;
    }
  };
  B.ImageDataUint16.prototype = {
    get$format() {
      return C.Format_4;
    },
    get$buffer(_) {
      return D.NativeUint16List_methods.get$buffer(this.data);
    },
    get$rowStride() {
      return this.width * this.numChannels * 2;
    },
    get$iterator(_) {
      return B.PixelUint16$imageData(this);
    },
    get$length(_) {
      return this.data.byteLength;
    },
    getPixel$3(x, y, pixel) {
      var t1, t2,
        pixel0 = B.PixelUint16$imageData(this);
      pixel = pixel0;
      pixel._pixel_uint16$_x = x;
      pixel._pixel_uint16$_y = y;
      t1 = pixel.image;
      t2 = t1.numChannels;
      pixel._pixel_uint16$_index = y * t1.width * t2 + x * t2;
      return pixel;
    },
    toString$0(_) {
      return "ImageDataUint16(" + this.width + ", " + this.height + ", " + this.numChannels + ")";
    },
    clear$1(_, c) {
      type$.nullable_Color._as(c);
    },
    clear$0(_) {
      return this.clear$1(0, null);
    },
    get$palette() {
      return this.palette;
    }
  };
  B.ImageDataUint2.prototype = {
    ImageDataUint2$palette$3(width, height, palette) {
      var t1 = Math.max(this.rowStride * height, 1);
      t1 = new Uint8Array(t1);
      this.__ImageDataUint2_data_F !== $ && A.throwLateFieldAI("data");
      this.__ImageDataUint2_data_F = t1;
    },
    get$format() {
      return C.Format_1;
    },
    get$buffer(_) {
      var t1 = this.__ImageDataUint2_data_F;
      t1 === $ && A.throwLateFieldNI("data");
      return D.NativeUint8List_methods.get$buffer(t1);
    },
    get$iterator(_) {
      return B.PixelUint2$imageData(this);
    },
    get$length(_) {
      var t1 = this.__ImageDataUint2_data_F;
      t1 === $ && A.throwLateFieldNI("data");
      return t1.byteLength;
    },
    getPixel$3(x, y, pixel) {
      var bpp, t1, t2;
      pixel = B.PixelUint2$imageData(this);
      pixel._pixel_uint2$_x = x;
      pixel._pixel_uint2$_y = y;
      bpp = pixel.get$bitsPerPixel();
      t1 = pixel._pixel_uint2$_y * pixel.image.rowStride;
      pixel._rowOffset = t1;
      t2 = pixel._pixel_uint2$_x * bpp;
      pixel._pixel_uint2$_index = t1 + D.JSInt_methods._shrOtherPositive$1(t2, 3);
      pixel._pixel_uint2$_bitIndex = t2 & 7;
      return pixel;
    },
    toString$0(_) {
      return "ImageDataUint2(" + this.width + ", " + this.height + ", " + this.numChannels + ")";
    },
    clear$1(_, c) {
      type$.nullable_Color._as(c);
    },
    clear$0(_) {
      return this.clear$1(0, null);
    },
    get$rowStride() {
      return this.rowStride;
    },
    get$palette() {
      return this.palette;
    }
  };
  B.ImageDataUint32.prototype = {
    get$format() {
      return C.Format_5;
    },
    get$buffer(_) {
      return D.NativeUint32List_methods.get$buffer(this.data);
    },
    get$rowStride() {
      return this.width * this.numChannels * 4;
    },
    get$iterator(_) {
      return B.PixelUint32$imageData(this);
    },
    get$length(_) {
      return this.data.byteLength;
    },
    getPixel$3(x, y, pixel) {
      var t1, t2,
        pixel0 = B.PixelUint32$imageData(this);
      pixel = pixel0;
      pixel._pixel_uint32$_x = x;
      pixel._pixel_uint32$_y = y;
      t1 = pixel.image;
      t2 = t1.numChannels;
      pixel._pixel_uint32$_index = y * t1.width * t2 + x * t2;
      return pixel;
    },
    toString$0(_) {
      return "ImageDataUint32(" + this.width + ", " + this.height + ", " + this.numChannels + ")";
    },
    clear$1(_, c) {
      type$.nullable_Color._as(c);
    },
    clear$0(_) {
      return this.clear$1(0, null);
    }
  };
  B.ImageDataUint4.prototype = {
    ImageDataUint4$palette$3(width, height, palette) {
      var t1 = Math.max(this.rowStride * height, 1);
      t1 = new Uint8Array(t1);
      this.__ImageDataUint4_data_F !== $ && A.throwLateFieldAI("data");
      this.__ImageDataUint4_data_F = t1;
    },
    get$format() {
      return C.Format_2;
    },
    get$buffer(_) {
      var t1 = this.__ImageDataUint4_data_F;
      t1 === $ && A.throwLateFieldNI("data");
      return D.NativeUint8List_methods.get$buffer(t1);
    },
    get$iterator(_) {
      return B.PixelUint4$imageData(this);
    },
    get$length(_) {
      var t1 = this.__ImageDataUint4_data_F;
      t1 === $ && A.throwLateFieldNI("data");
      return t1.byteLength;
    },
    getPixel$3(x, y, pixel) {
      var t1, bpp, rowStride;
      pixel = B.PixelUint4$imageData(this);
      pixel._pixel_uint4$_x = x;
      pixel._pixel_uint4$_y = y;
      t1 = pixel.image;
      bpp = t1.numChannels * 4;
      rowStride = t1.rowStride;
      if (bpp === 4)
        t1 = y * rowStride + D.JSInt_methods._shrOtherPositive$1(x, 1);
      else if (bpp === 8)
        t1 = y * t1.width + x;
      else {
        t1 = y * rowStride;
        t1 = bpp === 16 ? t1 + (x << 1 >>> 0) : t1 + D.JSInt_methods._shrOtherPositive$1(x * bpp, 3);
      }
      pixel._pixel_uint4$_index = t1;
      t1 = x * bpp;
      pixel._bitIndex = bpp > 7 ? t1 & 4 : t1 & 7;
      return pixel;
    },
    toString$0(_) {
      return "ImageDataUint4(" + this.width + ", " + this.height + ", " + this.numChannels + ")";
    },
    clear$1(_, c) {
      type$.nullable_Color._as(c);
    },
    clear$0(_) {
      return this.clear$1(0, null);
    },
    get$rowStride() {
      return this.rowStride;
    },
    get$palette() {
      return this.palette;
    }
  };
  B.ImageDataUint8.prototype = {
    get$format() {
      return C.Format_3;
    },
    get$buffer(_) {
      return D.NativeUint8List_methods.get$buffer(this.data);
    },
    get$rowStride() {
      return this.width * this.numChannels;
    },
    get$iterator(_) {
      return B.PixelUint8$imageData(this);
    },
    get$length(_) {
      return this.data.byteLength;
    },
    getPixel$3(x, y, pixel) {
      var t1, t2,
        pixel0 = B.PixelUint8$imageData(this);
      pixel = pixel0;
      pixel._pixel_uint8$_x = x;
      pixel._pixel_uint8$_y = y;
      t1 = pixel.image;
      t2 = t1.numChannels;
      pixel._pixel_uint8$_index = y * t1.width * t2 + x * t2;
      return pixel;
    },
    toString$0(_) {
      return "ImageDataUint8(" + this.width + ", " + this.height + ", " + this.numChannels + ")";
    },
    clear$1(_, c) {
      var t1, u16, u32, p, t2, t3, t4, t5, _this = this;
      type$.nullable_Color._as(c);
      t1 = _this.numChannels;
      if (t1 === 1) {
        t1 = _this.data;
        D.NativeUint8List_methods.fillRange$3(t1, 0, t1.length, 0);
      } else if (t1 === 2) {
        u16 = J.asUint16List$2$x(D.NativeUint8List_methods.get$buffer(_this.data), 0, null);
        D.NativeUint16List_methods.fillRange$3(u16, 0, u16.length, 0);
      } else if (t1 === 4) {
        u32 = J.asUint32List$2$x(D.NativeUint8List_methods.get$buffer(_this.data), 0, null);
        D.NativeUint32List_methods.fillRange$3(u32, 0, u32.length, 0);
      } else
        for (p = B.PixelUint8$imageData(_this), t1 = p.image, t2 = t1.numChannels > 0, t1 = t1.data, t3 = t1.$flags | 0; p.moveNext$0();) {
          if (t2) {
            t4 = p._pixel_uint8$_index;
            t5 = D.JSNumber_methods.toInt$0(D.JSInt_methods.clamp$2(0, 0, 255));
            t3 & 2 && A.throwUnsupportedOperation(t1);
            if (!(t4 >= 0 && t4 < t1.length))
              return A.ioore(t1, t4);
            t1[t4] = t5;
          }
          p.set$g(0);
          p.set$b(0, 0);
        }
    },
    clear$0(_) {
      return this.clear$1(0, null);
    },
    get$palette() {
      return this.palette;
    }
  };
  B.PixelFloat16.prototype = {
    clone$0(_) {
      var _this = this;
      return new B.PixelFloat16(_this._pixel_float16$_x, _this._pixel_float16$_y, _this._pixel_float16$_index, _this.image);
    },
    get$format() {
      return C.Format_9;
    },
    get$length(_) {
      return this.image.numChannels;
    },
    get$palette() {
      return null;
    },
    get$current(_) {
      return this;
    },
    moveNext$0() {
      var t2, _this = this,
        t1 = _this.image;
      if (++_this._pixel_float16$_x === t1.width) {
        _this._pixel_float16$_x = 0;
        if (++_this._pixel_float16$_y === t1.height)
          return false;
      }
      t2 = _this._pixel_float16$_index + t1.numChannels;
      _this._pixel_float16$_index = t2;
      return t2 < t1.data.length;
    },
    $index(_, i) {
      var t1, t2;
      A._asInt(i);
      t1 = this.image;
      if (i < t1.numChannels) {
        t1 = t1.data;
        t2 = this._pixel_float16$_index + i;
        if (!(t2 >= 0 && t2 < t1.length))
          return A.ioore(t1, t2);
        t2 = t1[t2];
        t1 = $.Float16__toFloatFloat32Data;
        t1 = t1 != null ? t1 : B.Float16__initialize();
        if (!(t2 < t1.length))
          return A.ioore(t1, t2);
        t2 = t1[t2];
        t1 = t2;
      } else
        t1 = 0;
      return t1;
    },
    $indexSet(_, i, value) {
      var t1, t2, t3;
      A._asInt(i);
      A._asNum(value);
      t1 = this.image;
      if (i < t1.numChannels) {
        t1 = t1.data;
        t2 = this._pixel_float16$_index + i;
        t3 = B.Float16_doubleToFloat16(value);
        t1.$flags & 2 && A.throwUnsupportedOperation(t1);
        if (!(t2 >= 0 && t2 < t1.length))
          return A.ioore(t1, t2);
        t1[t2] = t3;
      }
    },
    get$r(_) {
      var t2,
        t1 = this.image;
      if (t1.numChannels > 0) {
        t1 = t1.data;
        t2 = this._pixel_float16$_index;
        if (!(t2 >= 0 && t2 < t1.length))
          return A.ioore(t1, t2);
        t2 = t1[t2];
        t1 = $.Float16__toFloatFloat32Data;
        t1 = t1 != null ? t1 : B.Float16__initialize();
        if (!(t2 < t1.length))
          return A.ioore(t1, t2);
        t2 = t1[t2];
        t1 = t2;
      } else
        t1 = 0;
      return t1;
    },
    set$r(_, r) {
      var t2, t3,
        t1 = this.image;
      if (t1.numChannels > 0) {
        t1 = t1.data;
        t2 = this._pixel_float16$_index;
        t3 = B.Float16_doubleToFloat16(r);
        t1.$flags & 2 && A.throwUnsupportedOperation(t1);
        if (!(t2 >= 0 && t2 < t1.length))
          return A.ioore(t1, t2);
        t1[t2] = t3;
      }
    },
    get$g() {
      var t2,
        t1 = this.image;
      if (t1.numChannels > 1) {
        t1 = t1.data;
        t2 = this._pixel_float16$_index + 1;
        if (!(t2 >= 0 && t2 < t1.length))
          return A.ioore(t1, t2);
        t2 = t1[t2];
        t1 = $.Float16__toFloatFloat32Data;
        t1 = t1 != null ? t1 : B.Float16__initialize();
        if (!(t2 < t1.length))
          return A.ioore(t1, t2);
        t2 = t1[t2];
        t1 = t2;
      } else
        t1 = 0;
      return t1;
    },
    set$g(g) {
      var t2, t3,
        t1 = this.image;
      if (t1.numChannels > 1) {
        t1 = t1.data;
        t2 = this._pixel_float16$_index + 1;
        t3 = B.Float16_doubleToFloat16(g);
        t1.$flags & 2 && A.throwUnsupportedOperation(t1);
        if (!(t2 >= 0 && t2 < t1.length))
          return A.ioore(t1, t2);
        t1[t2] = t3;
      }
    },
    get$b(_) {
      var t2,
        t1 = this.image;
      if (t1.numChannels > 2) {
        t1 = t1.data;
        t2 = this._pixel_float16$_index + 2;
        if (!(t2 >= 0 && t2 < t1.length))
          return A.ioore(t1, t2);
        t2 = t1[t2];
        t1 = $.Float16__toFloatFloat32Data;
        t1 = t1 != null ? t1 : B.Float16__initialize();
        if (!(t2 < t1.length))
          return A.ioore(t1, t2);
        t2 = t1[t2];
        t1 = t2;
      } else
        t1 = 0;
      return t1;
    },
    set$b(_, b) {
      var t2, t3,
        t1 = this.image;
      if (t1.numChannels > 2) {
        t1 = t1.data;
        t2 = this._pixel_float16$_index + 2;
        t3 = B.Float16_doubleToFloat16(b);
        t1.$flags & 2 && A.throwUnsupportedOperation(t1);
        if (!(t2 >= 0 && t2 < t1.length))
          return A.ioore(t1, t2);
        t1[t2] = t3;
      }
    },
    get$a(_) {
      var t2,
        t1 = this.image;
      if (t1.numChannels > 3) {
        t1 = t1.data;
        t2 = this._pixel_float16$_index + 3;
        if (!(t2 >= 0 && t2 < t1.length))
          return A.ioore(t1, t2);
        t2 = t1[t2];
        t1 = $.Float16__toFloatFloat32Data;
        t1 = t1 != null ? t1 : B.Float16__initialize();
        if (!(t2 < t1.length))
          return A.ioore(t1, t2);
        t2 = t1[t2];
        t1 = t2;
      } else
        t1 = 0;
      return t1;
    },
    set$a(_, a) {
      var d, t2, t3,
        t1 = this.image;
      if (t1.numChannels > 3) {
        d = this.get$g();
        t1 = t1.data;
        t2 = this._pixel_float16$_index + 3;
        t3 = B.Float16_doubleToFloat16(d);
        t1.$flags & 2 && A.throwUnsupportedOperation(t1);
        if (!(t2 >= 0 && t2 < t1.length))
          return A.ioore(t1, t2);
        t1[t2] = t3;
      }
    },
    get$aNormalized() {
      return this.get$a(0) / 1;
    },
    get$luminance() {
      return B.getLuminance(this);
    },
    get$iterator(_) {
      return new B.ChannelIterator(this);
    },
    $eq(_, other) {
      var t1, t2, t3, t4, t5, _this = this;
      if (other == null)
        return false;
      if (other instanceof B.PixelFloat16)
        return A.Object_hashAll(A.List_List$of(_this, true, A._instanceType(_this)._eval$1("Iterable.E"))) === A.Object_hashAll(A.List_List$of(other, true, A._instanceType(other)._eval$1("Iterable.E")));
      if (type$.List_int._is(other)) {
        t1 = J.getInterceptor$asx(other);
        t2 = _this.image;
        t3 = t2.numChannels;
        if (t1.get$length(other) !== t3)
          return false;
        t2 = t2.data;
        t4 = _this._pixel_float16$_index;
        t5 = t2.length;
        if (!(t4 >= 0 && t4 < t5))
          return A.ioore(t2, t4);
        if (t2[t4] !== t1.$index(other, 0))
          return false;
        if (t3 > 1) {
          t4 = _this._pixel_float16$_index + 1;
          if (!(t4 >= 0 && t4 < t5))
            return A.ioore(t2, t4);
          if (t2[t4] !== t1.$index(other, 1))
            return false;
          if (t3 > 2) {
            t4 = _this._pixel_float16$_index + 2;
            if (!(t4 >= 0 && t4 < t5))
              return A.ioore(t2, t4);
            if (t2[t4] !== t1.$index(other, 2))
              return false;
            if (t3 > 3) {
              t3 = _this._pixel_float16$_index + 3;
              if (!(t3 >= 0 && t3 < t5))
                return A.ioore(t2, t3);
              if (t2[t3] !== t1.$index(other, 3))
                return false;
            }
          }
        }
        return true;
      }
      return false;
    },
    get$hashCode(_) {
      return A.Object_hashAll(A.List_List$of(this, true, A._instanceType(this)._eval$1("Iterable.E")));
    },
    convert$1$format(format) {
      return B.convertColor(this, null, format, null);
    },
    $isIterator: 1,
    $isColor1: 1,
    $isPixel: 1
  };
  B.PixelFloat32.prototype = {
    clone$0(_) {
      var _this = this;
      return new B.PixelFloat32(_this._pixel_float32$_x, _this._pixel_float32$_y, _this._pixel_float32$_index, _this.image);
    },
    get$length(_) {
      return this.image.numChannels;
    },
    get$palette() {
      return null;
    },
    get$format() {
      return C.Format_10;
    },
    get$current(_) {
      return this;
    },
    moveNext$0() {
      var t2, _this = this,
        t1 = _this.image;
      if (++_this._pixel_float32$_x === t1.width) {
        _this._pixel_float32$_x = 0;
        if (++_this._pixel_float32$_y === t1.height)
          return false;
      }
      t2 = _this._pixel_float32$_index + t1.numChannels;
      _this._pixel_float32$_index = t2;
      return t2 < t1.data.length;
    },
    $index(_, i) {
      var t1, t2;
      A._asInt(i);
      t1 = this.image;
      if (i < t1.numChannels) {
        t1 = t1.data;
        t2 = this._pixel_float32$_index + i;
        if (!(t2 >= 0 && t2 < t1.length))
          return A.ioore(t1, t2);
        t2 = t1[t2];
        t1 = t2;
      } else
        t1 = 0;
      return t1;
    },
    $indexSet(_, i, value) {
      var t1, t2;
      A._asInt(i);
      A._asNum(value);
      t1 = this.image;
      if (i < t1.numChannels) {
        t1 = t1.data;
        t2 = this._pixel_float32$_index + i;
        t1.$flags & 2 && A.throwUnsupportedOperation(t1);
        if (!(t2 >= 0 && t2 < t1.length))
          return A.ioore(t1, t2);
        t1[t2] = value;
      }
    },
    get$r(_) {
      var t2,
        t1 = this.image;
      if (t1.numChannels > 0) {
        t1 = t1.data;
        t2 = this._pixel_float32$_index;
        if (!(t2 >= 0 && t2 < t1.length))
          return A.ioore(t1, t2);
        t2 = t1[t2];
        t1 = t2;
      } else
        t1 = 0;
      return t1;
    },
    set$r(_, r) {
      var t2,
        t1 = this.image;
      if (t1.numChannels > 0) {
        t1 = t1.data;
        t2 = this._pixel_float32$_index;
        t1.$flags & 2 && A.throwUnsupportedOperation(t1);
        if (!(t2 >= 0 && t2 < t1.length))
          return A.ioore(t1, t2);
        t1[t2] = r;
      }
    },
    get$g() {
      var t2,
        t1 = this.image;
      if (t1.numChannels > 1) {
        t1 = t1.data;
        t2 = this._pixel_float32$_index + 1;
        if (!(t2 >= 0 && t2 < t1.length))
          return A.ioore(t1, t2);
        t2 = t1[t2];
        t1 = t2;
      } else
        t1 = 0;
      return t1;
    },
    set$g(g) {
      var t2,
        t1 = this.image;
      if (t1.numChannels > 1) {
        t1 = t1.data;
        t2 = this._pixel_float32$_index + 1;
        t1.$flags & 2 && A.throwUnsupportedOperation(t1);
        if (!(t2 >= 0 && t2 < t1.length))
          return A.ioore(t1, t2);
        t1[t2] = g;
      }
    },
    get$b(_) {
      var t2,
        t1 = this.image;
      if (t1.numChannels > 2) {
        t1 = t1.data;
        t2 = this._pixel_float32$_index + 2;
        if (!(t2 >= 0 && t2 < t1.length))
          return A.ioore(t1, t2);
        t2 = t1[t2];
        t1 = t2;
      } else
        t1 = 0;
      return t1;
    },
    set$b(_, b) {
      var t2,
        t1 = this.image;
      if (t1.numChannels > 2) {
        t1 = t1.data;
        t2 = this._pixel_float32$_index + 2;
        t1.$flags & 2 && A.throwUnsupportedOperation(t1);
        if (!(t2 >= 0 && t2 < t1.length))
          return A.ioore(t1, t2);
        t1[t2] = b;
      }
    },
    get$a(_) {
      var t2,
        t1 = this.image;
      if (t1.numChannels > 3) {
        t1 = t1.data;
        t2 = this._pixel_float32$_index + 3;
        if (!(t2 >= 0 && t2 < t1.length))
          return A.ioore(t1, t2);
        t2 = t1[t2];
        t1 = t2;
      } else
        t1 = 1;
      return t1;
    },
    set$a(_, a) {
      var t2,
        t1 = this.image;
      if (t1.numChannels > 3) {
        t1 = t1.data;
        t2 = this._pixel_float32$_index + 3;
        t1.$flags & 2 && A.throwUnsupportedOperation(t1);
        if (!(t2 >= 0 && t2 < t1.length))
          return A.ioore(t1, t2);
        t1[t2] = a;
      }
    },
    get$aNormalized() {
      return this.get$a(0) / 1;
    },
    get$luminance() {
      return B.getLuminance(this);
    },
    get$iterator(_) {
      return new B.ChannelIterator(this);
    },
    $eq(_, other) {
      var t1, t2, t3, t4, t5, _this = this;
      if (other == null)
        return false;
      if (other instanceof B.PixelFloat32)
        return A.Object_hashAll(A.List_List$of(_this, true, A._instanceType(_this)._eval$1("Iterable.E"))) === A.Object_hashAll(A.List_List$of(other, true, A._instanceType(other)._eval$1("Iterable.E")));
      if (type$.List_int._is(other)) {
        t1 = J.getInterceptor$asx(other);
        t2 = _this.image;
        t3 = t2.numChannels;
        if (t1.get$length(other) !== t3)
          return false;
        t2 = t2.data;
        t4 = _this._pixel_float32$_index;
        t5 = t2.length;
        if (!(t4 >= 0 && t4 < t5))
          return A.ioore(t2, t4);
        if (t2[t4] !== t1.$index(other, 0))
          return false;
        if (t3 > 1) {
          t4 = _this._pixel_float32$_index + 1;
          if (!(t4 >= 0 && t4 < t5))
            return A.ioore(t2, t4);
          if (t2[t4] !== t1.$index(other, 1))
            return false;
          if (t3 > 2) {
            t4 = _this._pixel_float32$_index + 2;
            if (!(t4 >= 0 && t4 < t5))
              return A.ioore(t2, t4);
            if (t2[t4] !== t1.$index(other, 2))
              return false;
            if (t3 > 3) {
              t3 = _this._pixel_float32$_index + 3;
              if (!(t3 >= 0 && t3 < t5))
                return A.ioore(t2, t3);
              if (t2[t3] !== t1.$index(other, 3))
                return false;
            }
          }
        }
        return true;
      }
      return false;
    },
    get$hashCode(_) {
      return A.Object_hashAll(A.List_List$of(this, true, A._instanceType(this)._eval$1("Iterable.E")));
    },
    convert$1$format(format) {
      return B.convertColor(this, null, format, null);
    },
    $isIterator: 1,
    $isColor1: 1,
    $isPixel: 1
  };
  B.PixelFloat64.prototype = {
    clone$0(_) {
      var _this = this;
      return new B.PixelFloat64(_this._pixel_float64$_x, _this._pixel_float64$_y, _this._pixel_float64$_index, _this.image);
    },
    get$length(_) {
      return this.image.numChannels;
    },
    get$palette() {
      return null;
    },
    get$format() {
      return C.Format_11;
    },
    get$current(_) {
      return this;
    },
    moveNext$0() {
      var t2, _this = this,
        t1 = _this.image;
      if (++_this._pixel_float64$_x === t1.width) {
        _this._pixel_float64$_x = 0;
        if (++_this._pixel_float64$_y === t1.height)
          return false;
      }
      t2 = _this._pixel_float64$_index + t1.numChannels;
      _this._pixel_float64$_index = t2;
      return t2 < t1.data.length;
    },
    $index(_, i) {
      var t1, t2;
      A._asInt(i);
      t1 = this.image;
      if (i < t1.numChannels) {
        t1 = t1.data;
        t2 = this._pixel_float64$_index + i;
        if (!(t2 >= 0 && t2 < t1.length))
          return A.ioore(t1, t2);
        t2 = t1[t2];
        t1 = t2;
      } else
        t1 = 0;
      return t1;
    },
    $indexSet(_, i, value) {
      var t1, t2;
      A._asInt(i);
      A._asNum(value);
      t1 = this.image;
      if (i < t1.numChannels) {
        t1 = t1.data;
        t2 = this._pixel_float64$_index + i;
        t1.$flags & 2 && A.throwUnsupportedOperation(t1);
        if (!(t2 >= 0 && t2 < t1.length))
          return A.ioore(t1, t2);
        t1[t2] = value;
      }
    },
    get$r(_) {
      var t2,
        t1 = this.image;
      if (t1.numChannels > 0) {
        t1 = t1.data;
        t2 = this._pixel_float64$_index;
        if (!(t2 >= 0 && t2 < t1.length))
          return A.ioore(t1, t2);
        t2 = t1[t2];
        t1 = t2;
      } else
        t1 = 0;
      return t1;
    },
    set$r(_, r) {
      var t2,
        t1 = this.image;
      if (t1.numChannels > 0) {
        t1 = t1.data;
        t2 = this._pixel_float64$_index;
        t1.$flags & 2 && A.throwUnsupportedOperation(t1);
        if (!(t2 >= 0 && t2 < t1.length))
          return A.ioore(t1, t2);
        t1[t2] = r;
      }
    },
    get$g() {
      var t2,
        t1 = this.image;
      if (t1.numChannels > 1) {
        t1 = t1.data;
        t2 = this._pixel_float64$_index + 1;
        if (!(t2 >= 0 && t2 < t1.length))
          return A.ioore(t1, t2);
        t2 = t1[t2];
        t1 = t2;
      } else
        t1 = 0;
      return t1;
    },
    set$g(g) {
      var t2,
        t1 = this.image;
      if (t1.numChannels > 1) {
        t1 = t1.data;
        t2 = this._pixel_float64$_index + 1;
        t1.$flags & 2 && A.throwUnsupportedOperation(t1);
        if (!(t2 >= 0 && t2 < t1.length))
          return A.ioore(t1, t2);
        t1[t2] = g;
      }
    },
    get$b(_) {
      var t2,
        t1 = this.image;
      if (t1.numChannels > 2) {
        t1 = t1.data;
        t2 = this._pixel_float64$_index + 2;
        if (!(t2 >= 0 && t2 < t1.length))
          return A.ioore(t1, t2);
        t2 = t1[t2];
        t1 = t2;
      } else
        t1 = 0;
      return t1;
    },
    set$b(_, b) {
      var t2,
        t1 = this.image;
      if (t1.numChannels > 2) {
        t1 = t1.data;
        t2 = this._pixel_float64$_index + 2;
        t1.$flags & 2 && A.throwUnsupportedOperation(t1);
        if (!(t2 >= 0 && t2 < t1.length))
          return A.ioore(t1, t2);
        t1[t2] = b;
      }
    },
    get$a(_) {
      var t2,
        t1 = this.image;
      if (t1.numChannels > 3) {
        t1 = t1.data;
        t2 = this._pixel_float64$_index + 3;
        if (!(t2 >= 0 && t2 < t1.length))
          return A.ioore(t1, t2);
        t2 = t1[t2];
        t1 = t2;
      } else
        t1 = 0;
      return t1;
    },
    set$a(_, a) {
      var t2,
        t1 = this.image;
      if (t1.numChannels > 3) {
        t1 = t1.data;
        t2 = this._pixel_float64$_index + 3;
        t1.$flags & 2 && A.throwUnsupportedOperation(t1);
        if (!(t2 >= 0 && t2 < t1.length))
          return A.ioore(t1, t2);
        t1[t2] = a;
      }
    },
    get$aNormalized() {
      return this.get$a(0) / 1;
    },
    get$luminance() {
      return B.getLuminance(this);
    },
    get$iterator(_) {
      return new B.ChannelIterator(this);
    },
    $eq(_, other) {
      var t1, t2, t3, t4, t5, _this = this;
      if (other == null)
        return false;
      if (other instanceof B.PixelFloat64)
        return A.Object_hashAll(A.List_List$of(_this, true, A._instanceType(_this)._eval$1("Iterable.E"))) === A.Object_hashAll(A.List_List$of(other, true, A._instanceType(other)._eval$1("Iterable.E")));
      if (type$.List_int._is(other)) {
        t1 = J.getInterceptor$asx(other);
        t2 = _this.image;
        t3 = t2.numChannels;
        if (t1.get$length(other) !== t3)
          return false;
        t2 = t2.data;
        t4 = _this._pixel_float64$_index;
        t5 = t2.length;
        if (!(t4 >= 0 && t4 < t5))
          return A.ioore(t2, t4);
        if (t2[t4] !== t1.$index(other, 0))
          return false;
        if (t3 > 1) {
          t4 = _this._pixel_float64$_index + 1;
          if (!(t4 >= 0 && t4 < t5))
            return A.ioore(t2, t4);
          if (t2[t4] !== t1.$index(other, 1))
            return false;
          if (t3 > 2) {
            t4 = _this._pixel_float64$_index + 2;
            if (!(t4 >= 0 && t4 < t5))
              return A.ioore(t2, t4);
            if (t2[t4] !== t1.$index(other, 2))
              return false;
            if (t3 > 3) {
              t3 = _this._pixel_float64$_index + 3;
              if (!(t3 >= 0 && t3 < t5))
                return A.ioore(t2, t3);
              if (t2[t3] !== t1.$index(other, 3))
                return false;
            }
          }
        }
        return true;
      }
      return false;
    },
    get$hashCode(_) {
      return A.Object_hashAll(A.List_List$of(this, true, A._instanceType(this)._eval$1("Iterable.E")));
    },
    convert$1$format(format) {
      return B.convertColor(this, null, format, null);
    },
    $isIterator: 1,
    $isColor1: 1,
    $isPixel: 1
  };
  B.PixelInt16.prototype = {
    clone$0(_) {
      var _this = this;
      return new B.PixelInt16(_this._pixel_int16$_x, _this._pixel_int16$_y, _this._pixel_int16$_index, _this.image);
    },
    get$length(_) {
      return this.image.numChannels;
    },
    get$palette() {
      return null;
    },
    get$format() {
      return C.Format_7;
    },
    get$current(_) {
      return this;
    },
    moveNext$0() {
      var t2, _this = this,
        t1 = _this.image;
      if (++_this._pixel_int16$_x === t1.width) {
        _this._pixel_int16$_x = 0;
        if (++_this._pixel_int16$_y === t1.height)
          return false;
      }
      t2 = _this._pixel_int16$_index + t1.numChannels;
      _this._pixel_int16$_index = t2;
      return t2 < t1.data.length;
    },
    $index(_, i) {
      var t1, t2;
      A._asInt(i);
      t1 = this.image;
      if (i < t1.numChannels) {
        t1 = t1.data;
        t2 = this._pixel_int16$_index + i;
        if (!(t2 >= 0 && t2 < t1.length))
          return A.ioore(t1, t2);
        t2 = t1[t2];
        t1 = t2;
      } else
        t1 = 0;
      return t1;
    },
    $indexSet(_, i, value) {
      var t1, t2, t3;
      A._asInt(i);
      A._asNum(value);
      t1 = this.image;
      if (i < t1.numChannels) {
        t1 = t1.data;
        t2 = this._pixel_int16$_index + i;
        t3 = D.JSNumber_methods.toInt$0(value);
        t1.$flags & 2 && A.throwUnsupportedOperation(t1);
        if (!(t2 >= 0 && t2 < t1.length))
          return A.ioore(t1, t2);
        t1[t2] = t3;
      }
    },
    get$r(_) {
      var t2,
        t1 = this.image;
      if (t1.numChannels > 0) {
        t1 = t1.data;
        t2 = this._pixel_int16$_index;
        if (!(t2 >= 0 && t2 < t1.length))
          return A.ioore(t1, t2);
        t2 = t1[t2];
        t1 = t2;
      } else
        t1 = 0;
      return t1;
    },
    set$r(_, r) {
      var t2, t3,
        t1 = this.image;
      if (t1.numChannels > 0) {
        t1 = t1.data;
        t2 = this._pixel_int16$_index;
        t3 = D.JSNumber_methods.toInt$0(r);
        t1.$flags & 2 && A.throwUnsupportedOperation(t1);
        if (!(t2 >= 0 && t2 < t1.length))
          return A.ioore(t1, t2);
        t1[t2] = t3;
      }
    },
    get$g() {
      var t2,
        t1 = this.image;
      if (t1.numChannels > 1) {
        t1 = t1.data;
        t2 = this._pixel_int16$_index + 1;
        if (!(t2 >= 0 && t2 < t1.length))
          return A.ioore(t1, t2);
        t2 = t1[t2];
        t1 = t2;
      } else
        t1 = 0;
      return t1;
    },
    set$g(g) {
      var t2, t3,
        t1 = this.image;
      if (t1.numChannels > 1) {
        t1 = t1.data;
        t2 = this._pixel_int16$_index + 1;
        t3 = D.JSNumber_methods.toInt$0(g);
        t1.$flags & 2 && A.throwUnsupportedOperation(t1);
        if (!(t2 >= 0 && t2 < t1.length))
          return A.ioore(t1, t2);
        t1[t2] = t3;
      }
    },
    get$b(_) {
      var t2,
        t1 = this.image;
      if (t1.numChannels > 2) {
        t1 = t1.data;
        t2 = this._pixel_int16$_index + 2;
        if (!(t2 >= 0 && t2 < t1.length))
          return A.ioore(t1, t2);
        t2 = t1[t2];
        t1 = t2;
      } else
        t1 = 0;
      return t1;
    },
    set$b(_, b) {
      var t2, t3,
        t1 = this.image;
      if (t1.numChannels > 2) {
        t1 = t1.data;
        t2 = this._pixel_int16$_index + 2;
        t3 = D.JSNumber_methods.toInt$0(b);
        t1.$flags & 2 && A.throwUnsupportedOperation(t1);
        if (!(t2 >= 0 && t2 < t1.length))
          return A.ioore(t1, t2);
        t1[t2] = t3;
      }
    },
    get$a(_) {
      var t2,
        t1 = this.image;
      if (t1.numChannels > 3) {
        t1 = t1.data;
        t2 = this._pixel_int16$_index + 3;
        if (!(t2 >= 0 && t2 < t1.length))
          return A.ioore(t1, t2);
        t2 = t1[t2];
        t1 = t2;
      } else
        t1 = 0;
      return t1;
    },
    set$a(_, a) {
      var t2, t3,
        t1 = this.image;
      if (t1.numChannels > 3) {
        t1 = t1.data;
        t2 = this._pixel_int16$_index + 3;
        t3 = D.JSNumber_methods.toInt$0(a);
        t1.$flags & 2 && A.throwUnsupportedOperation(t1);
        if (!(t2 >= 0 && t2 < t1.length))
          return A.ioore(t1, t2);
        t1[t2] = t3;
      }
    },
    get$aNormalized() {
      return this.get$a(0) / 32767;
    },
    get$luminance() {
      return B.getLuminance(this);
    },
    get$iterator(_) {
      return new B.ChannelIterator(this);
    },
    $eq(_, other) {
      var t1, t2, t3, t4, t5, _this = this;
      if (other == null)
        return false;
      if (other instanceof B.PixelInt16)
        return A.Object_hashAll(A.List_List$of(_this, true, A._instanceType(_this)._eval$1("Iterable.E"))) === A.Object_hashAll(A.List_List$of(other, true, A._instanceType(other)._eval$1("Iterable.E")));
      if (type$.List_int._is(other)) {
        t1 = J.getInterceptor$asx(other);
        t2 = _this.image;
        t3 = t2.numChannels;
        if (t1.get$length(other) !== t3)
          return false;
        t2 = t2.data;
        t4 = _this._pixel_int16$_index;
        t5 = t2.length;
        if (!(t4 >= 0 && t4 < t5))
          return A.ioore(t2, t4);
        if (t2[t4] !== t1.$index(other, 0))
          return false;
        if (t3 > 1) {
          t4 = _this._pixel_int16$_index + 1;
          if (!(t4 >= 0 && t4 < t5))
            return A.ioore(t2, t4);
          if (t2[t4] !== t1.$index(other, 1))
            return false;
          if (t3 > 2) {
            t4 = _this._pixel_int16$_index + 2;
            if (!(t4 >= 0 && t4 < t5))
              return A.ioore(t2, t4);
            if (t2[t4] !== t1.$index(other, 2))
              return false;
            if (t3 > 3) {
              t3 = _this._pixel_int16$_index + 3;
              if (!(t3 >= 0 && t3 < t5))
                return A.ioore(t2, t3);
              if (t2[t3] !== t1.$index(other, 3))
                return false;
            }
          }
        }
        return true;
      }
      return false;
    },
    get$hashCode(_) {
      return A.Object_hashAll(A.List_List$of(this, true, A._instanceType(this)._eval$1("Iterable.E")));
    },
    convert$1$format(format) {
      return B.convertColor(this, null, format, null);
    },
    $isIterator: 1,
    $isColor1: 1,
    $isPixel: 1
  };
  B.PixelInt32.prototype = {
    clone$0(_) {
      var _this = this;
      return new B.PixelInt32(_this._pixel_int32$_x, _this._pixel_int32$_y, _this._pixel_int32$_index, _this.image);
    },
    get$length(_) {
      return this.image.numChannels;
    },
    get$palette() {
      return null;
    },
    get$format() {
      return C.Format_8;
    },
    get$current(_) {
      return this;
    },
    moveNext$0() {
      var t2, _this = this,
        t1 = _this.image;
      if (++_this._pixel_int32$_x === t1.width) {
        _this._pixel_int32$_x = 0;
        if (++_this._pixel_int32$_y === t1.height)
          return false;
      }
      t2 = _this._pixel_int32$_index + t1.numChannels;
      _this._pixel_int32$_index = t2;
      return t2 < t1.data.length;
    },
    $index(_, i) {
      var t1, t2;
      A._asInt(i);
      t1 = this.image;
      if (i < t1.numChannels) {
        t1 = t1.data;
        t2 = this._pixel_int32$_index + i;
        if (!(t2 >= 0 && t2 < t1.length))
          return A.ioore(t1, t2);
        t2 = t1[t2];
        t1 = t2;
      } else
        t1 = 0;
      return t1;
    },
    $indexSet(_, i, value) {
      var t1, t2, t3;
      A._asInt(i);
      A._asNum(value);
      t1 = this.image;
      if (i < t1.numChannels) {
        t1 = t1.data;
        t2 = this._pixel_int32$_index + i;
        t3 = D.JSNumber_methods.toInt$0(value);
        t1.$flags & 2 && A.throwUnsupportedOperation(t1);
        if (!(t2 >= 0 && t2 < t1.length))
          return A.ioore(t1, t2);
        t1[t2] = t3;
      }
    },
    get$r(_) {
      var t2,
        t1 = this.image;
      if (t1.numChannels > 0) {
        t1 = t1.data;
        t2 = this._pixel_int32$_index;
        if (!(t2 >= 0 && t2 < t1.length))
          return A.ioore(t1, t2);
        t2 = t1[t2];
        t1 = t2;
      } else
        t1 = 0;
      return t1;
    },
    set$r(_, r) {
      var t2, t3,
        t1 = this.image;
      if (t1.numChannels > 0) {
        t1 = t1.data;
        t2 = this._pixel_int32$_index;
        t3 = D.JSNumber_methods.toInt$0(r);
        t1.$flags & 2 && A.throwUnsupportedOperation(t1);
        if (!(t2 >= 0 && t2 < t1.length))
          return A.ioore(t1, t2);
        t1[t2] = t3;
      }
    },
    get$g() {
      var t2,
        t1 = this.image;
      if (t1.numChannels > 1) {
        t1 = t1.data;
        t2 = this._pixel_int32$_index + 1;
        if (!(t2 >= 0 && t2 < t1.length))
          return A.ioore(t1, t2);
        t2 = t1[t2];
        t1 = t2;
      } else
        t1 = 0;
      return t1;
    },
    set$g(g) {
      var t2, t3,
        t1 = this.image;
      if (t1.numChannels > 1) {
        t1 = t1.data;
        t2 = this._pixel_int32$_index + 1;
        t3 = D.JSNumber_methods.toInt$0(g);
        t1.$flags & 2 && A.throwUnsupportedOperation(t1);
        if (!(t2 >= 0 && t2 < t1.length))
          return A.ioore(t1, t2);
        t1[t2] = t3;
      }
    },
    get$b(_) {
      var t2,
        t1 = this.image;
      if (t1.numChannels > 2) {
        t1 = t1.data;
        t2 = this._pixel_int32$_index + 2;
        if (!(t2 >= 0 && t2 < t1.length))
          return A.ioore(t1, t2);
        t2 = t1[t2];
        t1 = t2;
      } else
        t1 = 0;
      return t1;
    },
    set$b(_, b) {
      var t2, t3,
        t1 = this.image;
      if (t1.numChannels > 2) {
        t1 = t1.data;
        t2 = this._pixel_int32$_index + 2;
        t3 = D.JSNumber_methods.toInt$0(b);
        t1.$flags & 2 && A.throwUnsupportedOperation(t1);
        if (!(t2 >= 0 && t2 < t1.length))
          return A.ioore(t1, t2);
        t1[t2] = t3;
      }
    },
    get$a(_) {
      var t2,
        t1 = this.image;
      if (t1.numChannels > 3) {
        t1 = t1.data;
        t2 = this._pixel_int32$_index + 3;
        if (!(t2 >= 0 && t2 < t1.length))
          return A.ioore(t1, t2);
        t2 = t1[t2];
        t1 = t2;
      } else
        t1 = 0;
      return t1;
    },
    set$a(_, a) {
      var t2, t3,
        t1 = this.image;
      if (t1.numChannels > 3) {
        t1 = t1.data;
        t2 = this._pixel_int32$_index + 3;
        t3 = D.JSNumber_methods.toInt$0(a);
        t1.$flags & 2 && A.throwUnsupportedOperation(t1);
        if (!(t2 >= 0 && t2 < t1.length))
          return A.ioore(t1, t2);
        t1[t2] = t3;
      }
    },
    get$aNormalized() {
      return this.get$a(0) / 2147483647;
    },
    get$luminance() {
      return B.getLuminance(this);
    },
    get$iterator(_) {
      return new B.ChannelIterator(this);
    },
    $eq(_, other) {
      var t1, t2, t3, t4, t5, _this = this;
      if (other == null)
        return false;
      if (other instanceof B.PixelInt32)
        return A.Object_hashAll(A.List_List$of(_this, true, A._instanceType(_this)._eval$1("Iterable.E"))) === A.Object_hashAll(A.List_List$of(other, true, A._instanceType(other)._eval$1("Iterable.E")));
      if (type$.List_int._is(other)) {
        t1 = J.getInterceptor$asx(other);
        t2 = _this.image;
        t3 = t2.numChannels;
        if (t1.get$length(other) !== t3)
          return false;
        t2 = t2.data;
        t4 = _this._pixel_int32$_index;
        t5 = t2.length;
        if (!(t4 >= 0 && t4 < t5))
          return A.ioore(t2, t4);
        if (t2[t4] !== t1.$index(other, 0))
          return false;
        if (t3 > 1) {
          t4 = _this._pixel_int32$_index + 1;
          if (!(t4 >= 0 && t4 < t5))
            return A.ioore(t2, t4);
          if (t2[t4] !== t1.$index(other, 1))
            return false;
          if (t3 > 2) {
            t4 = _this._pixel_int32$_index + 2;
            if (!(t4 >= 0 && t4 < t5))
              return A.ioore(t2, t4);
            if (t2[t4] !== t1.$index(other, 2))
              return false;
            if (t3 > 3) {
              t3 = _this._pixel_int32$_index + 3;
              if (!(t3 >= 0 && t3 < t5))
                return A.ioore(t2, t3);
              if (t2[t3] !== t1.$index(other, 3))
                return false;
            }
          }
        }
        return true;
      }
      return false;
    },
    get$hashCode(_) {
      return A.Object_hashAll(A.List_List$of(this, true, A._instanceType(this)._eval$1("Iterable.E")));
    },
    convert$1$format(format) {
      return B.convertColor(this, null, format, null);
    },
    $isIterator: 1,
    $isColor1: 1,
    $isPixel: 1
  };
  B.PixelInt8.prototype = {
    clone$0(_) {
      var _this = this;
      return new B.PixelInt8(_this._pixel_int8$_x, _this._pixel_int8$_y, _this._pixel_int8$_index, _this.image);
    },
    get$length(_) {
      return this.image.numChannels;
    },
    get$palette() {
      return null;
    },
    get$format() {
      return C.Format_6;
    },
    get$current(_) {
      return this;
    },
    moveNext$0() {
      var t2, _this = this,
        t1 = _this.image;
      if (++_this._pixel_int8$_x === t1.width) {
        _this._pixel_int8$_x = 0;
        if (++_this._pixel_int8$_y === t1.height)
          return false;
      }
      t2 = _this._pixel_int8$_index + t1.numChannels;
      _this._pixel_int8$_index = t2;
      return t2 < t1.data.length;
    },
    $index(_, i) {
      var t1, t2;
      A._asInt(i);
      t1 = this.image;
      if (i < t1.numChannels) {
        t1 = t1.data;
        t2 = this._pixel_int8$_index + i;
        if (!(t2 >= 0 && t2 < t1.length))
          return A.ioore(t1, t2);
        t2 = t1[t2];
        t1 = t2;
      } else
        t1 = 0;
      return t1;
    },
    $indexSet(_, i, value) {
      var t1, t2, t3;
      A._asInt(i);
      A._asNum(value);
      t1 = this.image;
      if (i < t1.numChannels) {
        t1 = t1.data;
        t2 = this._pixel_int8$_index + i;
        t3 = D.JSNumber_methods.toInt$0(value);
        t1.$flags & 2 && A.throwUnsupportedOperation(t1);
        if (!(t2 >= 0 && t2 < t1.length))
          return A.ioore(t1, t2);
        t1[t2] = t3;
      }
    },
    get$r(_) {
      var t2,
        t1 = this.image;
      if (t1.numChannels > 0) {
        t1 = t1.data;
        t2 = this._pixel_int8$_index;
        if (!(t2 >= 0 && t2 < t1.length))
          return A.ioore(t1, t2);
        t2 = t1[t2];
        t1 = t2;
      } else
        t1 = 0;
      return t1;
    },
    set$r(_, r) {
      var t2, t3,
        t1 = this.image;
      if (t1.numChannels > 0) {
        t1 = t1.data;
        t2 = this._pixel_int8$_index;
        t3 = D.JSNumber_methods.toInt$0(r);
        t1.$flags & 2 && A.throwUnsupportedOperation(t1);
        if (!(t2 >= 0 && t2 < t1.length))
          return A.ioore(t1, t2);
        t1[t2] = t3;
      }
    },
    get$g() {
      var t2,
        t1 = this.image;
      if (t1.numChannels > 1) {
        t1 = t1.data;
        t2 = this._pixel_int8$_index + 1;
        if (!(t2 >= 0 && t2 < t1.length))
          return A.ioore(t1, t2);
        t2 = t1[t2];
        t1 = t2;
      } else
        t1 = 0;
      return t1;
    },
    set$g(g) {
      var t2, t3,
        t1 = this.image;
      if (t1.numChannels > 1) {
        t1 = t1.data;
        t2 = this._pixel_int8$_index + 1;
        t3 = D.JSNumber_methods.toInt$0(g);
        t1.$flags & 2 && A.throwUnsupportedOperation(t1);
        if (!(t2 >= 0 && t2 < t1.length))
          return A.ioore(t1, t2);
        t1[t2] = t3;
      }
    },
    get$b(_) {
      var t2,
        t1 = this.image;
      if (t1.numChannels > 2) {
        t1 = t1.data;
        t2 = this._pixel_int8$_index + 2;
        if (!(t2 >= 0 && t2 < t1.length))
          return A.ioore(t1, t2);
        t2 = t1[t2];
        t1 = t2;
      } else
        t1 = 0;
      return t1;
    },
    set$b(_, b) {
      var t2, t3,
        t1 = this.image;
      if (t1.numChannels > 2) {
        t1 = t1.data;
        t2 = this._pixel_int8$_index + 2;
        t3 = D.JSNumber_methods.toInt$0(b);
        t1.$flags & 2 && A.throwUnsupportedOperation(t1);
        if (!(t2 >= 0 && t2 < t1.length))
          return A.ioore(t1, t2);
        t1[t2] = t3;
      }
    },
    get$a(_) {
      var t2,
        t1 = this.image;
      if (t1.numChannels > 3) {
        t1 = t1.data;
        t2 = this._pixel_int8$_index + 3;
        if (!(t2 >= 0 && t2 < t1.length))
          return A.ioore(t1, t2);
        t2 = t1[t2];
        t1 = t2;
      } else
        t1 = 0;
      return t1;
    },
    set$a(_, a) {
      var t2, t3,
        t1 = this.image;
      if (t1.numChannels > 3) {
        t1 = t1.data;
        t2 = this._pixel_int8$_index + 3;
        t3 = D.JSNumber_methods.toInt$0(a);
        t1.$flags & 2 && A.throwUnsupportedOperation(t1);
        if (!(t2 >= 0 && t2 < t1.length))
          return A.ioore(t1, t2);
        t1[t2] = t3;
      }
    },
    get$aNormalized() {
      return this.get$a(0) / 127;
    },
    get$luminance() {
      return B.getLuminance(this);
    },
    get$iterator(_) {
      return new B.ChannelIterator(this);
    },
    $eq(_, other) {
      var t1, t2, t3, t4, t5, _this = this;
      if (other == null)
        return false;
      if (other instanceof B.PixelInt8)
        return A.Object_hashAll(A.List_List$of(_this, true, A._instanceType(_this)._eval$1("Iterable.E"))) === A.Object_hashAll(A.List_List$of(other, true, A._instanceType(other)._eval$1("Iterable.E")));
      if (type$.List_int._is(other)) {
        t1 = J.getInterceptor$asx(other);
        t2 = _this.image;
        t3 = t2.numChannels;
        if (t1.get$length(other) !== t3)
          return false;
        t2 = t2.data;
        t4 = _this._pixel_int8$_index;
        t5 = t2.length;
        if (!(t4 >= 0 && t4 < t5))
          return A.ioore(t2, t4);
        if (t2[t4] !== t1.$index(other, 0))
          return false;
        if (t3 > 1) {
          t4 = _this._pixel_int8$_index + 1;
          if (!(t4 >= 0 && t4 < t5))
            return A.ioore(t2, t4);
          if (t2[t4] !== t1.$index(other, 1))
            return false;
          if (t3 > 2) {
            t4 = _this._pixel_int8$_index + 2;
            if (!(t4 >= 0 && t4 < t5))
              return A.ioore(t2, t4);
            if (t2[t4] !== t1.$index(other, 2))
              return false;
            if (t3 > 3) {
              t3 = _this._pixel_int8$_index + 3;
              if (!(t3 >= 0 && t3 < t5))
                return A.ioore(t2, t3);
              if (t2[t3] !== t1.$index(other, 3))
                return false;
            }
          }
        }
        return true;
      }
      return false;
    },
    get$hashCode(_) {
      return A.Object_hashAll(A.List_List$of(this, true, A._instanceType(this)._eval$1("Iterable.E")));
    },
    convert$1$format(format) {
      return B.convertColor(this, null, format, null);
    },
    $isIterator: 1,
    $isColor1: 1,
    $isPixel: 1
  };
  B.PixelUint1.prototype = {
    clone$0(_) {
      var _this = this;
      return new B.PixelUint1(_this._pixel_uint1$_x, _this._pixel_uint1$_y, _this._pixel_uint1$_index, _this._pixel_uint1$_bitIndex, _this._pixel_uint1$_rowOffset, _this.image);
    },
    get$length(_) {
      var t1 = this.image,
        t2 = t1.palette;
      t2 = t2 == null ? null : t2.numChannels;
      return t2 == null ? t1.numChannels : t2;
    },
    get$palette() {
      return this.image.palette;
    },
    get$format() {
      return C.Format_0;
    },
    get$current(_) {
      return this;
    },
    moveNext$0() {
      var nc, _this = this,
        t1 = ++_this._pixel_uint1$_x,
        t2 = _this.image;
      if (t1 === t2.width) {
        _this._pixel_uint1$_x = 0;
        t1 = ++_this._pixel_uint1$_y;
        _this._pixel_uint1$_bitIndex = 0;
        ++_this._pixel_uint1$_index;
        _this._pixel_uint1$_rowOffset = _this._pixel_uint1$_rowOffset + t2.rowStride;
        return t1 < t2.height;
      }
      nc = t2.numChannels;
      if (t2.palette != null || nc === 1) {
        if (++_this._pixel_uint1$_bitIndex > 7) {
          _this._pixel_uint1$_bitIndex = 0;
          ++_this._pixel_uint1$_index;
        }
      } else {
        t1 *= nc;
        _this._pixel_uint1$_bitIndex = t1 & 7;
        _this._pixel_uint1$_index = _this._pixel_uint1$_rowOffset + D.JSInt_methods._shrOtherPositive$1(t1, 3);
      }
      t1 = _this._pixel_uint1$_index;
      t2 = t2.__ImageDataUint1_data_F;
      t2 === $ && A.throwLateFieldNI("data");
      return t1 < t2.byteLength;
    },
    _pixel_uint1$_get$1(_, ci) {
      var t1, t2,
        i = this._pixel_uint1$_index,
        bi = 7 - (this._pixel_uint1$_bitIndex + ci);
      if (bi < 0) {
        bi += 8;
        ++i;
      }
      t1 = this.image.__ImageDataUint1_data_F;
      t1 === $ && A.throwLateFieldNI("data");
      t2 = t1.length;
      if (i >= t2)
        return 0;
      if (!(i >= 0))
        return A.ioore(t1, i);
      return D.JSInt_methods._shrReceiverPositive$1(t1[i], bi) & 1;
    },
    _pixel_uint1$_getChannel$1(ci) {
      var t1 = this.image,
        t2 = t1.palette;
      if (t2 == null)
        t1 = t1.numChannels > ci ? this._pixel_uint1$_get$1(0, ci) : 0;
      else
        t1 = t2.$get$2(0, this._pixel_uint1$_get$1(0, 0), ci);
      return t1;
    },
    _pixel_uint1$_setChannel$2(ci, value) {
      var i, bi, v, vi, mask, t2,
        t1 = this.image;
      if (ci >= t1.numChannels)
        return;
      i = this._pixel_uint1$_index;
      bi = 7 - (this._pixel_uint1$_bitIndex + ci);
      if (bi < 0) {
        ++i;
        bi += 8;
      }
      t1 = t1.__ImageDataUint1_data_F;
      t1 === $ && A.throwLateFieldNI("data");
      if (!(i >= 0 && i < t1.length))
        return A.ioore(t1, i);
      v = t1[i];
      vi = D.JSInt_methods.clamp$2(D.JSNumber_methods.toInt$0(value), 0, 1);
      if (!(bi >= 0 && bi < 8))
        return A.ioore(C.List_Kt5, bi);
      mask = C.List_Kt5[bi];
      t2 = D.JSInt_methods.$shl(vi, bi);
      t1.$flags & 2 && A.throwUnsupportedOperation(t1);
      if (!(i < t1.length))
        return A.ioore(t1, i);
      t1[i] = (v & mask | t2) >>> 0;
    },
    $index(_, ci) {
      return this._pixel_uint1$_getChannel$1(A._asInt(ci));
    },
    $indexSet(_, ci, value) {
      return this._pixel_uint1$_setChannel$2(A._asInt(ci), A._asNum(value));
    },
    get$r(_) {
      return this._pixel_uint1$_getChannel$1(0);
    },
    set$r(_, r) {
      this._pixel_uint1$_setChannel$2(0, r);
    },
    get$g() {
      return this._pixel_uint1$_getChannel$1(1);
    },
    set$g(g) {
      this._pixel_uint1$_setChannel$2(1, g);
    },
    get$b(_) {
      return this._pixel_uint1$_getChannel$1(2);
    },
    set$b(_, b) {
      this._pixel_uint1$_setChannel$2(2, b);
    },
    get$a(_) {
      return this._pixel_uint1$_getChannel$1(3);
    },
    set$a(_, a) {
      this._pixel_uint1$_setChannel$2(3, a);
    },
    get$aNormalized() {
      var t1 = this._pixel_uint1$_getChannel$1(3),
        t2 = this.image.palette;
      t2 = t2 == null ? null : t2.get$maxChannelValue();
      return t1 / (t2 == null ? 1 : t2);
    },
    get$luminance() {
      return B.getLuminance(this);
    },
    get$iterator(_) {
      return new B.ChannelIterator(this);
    },
    $eq(_, other) {
      var t1, t2, nc, _this = this;
      if (other == null)
        return false;
      if (other instanceof B.PixelUint1)
        return A.Object_hashAll(A.List_List$of(_this, true, A._instanceType(_this)._eval$1("Iterable.E"))) === A.Object_hashAll(A.List_List$of(other, true, A._instanceType(other)._eval$1("Iterable.E")));
      if (type$.List_int._is(other)) {
        t1 = _this.image;
        t2 = t1.palette;
        nc = t2 != null ? t2.numChannels : t1.numChannels;
        t1 = J.getInterceptor$asx(other);
        if (t1.get$length(other) !== nc)
          return false;
        if (_this._pixel_uint1$_getChannel$1(0) !== t1.$index(other, 0))
          return false;
        if (nc > 1) {
          if (_this._pixel_uint1$_getChannel$1(1) !== t1.$index(other, 1))
            return false;
          if (nc > 2) {
            if (_this._pixel_uint1$_getChannel$1(2) !== t1.$index(other, 2))
              return false;
            if (nc > 3)
              if (_this._pixel_uint1$_getChannel$1(3) !== t1.$index(other, 3))
                return false;
          }
        }
        return true;
      }
      return false;
    },
    get$hashCode(_) {
      return A.Object_hashAll(A.List_List$of(this, true, A._instanceType(this)._eval$1("Iterable.E")));
    },
    convert$1$format(format) {
      return B.convertColor(this, null, format, null);
    },
    $isIterator: 1,
    $isColor1: 1,
    $isPixel: 1
  };
  B.PixelUint16.prototype = {
    clone$0(_) {
      var _this = this;
      return new B.PixelUint16(_this._pixel_uint16$_x, _this._pixel_uint16$_y, _this._pixel_uint16$_index, _this.image);
    },
    get$length(_) {
      var t1 = this.image,
        t2 = t1.palette;
      t2 = t2 == null ? null : t2.numChannels;
      return t2 == null ? t1.numChannels : t2;
    },
    get$palette() {
      return this.image.palette;
    },
    get$format() {
      return C.Format_4;
    },
    get$current(_) {
      return this;
    },
    moveNext$0() {
      var t2, _this = this,
        t1 = _this.image;
      if (++_this._pixel_uint16$_x === t1.width) {
        _this._pixel_uint16$_x = 0;
        if (++_this._pixel_uint16$_y === t1.height)
          return false;
      }
      t2 = _this._pixel_uint16$_index;
      t2 += t1.palette == null ? t1.numChannels : 1;
      _this._pixel_uint16$_index = t2;
      return t2 < t1.data.length;
    },
    $get$1(_, ci) {
      var t3,
        t1 = this.image,
        t2 = t1.palette;
      if (t2 != null) {
        t1 = t1.data;
        t3 = this._pixel_uint16$_index;
        if (!(t3 >= 0 && t3 < t1.length))
          return A.ioore(t1, t3);
        t3 = t2.$get$2(0, t1[t3], ci);
        t1 = t3;
      } else if (ci < t1.numChannels) {
        t1 = t1.data;
        t2 = this._pixel_uint16$_index + ci;
        if (!(t2 >= 0 && t2 < t1.length))
          return A.ioore(t1, t2);
        t2 = t1[t2];
        t1 = t2;
      } else
        t1 = 0;
      return t1;
    },
    $index(_, i) {
      return this.$get$1(0, A._asInt(i));
    },
    $indexSet(_, i, value) {
      var t1, t2, t3;
      A._asInt(i);
      A._asNum(value);
      t1 = this.image;
      if (i < t1.numChannels) {
        t1 = t1.data;
        t2 = this._pixel_uint16$_index + i;
        t3 = D.JSNumber_methods.toInt$0(value);
        t1.$flags & 2 && A.throwUnsupportedOperation(t1);
        if (!(t2 >= 0 && t2 < t1.length))
          return A.ioore(t1, t2);
        t1[t2] = t3;
      }
    },
    get$r(_) {
      var t3,
        t1 = this.image,
        t2 = t1.palette;
      if (t2 == null)
        if (t1.numChannels > 0) {
          t1 = t1.data;
          t2 = this._pixel_uint16$_index;
          if (!(t2 >= 0 && t2 < t1.length))
            return A.ioore(t1, t2);
          t2 = t1[t2];
          t1 = t2;
        } else
          t1 = 0;
      else {
        t1 = t1.data;
        t3 = this._pixel_uint16$_index;
        if (!(t3 >= 0 && t3 < t1.length))
          return A.ioore(t1, t3);
        t3 = t2.getRed$1(t1[t3]);
        t1 = t3;
      }
      return t1;
    },
    set$r(_, r) {
      var t2, t3,
        t1 = this.image;
      if (t1.numChannels > 0) {
        t1 = t1.data;
        t2 = this._pixel_uint16$_index;
        t3 = D.JSNumber_methods.toInt$0(r);
        t1.$flags & 2 && A.throwUnsupportedOperation(t1);
        if (!(t2 >= 0 && t2 < t1.length))
          return A.ioore(t1, t2);
        t1[t2] = t3;
      }
    },
    get$g() {
      var t3,
        t1 = this.image,
        t2 = t1.palette;
      if (t2 == null)
        if (t1.numChannels > 1) {
          t1 = t1.data;
          t2 = this._pixel_uint16$_index + 1;
          if (!(t2 >= 0 && t2 < t1.length))
            return A.ioore(t1, t2);
          t2 = t1[t2];
          t1 = t2;
        } else
          t1 = 0;
      else {
        t1 = t1.data;
        t3 = this._pixel_uint16$_index;
        if (!(t3 >= 0 && t3 < t1.length))
          return A.ioore(t1, t3);
        t3 = t2.getGreen$1(t1[t3]);
        t1 = t3;
      }
      return t1;
    },
    set$g(g) {
      var t2, t3,
        t1 = this.image;
      if (t1.numChannels > 1) {
        t1 = t1.data;
        t2 = this._pixel_uint16$_index + 1;
        t3 = D.JSNumber_methods.toInt$0(g);
        t1.$flags & 2 && A.throwUnsupportedOperation(t1);
        if (!(t2 >= 0 && t2 < t1.length))
          return A.ioore(t1, t2);
        t1[t2] = t3;
      }
    },
    get$b(_) {
      var t3,
        t1 = this.image,
        t2 = t1.palette;
      if (t2 == null)
        if (t1.numChannels > 2) {
          t1 = t1.data;
          t2 = this._pixel_uint16$_index + 2;
          if (!(t2 >= 0 && t2 < t1.length))
            return A.ioore(t1, t2);
          t2 = t1[t2];
          t1 = t2;
        } else
          t1 = 0;
      else {
        t1 = t1.data;
        t3 = this._pixel_uint16$_index;
        if (!(t3 >= 0 && t3 < t1.length))
          return A.ioore(t1, t3);
        t3 = t2.getBlue$1(t1[t3]);
        t1 = t3;
      }
      return t1;
    },
    set$b(_, b) {
      var t2, t3,
        t1 = this.image;
      if (t1.numChannels > 2) {
        t1 = t1.data;
        t2 = this._pixel_uint16$_index + 2;
        t3 = D.JSNumber_methods.toInt$0(b);
        t1.$flags & 2 && A.throwUnsupportedOperation(t1);
        if (!(t2 >= 0 && t2 < t1.length))
          return A.ioore(t1, t2);
        t1[t2] = t3;
      }
    },
    get$a(_) {
      var t3,
        t1 = this.image,
        t2 = t1.palette;
      if (t2 == null)
        if (t1.numChannels > 3) {
          t1 = t1.data;
          t2 = this._pixel_uint16$_index + 3;
          if (!(t2 >= 0 && t2 < t1.length))
            return A.ioore(t1, t2);
          t2 = t1[t2];
          t1 = t2;
        } else
          t1 = 0;
      else {
        t1 = t1.data;
        t3 = this._pixel_uint16$_index;
        if (!(t3 >= 0 && t3 < t1.length))
          return A.ioore(t1, t3);
        t3 = t2.getAlpha$1(t1[t3]);
        t1 = t3;
      }
      return t1;
    },
    set$a(_, a) {
      var t2, t3,
        t1 = this.image;
      if (t1.numChannels > 3) {
        t1 = t1.data;
        t2 = this._pixel_uint16$_index + 3;
        t3 = D.JSNumber_methods.toInt$0(a);
        t1.$flags & 2 && A.throwUnsupportedOperation(t1);
        if (!(t2 >= 0 && t2 < t1.length))
          return A.ioore(t1, t2);
        t1[t2] = t3;
      }
    },
    get$aNormalized() {
      var t1 = this.get$a(0),
        t2 = this.image.palette;
      t2 = t2 == null ? null : t2.get$maxChannelValue();
      return t1 / (t2 == null ? 65535 : t2);
    },
    get$luminance() {
      return B.getLuminance(this);
    },
    get$iterator(_) {
      return new B.ChannelIterator(this);
    },
    $eq(_, other) {
      var t1, t2, nc, _this = this;
      if (other == null)
        return false;
      if (other instanceof B.PixelUint16)
        return A.Object_hashAll(A.List_List$of(_this, true, A._instanceType(_this)._eval$1("Iterable.E"))) === A.Object_hashAll(A.List_List$of(other, true, A._instanceType(other)._eval$1("Iterable.E")));
      if (type$.List_int._is(other)) {
        t1 = _this.image;
        t2 = t1.palette;
        nc = t2 != null ? t2.numChannels : t1.numChannels;
        t1 = J.getInterceptor$asx(other);
        if (t1.get$length(other) !== nc)
          return false;
        if (_this.$get$1(0, 0) !== t1.$index(other, 0))
          return false;
        if (nc > 1) {
          if (_this.$get$1(0, 1) !== t1.$index(other, 1))
            return false;
          if (nc > 2) {
            if (_this.$get$1(0, 2) !== t1.$index(other, 2))
              return false;
            if (nc > 3)
              if (_this.$get$1(0, 3) !== t1.$index(other, 3))
                return false;
          }
        }
        return true;
      }
      return false;
    },
    get$hashCode(_) {
      return A.Object_hashAll(A.List_List$of(this, true, A._instanceType(this)._eval$1("Iterable.E")));
    },
    convert$1$format(format) {
      return B.convertColor(this, null, format, null);
    },
    $isIterator: 1,
    $isColor1: 1,
    $isPixel: 1
  };
  B.PixelUint2.prototype = {
    clone$0(_) {
      var _this = this;
      return new B.PixelUint2(_this._pixel_uint2$_x, _this._pixel_uint2$_y, _this._pixel_uint2$_index, _this._pixel_uint2$_bitIndex, _this._rowOffset, _this.image);
    },
    get$length(_) {
      var t1 = this.image,
        t2 = t1.palette;
      t2 = t2 == null ? null : t2.numChannels;
      return t2 == null ? t1.numChannels : t2;
    },
    get$palette() {
      return this.image.palette;
    },
    get$format() {
      return C.Format_1;
    },
    get$bitsPerPixel() {
      var t1 = this.image;
      return t1.palette != null ? 2 : t1.numChannels << 1 >>> 0;
    },
    get$current(_) {
      return this;
    },
    moveNext$0() {
      var t2, bpp, _this = this,
        t1 = _this.image;
      if (++_this._pixel_uint2$_x === t1.width) {
        _this._pixel_uint2$_x = 0;
        t2 = ++_this._pixel_uint2$_y;
        _this._pixel_uint2$_bitIndex = 0;
        ++_this._pixel_uint2$_index;
        _this._rowOffset = _this._rowOffset + t1.rowStride;
        return t2 < t1.height;
      }
      if (t1.palette != null || t1.numChannels === 1) {
        t2 = _this._pixel_uint2$_bitIndex += 2;
        if (t2 > 7) {
          _this._pixel_uint2$_bitIndex = 0;
          ++_this._pixel_uint2$_index;
        }
      } else {
        bpp = _this.get$bitsPerPixel();
        t2 = _this._pixel_uint2$_x * bpp;
        _this._pixel_uint2$_bitIndex = t2 & 7;
        _this._pixel_uint2$_index = _this._rowOffset + D.JSInt_methods._shrOtherPositive$1(t2, 3);
      }
      t2 = _this._pixel_uint2$_index;
      t1 = t1.__ImageDataUint2_data_F;
      t1 === $ && A.throwLateFieldNI("data");
      return t2 < t1.length;
    },
    _pixel_uint2$_get$1(_, ci) {
      var t1,
        i = this._pixel_uint2$_index,
        bi = 6 - (this._pixel_uint2$_bitIndex + (ci << 1 >>> 0));
      if (bi < 0) {
        bi += 8;
        ++i;
      }
      t1 = this.image.__ImageDataUint2_data_F;
      t1 === $ && A.throwLateFieldNI("data");
      if (!(i >= 0 && i < t1.length))
        return A.ioore(t1, i);
      return D.JSInt_methods._shrReceiverPositive$1(t1[i], bi) & 3;
    },
    _pixel_uint2$_getChannel$1(ci) {
      var t1 = this.image,
        t2 = t1.palette;
      if (t2 == null)
        t1 = t1.numChannels > ci ? this._pixel_uint2$_get$1(0, ci) : 0;
      else
        t1 = t2.$get$2(0, this._pixel_uint2$_get$1(0, 0), ci);
      return t1;
    },
    _pixel_uint2$_setChannel$2(ci, value) {
      var i, bi, v, vi, t2, mask,
        t1 = this.image;
      if (ci >= t1.numChannels)
        return;
      i = this._pixel_uint2$_index;
      bi = 6 - (this._pixel_uint2$_bitIndex + (ci << 1 >>> 0));
      if (bi < 0) {
        ++i;
        bi += 8;
      }
      t1 = t1.__ImageDataUint2_data_F;
      t1 === $ && A.throwLateFieldNI("data");
      if (!(i >= 0 && i < t1.length))
        return A.ioore(t1, i);
      v = t1[i];
      vi = D.JSInt_methods.clamp$2(D.JSNumber_methods.toInt$0(value), 0, 3);
      t2 = D.JSInt_methods._shrOtherPositive$1(bi, 1);
      if (!(t2 < 4))
        return A.ioore(C.List_252_243_207_63, t2);
      mask = C.List_252_243_207_63[t2];
      t2 = D.JSInt_methods.$shl(vi, bi);
      t1.$flags & 2 && A.throwUnsupportedOperation(t1);
      if (!(i < t1.length))
        return A.ioore(t1, i);
      t1[i] = (v & mask | t2) >>> 0;
    },
    $index(_, i) {
      return this._pixel_uint2$_getChannel$1(A._asInt(i));
    },
    $indexSet(_, i, value) {
      return this._pixel_uint2$_setChannel$2(A._asInt(i), A._asNum(value));
    },
    get$r(_) {
      return this._pixel_uint2$_getChannel$1(0);
    },
    set$r(_, r) {
      this._pixel_uint2$_setChannel$2(0, r);
    },
    get$g() {
      return this._pixel_uint2$_getChannel$1(1);
    },
    set$g(g) {
      this._pixel_uint2$_setChannel$2(1, g);
    },
    get$b(_) {
      return this._pixel_uint2$_getChannel$1(2);
    },
    set$b(_, b) {
      this._pixel_uint2$_setChannel$2(2, b);
    },
    get$a(_) {
      return this._pixel_uint2$_getChannel$1(3);
    },
    set$a(_, a) {
      this._pixel_uint2$_setChannel$2(3, a);
    },
    get$aNormalized() {
      var t1 = this._pixel_uint2$_getChannel$1(3),
        t2 = this.image.palette;
      t2 = t2 == null ? null : t2.get$maxChannelValue();
      return t1 / (t2 == null ? 3 : t2);
    },
    get$luminance() {
      return B.getLuminance(this);
    },
    get$iterator(_) {
      return new B.ChannelIterator(this);
    },
    $eq(_, other) {
      var t1, t2, nc, _this = this;
      if (other == null)
        return false;
      if (other instanceof B.PixelUint2)
        return A.Object_hashAll(A.List_List$of(_this, true, A._instanceType(_this)._eval$1("Iterable.E"))) === A.Object_hashAll(A.List_List$of(other, true, A._instanceType(other)._eval$1("Iterable.E")));
      if (type$.List_int._is(other)) {
        t1 = _this.image;
        t2 = t1.palette;
        nc = t2 != null ? t2.numChannels : t1.numChannels;
        t1 = J.getInterceptor$asx(other);
        if (t1.get$length(other) !== nc)
          return false;
        if (_this._pixel_uint2$_getChannel$1(0) !== t1.$index(other, 0))
          return false;
        if (nc > 1) {
          if (_this._pixel_uint2$_getChannel$1(1) !== t1.$index(other, 1))
            return false;
          if (nc > 2) {
            if (_this._pixel_uint2$_getChannel$1(2) !== t1.$index(other, 2))
              return false;
            if (nc > 3)
              if (_this._pixel_uint2$_getChannel$1(3) !== t1.$index(other, 3))
                return false;
          }
        }
        return true;
      }
      return false;
    },
    get$hashCode(_) {
      return A.Object_hashAll(A.List_List$of(this, true, A._instanceType(this)._eval$1("Iterable.E")));
    },
    convert$1$format(format) {
      return B.convertColor(this, null, format, null);
    },
    $isIterator: 1,
    $isColor1: 1,
    $isPixel: 1
  };
  B.PixelUint32.prototype = {
    clone$0(_) {
      var _this = this;
      return new B.PixelUint32(_this._pixel_uint32$_x, _this._pixel_uint32$_y, _this._pixel_uint32$_index, _this.image);
    },
    get$length(_) {
      return this.image.numChannels;
    },
    get$palette() {
      return null;
    },
    get$format() {
      return C.Format_5;
    },
    get$current(_) {
      return this;
    },
    moveNext$0() {
      var t2, _this = this,
        t1 = _this.image;
      if (++_this._pixel_uint32$_x === t1.width) {
        _this._pixel_uint32$_x = 0;
        if (++_this._pixel_uint32$_y === t1.height)
          return false;
      }
      t2 = _this._pixel_uint32$_index + t1.numChannels;
      _this._pixel_uint32$_index = t2;
      return t2 < t1.data.length;
    },
    $index(_, i) {
      var t1, t2;
      A._asInt(i);
      t1 = this.image;
      if (i < t1.numChannels) {
        t1 = t1.data;
        t2 = this._pixel_uint32$_index + i;
        if (!(t2 >= 0 && t2 < t1.length))
          return A.ioore(t1, t2);
        t2 = t1[t2];
        t1 = t2;
      } else
        t1 = 0;
      return t1;
    },
    $indexSet(_, i, value) {
      var t1, t2, t3;
      A._asInt(i);
      A._asNum(value);
      t1 = this.image;
      if (i < t1.numChannels) {
        t1 = t1.data;
        t2 = this._pixel_uint32$_index + i;
        t3 = D.JSNumber_methods.toInt$0(value);
        t1.$flags & 2 && A.throwUnsupportedOperation(t1);
        if (!(t2 >= 0 && t2 < t1.length))
          return A.ioore(t1, t2);
        t1[t2] = t3;
      }
    },
    get$r(_) {
      var t2,
        t1 = this.image;
      if (t1.numChannels > 0) {
        t1 = t1.data;
        t2 = this._pixel_uint32$_index;
        if (!(t2 >= 0 && t2 < t1.length))
          return A.ioore(t1, t2);
        t2 = t1[t2];
        t1 = t2;
      } else
        t1 = 0;
      return t1;
    },
    set$r(_, r) {
      var t2, t3,
        t1 = this.image;
      if (t1.numChannels > 0) {
        t1 = t1.data;
        t2 = this._pixel_uint32$_index;
        t3 = D.JSNumber_methods.toInt$0(r);
        t1.$flags & 2 && A.throwUnsupportedOperation(t1);
        if (!(t2 >= 0 && t2 < t1.length))
          return A.ioore(t1, t2);
        t1[t2] = t3;
      }
    },
    get$g() {
      var t2,
        t1 = this.image;
      if (t1.numChannels > 1) {
        t1 = t1.data;
        t2 = this._pixel_uint32$_index + 1;
        if (!(t2 >= 0 && t2 < t1.length))
          return A.ioore(t1, t2);
        t2 = t1[t2];
        t1 = t2;
      } else
        t1 = 0;
      return t1;
    },
    set$g(g) {
      var t2, t3,
        t1 = this.image;
      if (t1.numChannels > 1) {
        t1 = t1.data;
        t2 = this._pixel_uint32$_index + 1;
        t3 = D.JSNumber_methods.toInt$0(g);
        t1.$flags & 2 && A.throwUnsupportedOperation(t1);
        if (!(t2 >= 0 && t2 < t1.length))
          return A.ioore(t1, t2);
        t1[t2] = t3;
      }
    },
    get$b(_) {
      var t2,
        t1 = this.image;
      if (t1.numChannels > 2) {
        t1 = t1.data;
        t2 = this._pixel_uint32$_index + 2;
        if (!(t2 >= 0 && t2 < t1.length))
          return A.ioore(t1, t2);
        t2 = t1[t2];
        t1 = t2;
      } else
        t1 = 0;
      return t1;
    },
    set$b(_, b) {
      var t2, t3,
        t1 = this.image;
      if (t1.numChannels > 2) {
        t1 = t1.data;
        t2 = this._pixel_uint32$_index + 2;
        t3 = D.JSNumber_methods.toInt$0(b);
        t1.$flags & 2 && A.throwUnsupportedOperation(t1);
        if (!(t2 >= 0 && t2 < t1.length))
          return A.ioore(t1, t2);
        t1[t2] = t3;
      }
    },
    get$a(_) {
      var t2,
        t1 = this.image;
      if (t1.numChannels > 3) {
        t1 = t1.data;
        t2 = this._pixel_uint32$_index + 3;
        if (!(t2 >= 0 && t2 < t1.length))
          return A.ioore(t1, t2);
        t2 = t1[t2];
        t1 = t2;
      } else
        t1 = 0;
      return t1;
    },
    set$a(_, a) {
      var t2, t3,
        t1 = this.image;
      if (t1.numChannels > 3) {
        t1 = t1.data;
        t2 = this._pixel_uint32$_index + 3;
        t3 = D.JSNumber_methods.toInt$0(a);
        t1.$flags & 2 && A.throwUnsupportedOperation(t1);
        if (!(t2 >= 0 && t2 < t1.length))
          return A.ioore(t1, t2);
        t1[t2] = t3;
      }
    },
    get$aNormalized() {
      return this.get$a(0) / 4294967295;
    },
    get$luminance() {
      return B.getLuminance(this);
    },
    get$iterator(_) {
      return new B.ChannelIterator(this);
    },
    $eq(_, other) {
      var t1, t2, t3, t4, t5, _this = this;
      if (other == null)
        return false;
      if (other instanceof B.PixelUint32)
        return A.Object_hashAll(A.List_List$of(_this, true, A._instanceType(_this)._eval$1("Iterable.E"))) === A.Object_hashAll(A.List_List$of(other, true, A._instanceType(other)._eval$1("Iterable.E")));
      if (type$.List_int._is(other)) {
        t1 = J.getInterceptor$asx(other);
        t2 = _this.image;
        t3 = t2.numChannels;
        if (t1.get$length(other) !== t3)
          return false;
        t2 = t2.data;
        t4 = _this._pixel_uint32$_index;
        t5 = t2.length;
        if (!(t4 >= 0 && t4 < t5))
          return A.ioore(t2, t4);
        if (t2[t4] !== t1.$index(other, 0))
          return false;
        if (t3 > 1) {
          t4 = _this._pixel_uint32$_index + 1;
          if (!(t4 >= 0 && t4 < t5))
            return A.ioore(t2, t4);
          if (t2[t4] !== t1.$index(other, 1))
            return false;
          if (t3 > 2) {
            t4 = _this._pixel_uint32$_index + 2;
            if (!(t4 >= 0 && t4 < t5))
              return A.ioore(t2, t4);
            if (t2[t4] !== t1.$index(other, 2))
              return false;
            if (t3 > 3) {
              t3 = _this._pixel_uint32$_index + 3;
              if (!(t3 >= 0 && t3 < t5))
                return A.ioore(t2, t3);
              if (t2[t3] !== t1.$index(other, 3))
                return false;
            }
          }
        }
        return true;
      }
      return false;
    },
    get$hashCode(_) {
      return A.Object_hashAll(A.List_List$of(this, true, A._instanceType(this)._eval$1("Iterable.E")));
    },
    convert$1$format(format) {
      return B.convertColor(this, null, format, null);
    },
    $isIterator: 1,
    $isColor1: 1,
    $isPixel: 1
  };
  B.PixelUint4.prototype = {
    clone$0(_) {
      var _this = this;
      return new B.PixelUint4(_this._pixel_uint4$_x, _this._pixel_uint4$_y, _this._pixel_uint4$_index, _this._bitIndex, _this.image);
    },
    get$length(_) {
      var t1 = this.image,
        t2 = t1.palette;
      t2 = t2 == null ? null : t2.numChannels;
      return t2 == null ? t1.numChannels : t2;
    },
    get$palette() {
      return this.image.palette;
    },
    get$format() {
      return C.Format_2;
    },
    get$current(_) {
      return this;
    },
    moveNext$0() {
      var t2, nc, t3, _this = this,
        t1 = _this.image;
      if (++_this._pixel_uint4$_x === t1.width) {
        _this._pixel_uint4$_x = 0;
        t2 = ++_this._pixel_uint4$_y;
        _this._bitIndex = 0;
        _this._pixel_uint4$_index = t2 * t1.rowStride;
        return t2 < t1.height;
      }
      nc = t1.numChannels;
      t2 = t1.palette != null || nc === 1;
      t3 = _this._bitIndex;
      if (t2) {
        t2 = t3 + 4;
        _this._bitIndex = t2;
        if (t2 > 7) {
          _this._bitIndex = 0;
          ++_this._pixel_uint4$_index;
        }
      } else {
        t2 = _this._bitIndex = t3 + (nc << 2 >>> 0);
        for (; t2 > 7;) {
          t2 -= 8;
          _this._bitIndex = t2;
          ++_this._pixel_uint4$_index;
        }
      }
      t2 = _this._pixel_uint4$_index;
      t1 = t1.__ImageDataUint4_data_F;
      t1 === $ && A.throwLateFieldNI("data");
      return t2 < t1.length;
    },
    _pixel_uint4$_get$1(_, ci) {
      var t1,
        i = this._pixel_uint4$_index,
        bi = 4 - (this._bitIndex + (ci << 2 >>> 0));
      if (bi < 0) {
        bi += 8;
        ++i;
      }
      t1 = this.image.__ImageDataUint4_data_F;
      t1 === $ && A.throwLateFieldNI("data");
      if (!(i >= 0 && i < t1.length))
        return A.ioore(t1, i);
      return D.JSInt_methods._shrReceiverPositive$1(t1[i], bi) & 15;
    },
    _pixel_uint4$_getChannel$1(ci) {
      var t1 = this.image,
        t2 = t1.palette;
      if (t2 == null)
        t1 = t1.numChannels > ci ? this._pixel_uint4$_get$1(0, ci) : 0;
      else
        t1 = t2.$get$2(0, this._pixel_uint4$_get$1(0, 0), ci);
      return t1;
    },
    _pixel_uint4$_setChannel$2(ci, value) {
      var index, bi, v, vi, mask, t2,
        t1 = this.image;
      if (ci >= t1.numChannels)
        return;
      index = this._pixel_uint4$_index;
      bi = 4 - (this._bitIndex + (ci << 2 >>> 0));
      if (bi < 0) {
        bi += 8;
        ++index;
      }
      t1 = t1.__ImageDataUint4_data_F;
      t1 === $ && A.throwLateFieldNI("data");
      if (!(index >= 0 && index < t1.length))
        return A.ioore(t1, index);
      v = t1[index];
      vi = D.JSInt_methods.clamp$2(D.JSNumber_methods.toInt$0(value), 0, 15);
      mask = bi === 4 ? 15 : 240;
      t2 = D.JSInt_methods.$shl(vi, bi);
      t1.$flags & 2 && A.throwUnsupportedOperation(t1);
      if (!(index < t1.length))
        return A.ioore(t1, index);
      t1[index] = (v & mask | t2) >>> 0;
    },
    $index(_, i) {
      return this._pixel_uint4$_getChannel$1(A._asInt(i));
    },
    $indexSet(_, i, value) {
      return this._pixel_uint4$_setChannel$2(A._asInt(i), A._asNum(value));
    },
    get$r(_) {
      return this._pixel_uint4$_getChannel$1(0);
    },
    set$r(_, r) {
      this._pixel_uint4$_setChannel$2(0, r);
    },
    get$g() {
      return this._pixel_uint4$_getChannel$1(1);
    },
    set$g(g) {
      this._pixel_uint4$_setChannel$2(1, g);
    },
    get$b(_) {
      return this._pixel_uint4$_getChannel$1(2);
    },
    set$b(_, b) {
      this._pixel_uint4$_setChannel$2(2, b);
    },
    get$a(_) {
      return this._pixel_uint4$_getChannel$1(3);
    },
    set$a(_, a) {
      this._pixel_uint4$_setChannel$2(3, a);
    },
    get$aNormalized() {
      var t1 = this._pixel_uint4$_getChannel$1(3),
        t2 = this.image.palette;
      t2 = t2 == null ? null : t2.get$maxChannelValue();
      return t1 / (t2 == null ? 15 : t2);
    },
    get$luminance() {
      return B.getLuminance(this);
    },
    get$iterator(_) {
      return new B.ChannelIterator(this);
    },
    $eq(_, other) {
      var nc, t1, _this = this;
      if (other == null)
        return false;
      if (other instanceof B.PixelUint4)
        return A.Object_hashAll(A.List_List$of(_this, true, A._instanceType(_this)._eval$1("Iterable.E"))) === A.Object_hashAll(A.List_List$of(other, true, A._instanceType(other)._eval$1("Iterable.E")));
      if (type$.List_int._is(other)) {
        nc = _this.image.numChannels;
        t1 = J.getInterceptor$asx(other);
        if (t1.get$length(other) !== nc)
          return false;
        if (_this._pixel_uint4$_getChannel$1(0) !== t1.$index(other, 0))
          return false;
        if (nc > 1) {
          if (_this._pixel_uint4$_getChannel$1(1) !== t1.$index(other, 1))
            return false;
          if (nc > 2) {
            if (_this._pixel_uint4$_getChannel$1(2) !== t1.$index(other, 2))
              return false;
            if (nc > 3)
              if (_this._pixel_uint4$_getChannel$1(3) !== t1.$index(other, 3))
                return false;
          }
        }
        return true;
      }
      return false;
    },
    get$hashCode(_) {
      return A.Object_hashAll(A.List_List$of(this, true, A._instanceType(this)._eval$1("Iterable.E")));
    },
    convert$1$format(format) {
      return B.convertColor(this, null, format, null);
    },
    $isIterator: 1,
    $isColor1: 1,
    $isPixel: 1
  };
  B.PixelUint8.prototype = {
    clone$0(_) {
      var _this = this;
      return new B.PixelUint8(_this._pixel_uint8$_x, _this._pixel_uint8$_y, _this._pixel_uint8$_index, _this.image);
    },
    get$length(_) {
      var t1 = this.image,
        t2 = t1.palette;
      t2 = t2 == null ? null : t2.numChannels;
      return t2 == null ? t1.numChannels : t2;
    },
    get$palette() {
      return this.image.palette;
    },
    get$format() {
      return C.Format_3;
    },
    get$current(_) {
      return this;
    },
    moveNext$0() {
      var t2, _this = this,
        t1 = _this.image;
      if (++_this._pixel_uint8$_x === t1.width) {
        _this._pixel_uint8$_x = 0;
        if (++_this._pixel_uint8$_y === t1.height)
          return false;
      }
      t2 = _this._pixel_uint8$_index;
      t2 += t1.palette == null ? t1.numChannels : 1;
      _this._pixel_uint8$_index = t2;
      return t2 < t1.data.length;
    },
    $get$1(_, ci) {
      var t3,
        t1 = this.image,
        t2 = t1.palette;
      if (t2 != null) {
        t1 = t1.data;
        t3 = this._pixel_uint8$_index;
        if (!(t3 >= 0 && t3 < t1.length))
          return A.ioore(t1, t3);
        t3 = t2.$get$2(0, t1[t3], ci);
        t1 = t3;
      } else if (ci < t1.numChannels) {
        t1 = t1.data;
        t2 = this._pixel_uint8$_index + ci;
        if (!(t2 >= 0 && t2 < t1.length))
          return A.ioore(t1, t2);
        t2 = t1[t2];
        t1 = t2;
      } else
        t1 = 0;
      return t1;
    },
    $index(_, ci) {
      return this.$get$1(0, A._asInt(ci));
    },
    $indexSet(_, ci, value) {
      var t1, t2, t3;
      A._asInt(ci);
      A._asNum(value);
      t1 = this.image;
      if (ci < t1.numChannels) {
        t1 = t1.data;
        t2 = this._pixel_uint8$_index + ci;
        t3 = D.JSNumber_methods.toInt$0(D.JSNumber_methods.clamp$2(value, 0, 255));
        t1.$flags & 2 && A.throwUnsupportedOperation(t1);
        if (!(t2 >= 0 && t2 < t1.length))
          return A.ioore(t1, t2);
        t1[t2] = t3;
      }
    },
    get$r(_) {
      var t3,
        t1 = this.image,
        t2 = t1.palette;
      if (t2 == null)
        if (t1.numChannels > 0) {
          t1 = t1.data;
          t2 = this._pixel_uint8$_index;
          if (!(t2 >= 0 && t2 < t1.length))
            return A.ioore(t1, t2);
          t2 = t1[t2];
          t1 = t2;
        } else
          t1 = 0;
      else {
        t1 = t1.data;
        t3 = this._pixel_uint8$_index;
        if (!(t3 >= 0 && t3 < t1.length))
          return A.ioore(t1, t3);
        t3 = t2.getRed$1(t1[t3]);
        t1 = t3;
      }
      return t1;
    },
    set$r(_, r) {
      var t2, t3,
        t1 = this.image;
      if (t1.numChannels > 0) {
        t1 = t1.data;
        t2 = this._pixel_uint8$_index;
        t3 = D.JSNumber_methods.toInt$0(D.JSNumber_methods.clamp$2(r, 0, 255));
        t1.$flags & 2 && A.throwUnsupportedOperation(t1);
        if (!(t2 >= 0 && t2 < t1.length))
          return A.ioore(t1, t2);
        t1[t2] = t3;
      }
    },
    get$g() {
      var t3, _this = this,
        t1 = _this.image,
        t2 = t1.palette;
      if (t2 == null) {
        t2 = t1.numChannels;
        if (t2 === 2) {
          t1 = t1.data;
          t2 = _this._pixel_uint8$_index;
          if (!(t2 >= 0 && t2 < t1.length))
            return A.ioore(t1, t2);
          t2 = t1[t2];
          t1 = t2;
        } else if (t2 > 1) {
          t1 = t1.data;
          t2 = _this._pixel_uint8$_index + 1;
          if (!(t2 >= 0 && t2 < t1.length))
            return A.ioore(t1, t2);
          t2 = t1[t2];
          t1 = t2;
        } else
          t1 = 0;
      } else {
        t1 = t1.data;
        t3 = _this._pixel_uint8$_index;
        if (!(t3 >= 0 && t3 < t1.length))
          return A.ioore(t1, t3);
        t3 = t2.getGreen$1(t1[t3]);
        t1 = t3;
      }
      return t1;
    },
    set$g(g) {
      var t3,
        t1 = this.image,
        t2 = t1.numChannels;
      if (t2 === 2) {
        t1 = t1.data;
        t2 = this._pixel_uint8$_index;
        t3 = D.JSNumber_methods.toInt$0(D.JSNumber_methods.clamp$2(g, 0, 255));
        t1.$flags & 2 && A.throwUnsupportedOperation(t1);
        if (!(t2 >= 0 && t2 < t1.length))
          return A.ioore(t1, t2);
        t1[t2] = t3;
      } else if (t2 > 1) {
        t1 = t1.data;
        t2 = this._pixel_uint8$_index + 1;
        t3 = D.JSNumber_methods.toInt$0(D.JSNumber_methods.clamp$2(g, 0, 255));
        t1.$flags & 2 && A.throwUnsupportedOperation(t1);
        if (!(t2 >= 0 && t2 < t1.length))
          return A.ioore(t1, t2);
        t1[t2] = t3;
      }
    },
    get$b(_) {
      var t3, _this = this,
        t1 = _this.image,
        t2 = t1.palette;
      if (t2 == null) {
        t2 = t1.numChannels;
        if (t2 === 2) {
          t1 = t1.data;
          t2 = _this._pixel_uint8$_index;
          if (!(t2 >= 0 && t2 < t1.length))
            return A.ioore(t1, t2);
          t2 = t1[t2];
          t1 = t2;
        } else if (t2 > 2) {
          t1 = t1.data;
          t2 = _this._pixel_uint8$_index + 2;
          if (!(t2 >= 0 && t2 < t1.length))
            return A.ioore(t1, t2);
          t2 = t1[t2];
          t1 = t2;
        } else
          t1 = 0;
      } else {
        t1 = t1.data;
        t3 = _this._pixel_uint8$_index;
        if (!(t3 >= 0 && t3 < t1.length))
          return A.ioore(t1, t3);
        t3 = t2.getBlue$1(t1[t3]);
        t1 = t3;
      }
      return t1;
    },
    set$b(_, b) {
      var t3,
        t1 = this.image,
        t2 = t1.numChannels;
      if (t2 === 2) {
        t1 = t1.data;
        t2 = this._pixel_uint8$_index;
        t3 = D.JSNumber_methods.toInt$0(D.JSNumber_methods.clamp$2(b, 0, 255));
        t1.$flags & 2 && A.throwUnsupportedOperation(t1);
        if (!(t2 >= 0 && t2 < t1.length))
          return A.ioore(t1, t2);
        t1[t2] = t3;
      } else if (t2 > 2) {
        t1 = t1.data;
        t2 = this._pixel_uint8$_index + 2;
        t3 = D.JSNumber_methods.toInt$0(D.JSNumber_methods.clamp$2(b, 0, 255));
        t1.$flags & 2 && A.throwUnsupportedOperation(t1);
        if (!(t2 >= 0 && t2 < t1.length))
          return A.ioore(t1, t2);
        t1[t2] = t3;
      }
    },
    get$a(_) {
      var t3, _this = this,
        t1 = _this.image,
        t2 = t1.palette;
      if (t2 == null) {
        t2 = t1.numChannels;
        if (t2 === 2) {
          t1 = t1.data;
          t2 = _this._pixel_uint8$_index + 1;
          if (!(t2 >= 0 && t2 < t1.length))
            return A.ioore(t1, t2);
          t2 = t1[t2];
          t1 = t2;
        } else if (t2 > 3) {
          t1 = t1.data;
          t2 = _this._pixel_uint8$_index + 3;
          if (!(t2 >= 0 && t2 < t1.length))
            return A.ioore(t1, t2);
          t2 = t1[t2];
          t1 = t2;
        } else
          t1 = 255;
      } else {
        t1 = t1.data;
        t3 = _this._pixel_uint8$_index;
        if (!(t3 >= 0 && t3 < t1.length))
          return A.ioore(t1, t3);
        t3 = t2.getAlpha$1(t1[t3]);
        t1 = t3;
      }
      return t1;
    },
    set$a(_, a) {
      var t3,
        t1 = this.image,
        t2 = t1.numChannels;
      if (t2 === 2) {
        t1 = t1.data;
        t2 = this._pixel_uint8$_index + 1;
        t3 = D.JSNumber_methods.toInt$0(D.JSNumber_methods.clamp$2(a, 0, 255));
        t1.$flags & 2 && A.throwUnsupportedOperation(t1);
        if (!(t2 >= 0 && t2 < t1.length))
          return A.ioore(t1, t2);
        t1[t2] = t3;
      } else if (t2 > 3) {
        t1 = t1.data;
        t2 = this._pixel_uint8$_index + 3;
        t3 = D.JSNumber_methods.toInt$0(D.JSNumber_methods.clamp$2(a, 0, 255));
        t1.$flags & 2 && A.throwUnsupportedOperation(t1);
        if (!(t2 >= 0 && t2 < t1.length))
          return A.ioore(t1, t2);
        t1[t2] = t3;
      }
    },
    get$aNormalized() {
      var t1 = this.get$a(0),
        t2 = this.image.palette;
      t2 = t2 == null ? null : t2.get$maxChannelValue();
      return t1 / (t2 == null ? 255 : t2);
    },
    get$luminance() {
      return this.image.numChannels === 2 ? this.get$r(0) : B.getLuminance(this);
    },
    get$iterator(_) {
      return new B.ChannelIterator(this);
    },
    $eq(_, other) {
      var t1, t2, nc, _this = this;
      if (other == null)
        return false;
      if (other instanceof B.PixelUint8)
        return A.Object_hashAll(A.List_List$of(_this, true, A._instanceType(_this)._eval$1("Iterable.E"))) === A.Object_hashAll(A.List_List$of(other, true, A._instanceType(other)._eval$1("Iterable.E")));
      if (type$.List_int._is(other)) {
        t1 = _this.image;
        t2 = t1.palette;
        nc = t2 != null ? t2.numChannels : t1.numChannels;
        t1 = J.getInterceptor$asx(other);
        if (t1.get$length(other) !== nc)
          return false;
        if (_this.$get$1(0, 0) !== t1.$index(other, 0))
          return false;
        if (nc > 1) {
          if (_this.$get$1(0, 1) !== t1.$index(other, 1))
            return false;
          if (nc > 2) {
            if (_this.$get$1(0, 2) !== t1.$index(other, 2))
              return false;
            if (nc > 3)
              if (_this.$get$1(0, 3) !== t1.$index(other, 3))
                return false;
          }
        }
        return true;
      }
      return false;
    },
    get$hashCode(_) {
      return A.Object_hashAll(A.List_List$of(this, true, A._instanceType(this)._eval$1("Iterable.E")));
    },
    convert$1$format(format) {
      return B.convertColor(this, null, format, null);
    },
    $isIterator: 1,
    $isColor1: 1,
    $isPixel: 1
  };
  B.PixelUndefined.prototype = {
    clone$0(_) {
      return new B.PixelUndefined();
    },
    get$length(_) {
      return 0;
    },
    get$format() {
      return C.Format_3;
    },
    get$palette() {
      return null;
    },
    $index(_, index) {
      A._asInt(index);
      return 0;
    },
    $indexSet(_, index, value) {
      A._asInt(index);
      A._asNum(value);
    },
    get$r(_) {
      return 0;
    },
    set$r(_, r) {
    },
    get$g() {
      return 0;
    },
    set$g(g) {
    },
    get$b(_) {
      return 0;
    },
    set$b(_, b) {
    },
    get$a(_) {
      return 0;
    },
    set$a(_, a) {
    },
    get$aNormalized() {
      return 0;
    },
    get$luminance() {
      return 0;
    },
    get$current(_) {
      return this;
    },
    moveNext$0() {
      return false;
    },
    $eq(_, other) {
      if (other == null)
        return false;
      return other instanceof B.PixelUndefined;
    },
    get$hashCode(_) {
      return 0;
    },
    get$iterator(_) {
      return new B.ChannelIterator(this);
    },
    convert$1$format(format) {
      return this;
    },
    $isIterator: 1,
    $isColor1: 1,
    $isPixel: 1
  };
  B.ImageException.prototype = {
    toString$0(_) {
      return "ImageException: " + this.message;
    },
    $isException: 1
  };
  B.OutputBuffer.prototype = {
    clear$0(_) {
      this._output_buffer$_buffer = new Uint8Array(8192);
      this.length = 0;
    },
    writeByte$1(value) {
      var t1, t2, _this = this;
      if (_this.length === _this._output_buffer$_buffer.length)
        _this._expandBuffer$0();
      t1 = _this._output_buffer$_buffer;
      t2 = _this.length++;
      t1.$flags & 2 && A.throwUnsupportedOperation(t1);
      if (!(t2 < t1.length))
        return A.ioore(t1, t2);
      t1[t2] = value & 255;
    },
    writeBytes$1(bytes) {
      var len, t1, t2, t3, t4, _this = this;
      type$.List_int._as(bytes);
      len = bytes.length;
      for (; t1 = _this.length, t2 = t1 + len, t3 = _this._output_buffer$_buffer, t4 = t3.length, t2 > t4;)
        _this._expandBuffer$1(t2 - t4);
      D.NativeUint8List_methods.setRange$3(t3, t1, t2, bytes);
      _this.length += len;
    },
    writeUint16$1(value) {
      var _this = this;
      if (_this.bigEndian) {
        _this.writeByte$1(D.JSInt_methods._shrOtherPositive$1(value, 8) & 255);
        _this.writeByte$1(value & 255);
        return;
      }
      _this.writeByte$1(value & 255);
      _this.writeByte$1(D.JSInt_methods._shrOtherPositive$1(value, 8) & 255);
    },
    writeUint32$1(value) {
      var _this = this;
      if (_this.bigEndian) {
        _this.writeByte$1(D.JSInt_methods._shrOtherPositive$1(value, 24) & 255);
        _this.writeByte$1(D.JSInt_methods._shrOtherPositive$1(value, 16) & 255);
        _this.writeByte$1(D.JSInt_methods._shrOtherPositive$1(value, 8) & 255);
        _this.writeByte$1(value & 255);
        return;
      }
      _this.writeByte$1(value & 255);
      _this.writeByte$1(D.JSInt_methods._shrOtherPositive$1(value, 8) & 255);
      _this.writeByte$1(D.JSInt_methods._shrOtherPositive$1(value, 16) & 255);
      _this.writeByte$1(D.JSInt_methods._shrOtherPositive$1(value, 24) & 255);
    },
    _expandBuffer$1(required) {
      var blockSize, t1, t2, newBuffer;
      if (required != null)
        blockSize = required;
      else {
        t1 = this._output_buffer$_buffer.length;
        blockSize = t1 === 0 ? 8192 : t1 * 2;
      }
      t1 = this._output_buffer$_buffer;
      t2 = t1.length;
      newBuffer = new Uint8Array(t2 + blockSize);
      D.NativeUint8List_methods.setRange$3(newBuffer, 0, t2, t1);
      this._output_buffer$_buffer = newBuffer;
    },
    _expandBuffer$0() {
      return this._expandBuffer$1(null);
    },
    get$length(receiver) {
      return this.length;
    }
  };
  B.ByteWriter.prototype = {
    writeUint16$1(value) {
      var _this = this,
        t1 = _this.data,
        t2 = _this.i;
      t1.$flags & 2 && A.throwUnsupportedOperation(t1, 10);
      t1.setUint16(t2, value, D.C_Endian === _this.endian);
      _this.i += 2;
    },
    writeUint32$1(value) {
      var _this = this,
        t1 = _this.data,
        t2 = _this.i;
      t1.$flags & 2 && A.throwUnsupportedOperation(t1, 11);
      t1.setUint32(t2, value, D.C_Endian === _this.endian);
      _this.i += 4;
    }
  };
  B.Channel.prototype = {
    Channel$2(nx, ny) {
      var t1, t2, n, cy, cx, t3;
      for (t1 = this.ny, t2 = this.nx, n = 0, cy = 0; cy < t1; ++cy) {
        cx = cy > 0 ? 0 : 1;
        t3 = t2 * (t1 - cy);
        for (; cx * t1 < t3; ++cx)
          ++n;
      }
      this.set$__Channel_ac_A(type$.List_double._as(A.List_List$filled(n, 0, false, type$.double)));
    },
    decode$4(_, hash, start, index, scale) {
      var t2, t3,
        t1 = hash.length,
        i = 0;
      while (true) {
        t2 = this.__Channel_ac_A;
        t2 === $ && A.throwLateFieldNI("ac");
        if (!(i < t2.length))
          break;
        t3 = start + (index >>> 1);
        if (!(t3 < t1))
          return A.ioore(hash, t3);
        D.JSArray_methods.$indexSet(t2, i, ((D.JSInt_methods._shrBothPositive$1(hash[t3], (index & 1) << 2) & 15) / 7.5 - 1) * scale);
        ++index;
        ++i;
      }
      return index;
    },
    set$__Channel_ac_A(__Channel_ac_A) {
      this.__Channel_ac_A = type$.List_double._as(__Channel_ac_A);
    }
  };
  B.Image1.prototype = {};
  var typesOffset = hunkHelpers.updateTypes(["double(double)", "+labelSmall,onSurface,shape,surfaceContainerLow(TextStyle,Color,BorderRadiusGeometry,Color)(ChatTheme)", "Widget(BuildContext,AsyncSnapshot<double>)"]);
  B._StreamBuilderBaseState__subscribe_closure.prototype = {
    call$1(data) {
      var t1 = this.$this;
      t1.setState$1(new B._StreamBuilderBaseState__subscribe__closure1(t1, t1.$ti._precomputed1._as(data)));
    },
    $signature() {
      return this.$this.$ti._eval$1("~(1)");
    }
  };
  B._StreamBuilderBaseState__subscribe__closure1.prototype = {
    call$0() {
      var t3, t4,
        t1 = this.$this,
        t2 = t1._widget;
      t2.toString;
      t3 = t1.___StreamBuilderBaseState__summary_A;
      t3 === $ && A.throwLateFieldNI("_summary");
      t2 = t2.$ti;
      t4 = t2._eval$1("AsyncSnapshot<1>");
      t4._as(t3);
      t1.set$___StreamBuilderBaseState__summary_A(t1.$ti._rest[1]._as(new F.AsyncSnapshot(C.ConnectionState_2, t2._precomputed1._as(this.data), null, null, t4)));
    },
    $signature: 0
  };
  B._StreamBuilderBaseState__subscribe_closure1.prototype = {
    call$2(error, stackTrace) {
      var t1 = this.$this;
      t1.setState$1(new B._StreamBuilderBaseState__subscribe__closure(t1, type$.Object._as(error), type$.StackTrace._as(stackTrace)));
    },
    $signature: 18
  };
  B._StreamBuilderBaseState__subscribe__closure.prototype = {
    call$0() {
      var t3,
        t1 = this.$this,
        t2 = t1._widget;
      t2.toString;
      t3 = t1.___StreamBuilderBaseState__summary_A;
      t3 === $ && A.throwLateFieldNI("_summary");
      t2 = t2.$ti._eval$1("AsyncSnapshot<1>");
      t2._as(t3);
      t1.set$___StreamBuilderBaseState__summary_A(t1.$ti._rest[1]._as(new F.AsyncSnapshot(C.ConnectionState_2, null, this.error, this.stackTrace, t2)));
    },
    $signature: 0
  };
  B._StreamBuilderBaseState__subscribe_closure0.prototype = {
    call$0() {
      var t1 = this.$this;
      t1.setState$1(new B._StreamBuilderBaseState__subscribe__closure0(t1));
    },
    $signature: 0
  };
  B._StreamBuilderBaseState__subscribe__closure0.prototype = {
    call$0() {
      var t3,
        t1 = this.$this,
        t2 = t1._widget;
      t2.toString;
      t3 = t1.___StreamBuilderBaseState__summary_A;
      t3 === $ && A.throwLateFieldNI("_summary");
      t2.$ti._eval$1("AsyncSnapshot<1>")._as(t3);
      t1.set$___StreamBuilderBaseState__summary_A(t1.$ti._rest[1]._as(new F.AsyncSnapshot(K.ConnectionState_3, t3.data, t3.error, t3.stackTrace, t3.$ti)));
    },
    $signature: 0
  };
  B.precacheImage_closure.prototype = {
    call$2(image, sync) {
      var t1;
      type$.nullable_ImageInfo._as(image);
      A._asBool(sync);
      t1 = this.completer;
      if ((t1.future._state & 30) === 0)
        t1.complete$0(0);
      t1 = $.SchedulerBinding__instance;
      t1.toString;
      D.JSArray_methods.add$1(t1.SchedulerBinding__postFrameCallbacks, type$.void_Function_Duration._as(new B.precacheImage__closure(this._box_0, image, this.stream)));
    },
    $signature: 103
  };
  B.precacheImage__closure.prototype = {
    call$1(timeStamp) {
      var t1;
      type$.Duration._as(timeStamp);
      t1 = this.image;
      if (t1 != null)
        t1.dispose$0();
      t1 = this._box_0.listener;
      t1.toString;
      this.stream.removeListener$1(0, t1);
    },
    $signature: 2
  };
  B.precacheImage_closure0.prototype = {
    call$2(exception, stackTrace) {
      var t1;
      type$.Object._as(exception);
      type$.nullable_StackTrace._as(stackTrace);
      t1 = this.completer;
      if ((t1.future._state & 30) === 0)
        t1.complete$0(0);
      t1 = this._box_0.listener;
      t1.toString;
      this.stream.removeListener$1(0, t1);
      t1 = A.ErrorDescription$("image failed to precache");
      A.FlutterError_reportError(new A.FlutterErrorDetails(exception, stackTrace, "image resource service", t1, null, true));
    },
    $signature: 53
  };
  B._FlyerChatImageMessageState_initState_closure.prototype = {
    call$1(dimensions) {
      var t1, t2, t3, t4;
      type$.Record_2_double_and_double._as(dimensions);
      t1 = this.$this;
      if (t1._framework$_element != null) {
        t2 = dimensions._0;
        t3 = dimensions._1;
        t1.___FlyerChatImageMessageState__aspectRatio_A = t2 / t3;
        t4 = t1.___FlyerChatImageMessageState__chatController_F;
        t4 === $ && A.throwLateFieldNI("_chatController");
        t1 = t1._widget.message;
        t4.updateMessage$2(t1, t1.copyWith$2$height$width(t3, t2));
      }
    },
    $signature: 359
  };
  B._FlyerChatImageMessageState_didUpdateWidget_closure.prototype = {
    call$1(__wc0_formal) {
      var t1 = this.$this;
      if (t1._framework$_element != null)
        t1.set$___FlyerChatImageMessageState__imageProvider_A(type$.ImageProvider_Object._as(this.newImage));
    },
    $signature: 9
  };
  B._FlyerChatImageMessageState_build_closure.prototype = {
    call$1(t) {
      var t1;
      type$.ChatTheme._as(t);
      t1 = t.colors;
      return new A._Record_4_labelSmall_onSurface_shape_surfaceContainerLow([t.typography.labelSmall, t1.onSurface, t.shape, t1.surfaceContainerLow]);
    },
    $signature: typesOffset + 1
  };
  B._FlyerChatImageMessageState__buildStack_closure0.prototype = {
    call$3(context, child, loadingProgress) {
      var t1, t2, t3, _null = null;
      type$.BuildContext._as(context);
      type$.Widget._as(child);
      type$.nullable_ImageChunkEvent._as(loadingProgress);
      if (loadingProgress == null)
        return child;
      t1 = this.$this;
      t1._widget.toString;
      t2 = this.theme._values;
      t3 = t2[3].withValues$1$alpha(0.5);
      t1._widget.toString;
      t1 = t2[1].withValues$1$alpha(0.8);
      t2 = loadingProgress.expectedTotalBytes;
      return E.Container$(_null, E.Center$(M.CircularProgressIndicator$(_null, t1, _null, _null, _null, _null, D.StrokeCap_1, _null, t2 != null ? loadingProgress.cumulativeBytesLoaded / t2 : _null, _null), _null, _null, _null), D.Clip_0, t3, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null);
    },
    "call*": "call$3",
    $requiredArgCount: 3,
    $signature: 82
  };
  B._FlyerChatImageMessageState__buildStack_closure.prototype = {
    call$4(context, child, frame, wasSynchronouslyLoaded) {
      type$.BuildContext._as(context);
      type$.Widget._as(child);
      A._asIntQ(frame);
      A._asBool(wasSynchronouslyLoaded);
      this.$this._widget.toString;
      if (wasSynchronouslyLoaded)
        return child;
      return U.AnimatedOpacity$(child, H.Cubic_O6W, Z.Duration_250000, frame == null ? 0 : 1);
    },
    "call*": "call$4",
    $requiredArgCount: 4,
    $signature: 154
  };
  B._FlyerChatImageMessageState__buildStack_closure1.prototype = {
    call$2(context, snapshot) {
      var t1, t2, t3, t4, _null = null;
      type$.BuildContext._as(context);
      t1 = type$.AsyncSnapshot_double._as(snapshot).data;
      if (t1 != null) {
        if (typeof t1 !== "number")
          return t1.$ge();
        t2 = t1 >= 1;
      } else
        t2 = true;
      if (t2)
        return S.SizedBox_null_null_null_null;
      t2 = this.$this;
      t2._widget.toString;
      t3 = this.theme._values;
      t4 = t3[3].withValues$1$alpha(0.5);
      t2._widget.toString;
      t2 = t3[1].withValues$1$alpha(0.8);
      return E.Container$(_null, E.Center$(M.CircularProgressIndicator$(_null, t2, _null, _null, _null, _null, D.StrokeCap_1, _null, t1, _null), _null, _null, _null), D.Clip_0, t4, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null);
    },
    $signature: typesOffset + 2
  };
  B.getImageDimensions_closure.prototype = {
    call$1(key) {
      var stream, t1, listener;
      type$.Object._as(key);
      stream = this.provider.resolve$1(G.ImageConfiguration_Sfv);
      t1 = this.completer;
      listener = new A.ImageStreamListener(new B.getImageDimensions__closure(t1), null, new B.getImageDimensions__closure0(t1));
      stream.addListener$1(0, listener);
      t1.future.whenComplete$1(new B.getImageDimensions__closure1(stream, listener));
    },
    $signature: 127
  };
  B.getImageDimensions__closure.prototype = {
    call$2(image, synchronousCall) {
      var t1, t2;
      type$.ImageInfo._as(image);
      A._asBool(synchronousCall);
      t1 = image.get$image(image);
      t1 = t1.get$width(t1);
      t2 = image.get$image(image);
      this.completer.complete$1(0, new A._Record_2(t1, t2.get$height(t2)));
    },
    $signature: 66
  };
  B.getImageDimensions__closure0.prototype = {
    call$2(exception, stackTrace) {
      this.completer.completeError$2(type$.Object._as(exception), type$.nullable_StackTrace._as(stackTrace));
    },
    $signature: 53
  };
  B.getImageDimensions__closure1.prototype = {
    call$0() {
      this.stream.removeListener$1(0, this.listener);
    },
    $signature: 3
  };
  B.getImageDimensions_closure0.prototype = {
    call$1(error) {
      var t1 = error == null ? type$.Object._as(error) : error;
      this.completer.completeError$1(t1);
    },
    $signature: 4
  };
  (function aliases() {
    var _ = B.__FlyerChatImageMessageState_State_TickerProviderStateMixin.prototype;
    _.super$__FlyerChatImageMessageState_State_TickerProviderStateMixin$dispose = _.dispose$0;
  })();
  (function installTearOffs() {
    var _instance_1_u = hunkHelpers._instance_1u;
    var _;
    _instance_1_u(_ = B.RenderAspectRatio.prototype, "get$computeMinIntrinsicWidth", "computeMinIntrinsicWidth$1", 0);
    _instance_1_u(_, "get$computeMaxIntrinsicWidth", "computeMaxIntrinsicWidth$1", 0);
    _instance_1_u(_, "get$computeMinIntrinsicHeight", "computeMinIntrinsicHeight$1", 0);
    _instance_1_u(_, "get$computeMaxIntrinsicHeight", "computeMaxIntrinsicHeight$1", 0);
  })();
  (function inheritance() {
    var _mixinHard = hunkHelpers.mixinHard,
      _inheritMany = hunkHelpers.inheritMany,
      _inherit = hunkHelpers.inherit;
    _inheritMany(A.Object, [B.BlurHash, B.BlurHashDecodeException, B.ColorTriplet, B.ChannelIterator, B.IfdContainer, B.ExifTag, B.IfdDirectory, B.IfdValue, B.Encoder, B.ImageException, B.OutputBuffer, B.ByteWriter, B.Channel, B.Image1]);
    _inherit(B.MemoryImage, Y.ImageProvider);
    _inherit(B.RenderAspectRatio, A.RenderProxyBox);
    _inheritMany(A.StatefulWidget, [B.StreamBuilderBase, B.FlyerChatImageMessage]);
    _inheritMany(A.State, [B._StreamBuilderBaseState, B.__FlyerChatImageMessageState_State_TickerProviderStateMixin]);
    _inheritMany(A.Closure, [B._StreamBuilderBaseState__subscribe_closure, B.precacheImage__closure, B._FlyerChatImageMessageState_initState_closure, B._FlyerChatImageMessageState_didUpdateWidget_closure, B._FlyerChatImageMessageState_build_closure, B._FlyerChatImageMessageState__buildStack_closure0, B._FlyerChatImageMessageState__buildStack_closure, B.getImageDimensions_closure, B.getImageDimensions_closure0]);
    _inheritMany(A.Closure0Args, [B._StreamBuilderBaseState__subscribe__closure1, B._StreamBuilderBaseState__subscribe__closure, B._StreamBuilderBaseState__subscribe_closure0, B._StreamBuilderBaseState__subscribe__closure0, B.getImageDimensions__closure1]);
    _inheritMany(A.Closure2Args, [B._StreamBuilderBaseState__subscribe_closure1, B.precacheImage_closure, B.precacheImage_closure0, B._FlyerChatImageMessageState__buildStack_closure1, B.getImageDimensions__closure, B.getImageDimensions__closure0]);
    _inherit(B.StreamBuilder, B.StreamBuilderBase);
    _inherit(B.AspectRatio, A.SingleChildRenderObjectWidget);
    _inherit(B._FlyerChatImageMessageState, B.__FlyerChatImageMessageState_State_TickerProviderStateMixin);
    _inherit(B.TimeAndStatus0, A.StatelessWidget);
    _inheritMany(A._Enum, [B.ChannelOrder, B.Format, B.IfdValueType, B.JpegChroma, B.FrameType]);
    _inheritMany(A.Iterable, [B.ColorFloat16, B.ColorFloat32, B.ColorFloat64, B.ColorInt16, B.ColorInt32, B.ColorInt8, B.ColorUint1, B.ColorUint16, B.ColorUint2, B.ColorUint32, B.ColorUint4, B.ColorUint8, B.ConstColorUint8, B.Image0, B.ImageData1, B.PixelFloat16, B.PixelFloat32, B.PixelFloat64, B.PixelInt16, B.PixelInt32, B.PixelInt8, B.PixelUint1, B.PixelUint16, B.PixelUint2, B.PixelUint32, B.PixelUint4, B.PixelUint8, B.PixelUndefined]);
    _inherit(B.ConstColorRgb8, B.ConstColorUint8);
    _inherit(B.ExifData, B.IfdContainer);
    _inherit(B.IfdValueLong, B.IfdValue);
    _inherit(B.JpegEncoder, B.Encoder);
    _inheritMany(B.ImageData1, [B.ImageDataFloat16, B.ImageDataFloat32, B.ImageDataFloat64, B.ImageDataInt16, B.ImageDataInt32, B.ImageDataInt8, B.ImageDataUint1, B.ImageDataUint16, B.ImageDataUint2, B.ImageDataUint32, B.ImageDataUint4, B.ImageDataUint8]);
    _mixinHard(B.__FlyerChatImageMessageState_State_TickerProviderStateMixin, E.TickerProviderStateMixin);
  })();
  A._Universe_addRules(init.typeUniverse, JSON.parse('{"BlurHashDecodeException":{"Exception":[]},"MemoryImage":{"ImageProvider":["MemoryImage"],"ImageProvider.T":"MemoryImage"},"RenderAspectRatio":{"RenderBox":[],"RenderObjectWithChildMixin":["RenderBox"],"RenderObject":[],"DiagnosticableTree":[],"HitTestTarget":[],"RenderObjectWithChildMixin.0":"RenderBox"},"StreamBuilderBase":{"StatefulWidget":[],"Widget":[],"DiagnosticableTree":[]},"_StreamBuilderBaseState":{"State":["StreamBuilderBase<1,2>"],"State.T":"StreamBuilderBase<1,2>"},"StreamBuilder":{"StreamBuilderBase":["1","AsyncSnapshot<1>"],"StatefulWidget":[],"Widget":[],"DiagnosticableTree":[],"StreamBuilderBase.T":"1","StreamBuilderBase.S":"AsyncSnapshot<1>"},"AspectRatio":{"SingleChildRenderObjectWidget":[],"RenderObjectWidget":[],"Widget":[],"DiagnosticableTree":[]},"FlyerChatImageMessage":{"StatefulWidget":[],"Widget":[],"DiagnosticableTree":[]},"_FlyerChatImageMessageState":{"TickerProviderStateMixin":["FlyerChatImageMessage"],"State":["FlyerChatImageMessage"],"TickerProvider":[],"State.T":"FlyerChatImageMessage"},"TimeAndStatus0":{"StatelessWidget":[],"Widget":[],"DiagnosticableTree":[]},"ChannelIterator":{"Iterator":["num"]},"ChannelOrder":{"Enum":[]},"ColorFloat16":{"Color1":[],"Iterable":["num"],"Iterable.E":"num"},"ColorFloat32":{"Color1":[],"Iterable":["num"],"Iterable.E":"num"},"ColorFloat64":{"Color1":[],"Iterable":["num"],"Iterable.E":"num"},"ColorInt16":{"Color1":[],"Iterable":["num"],"Iterable.E":"num"},"ColorInt32":{"Color1":[],"Iterable":["num"],"Iterable.E":"num"},"ColorInt8":{"Color1":[],"Iterable":["num"],"Iterable.E":"num"},"ColorUint1":{"Color1":[],"Iterable":["num"],"Iterable.E":"num"},"ColorUint16":{"Color1":[],"Iterable":["num"],"Iterable.E":"num"},"ColorUint2":{"Color1":[],"Iterable":["num"],"Iterable.E":"num"},"ColorUint32":{"Color1":[],"Iterable":["num"],"Iterable.E":"num"},"ColorUint4":{"Color1":[],"Iterable":["num"],"Iterable.E":"num"},"ColorUint8":{"Color1":[],"Iterable":["num"],"Iterable.E":"num"},"ConstColorUint8":{"Color1":[],"Iterable":["num"],"Iterable.E":"num"},"ConstColorRgb8":{"Color1":[],"Iterable":["num"],"Iterable.E":"num"},"Format":{"Enum":[]},"ExifData":{"IfdContainer":[]},"IfdValueType":{"Enum":[]},"IfdValueLong":{"IfdValue":[]},"JpegChroma":{"Enum":[]},"Image0":{"Iterable":["Pixel"],"Iterable.E":"Pixel"},"FrameType":{"Enum":[]},"ImageData1":{"Iterable":["Pixel"]},"ImageDataFloat16":{"ImageData1":[],"Iterable":["Pixel"],"Iterable.E":"Pixel"},"ImageDataFloat32":{"ImageData1":[],"Iterable":["Pixel"],"Iterable.E":"Pixel"},"ImageDataFloat64":{"ImageData1":[],"Iterable":["Pixel"],"Iterable.E":"Pixel"},"ImageDataInt16":{"ImageData1":[],"Iterable":["Pixel"],"Iterable.E":"Pixel"},"ImageDataInt32":{"ImageData1":[],"Iterable":["Pixel"],"Iterable.E":"Pixel"},"ImageDataInt8":{"ImageData1":[],"Iterable":["Pixel"],"Iterable.E":"Pixel"},"ImageDataUint1":{"ImageData1":[],"Iterable":["Pixel"],"Iterable.E":"Pixel"},"ImageDataUint16":{"ImageData1":[],"Iterable":["Pixel"],"Iterable.E":"Pixel"},"ImageDataUint2":{"ImageData1":[],"Iterable":["Pixel"],"Iterable.E":"Pixel"},"ImageDataUint32":{"ImageData1":[],"Iterable":["Pixel"],"Iterable.E":"Pixel"},"ImageDataUint4":{"ImageData1":[],"Iterable":["Pixel"],"Iterable.E":"Pixel"},"ImageDataUint8":{"ImageData1":[],"Iterable":["Pixel"],"Iterable.E":"Pixel"},"PixelFloat16":{"Pixel":[],"Color1":[],"Iterable":["num"],"Iterator":["Pixel"],"Iterable.E":"num"},"PixelFloat32":{"Pixel":[],"Color1":[],"Iterable":["num"],"Iterator":["Pixel"],"Iterable.E":"num"},"PixelFloat64":{"Pixel":[],"Color1":[],"Iterable":["num"],"Iterator":["Pixel"],"Iterable.E":"num"},"PixelInt16":{"Pixel":[],"Color1":[],"Iterable":["num"],"Iterator":["Pixel"],"Iterable.E":"num"},"PixelInt32":{"Pixel":[],"Color1":[],"Iterable":["num"],"Iterator":["Pixel"],"Iterable.E":"num"},"PixelInt8":{"Pixel":[],"Color1":[],"Iterable":["num"],"Iterator":["Pixel"],"Iterable.E":"num"},"PixelUint1":{"Pixel":[],"Color1":[],"Iterable":["num"],"Iterator":["Pixel"],"Iterable.E":"num"},"PixelUint16":{"Pixel":[],"Color1":[],"Iterable":["num"],"Iterator":["Pixel"],"Iterable.E":"num"},"PixelUint2":{"Pixel":[],"Color1":[],"Iterable":["num"],"Iterator":["Pixel"],"Iterable.E":"num"},"PixelUint32":{"Pixel":[],"Color1":[],"Iterable":["num"],"Iterator":["Pixel"],"Iterable.E":"num"},"PixelUint4":{"Pixel":[],"Color1":[],"Iterable":["num"],"Iterator":["Pixel"],"Iterable.E":"num"},"PixelUint8":{"Pixel":[],"Color1":[],"Iterable":["num"],"Iterator":["Pixel"],"Iterable.E":"num"},"PixelUndefined":{"Pixel":[],"Color1":[],"Iterable":["num"],"Iterator":["Pixel"],"Iterable.E":"num"},"ImageException":{"Exception":[]},"Pixel":{"Color1":[],"Iterator":["Pixel"],"Iterable":["num"]}}'));
  var type$ = (function rtii() {
    var findType = A.findType;
    return {
      AsyncSnapshot_double: findType("AsyncSnapshot<double>"),
      BoxConstraints: findType("BoxConstraints"),
      BuildContext: findType("BuildContext"),
      ChatController: findType("ChatController"),
      ChatTheme: findType("ChatTheme"),
      Codec: findType("Codec0"),
      Color: findType("Color1"),
      ColorTriplet: findType("ColorTriplet"),
      ConstantStringMap_String_int: findType("ConstantStringMap<String,int>"),
      ContainerLayer: findType("ContainerLayer0"),
      DateFormat: findType("DateFormat"),
      Directionality: findType("Directionality"),
      Duration: findType("Duration"),
      Float32List: findType("Float32List"),
      FlyerChatImageMessage: findType("FlyerChatImageMessage"),
      Future_Codec_Function_ImmutableBuffer: findType("Future<Codec0>(ImmutableBuffer)"),
      Future_Codec_Function_ImmutableBuffer_$named_allowUpscaling_bool_and_cacheHeight_nullable_int_and_cacheWidth_nullable_int: findType("Future<Codec0>(ImmutableBuffer{allowUpscaling:bool,cacheHeight:int?,cacheWidth:int?})"),
      Future_Codec_Function_ImmutableBuffer_$named_getTargetSize_nullable_TargetImageSize_Function_int_int: findType("Future<Codec0>(ImmutableBuffer{getTargetSize:TargetImageSize(int,int)?})"),
      GeneralConstantMap_Format_int: findType("GeneralConstantMap<Format,int>"),
      IfdDirectory: findType("IfdDirectory"),
      IfdValue: findType("IfdValue"),
      ImageInfo: findType("ImageInfo"),
      ImageProvider_Object: findType("ImageProvider<Object>"),
      JSArray_Image: findType("JSArray<Image0>"),
      JSArray_Widget: findType("JSArray<Widget>"),
      JSArray_int: findType("JSArray<int>"),
      JSArray_nullable_List_int: findType("JSArray<List<int>?>"),
      List_ColorTriplet: findType("List<ColorTriplet>"),
      List_Image: findType("List<Image0>"),
      List_double: findType("List<double>"),
      List_int: findType("List<int>"),
      List_nullable_List_int: findType("List<List<int>?>"),
      MemoryImage: findType("MemoryImage"),
      Null: findType("Null"),
      Object: findType("Object"),
      Record_2_double_and_double: findType("+(double,double)"),
      Record_4_TextStyle_labelSmall_and_Color_onSurface_and_BorderRadiusGeometry_shape_and_Color_surfaceContainerLow: findType("+labelSmall,onSurface,shape,surfaceContainerLow(TextStyle,Color,BorderRadiusGeometry,Color)"),
      RenderAspectRatio: findType("RenderAspectRatio"),
      Size: findType("Size"),
      StackTrace: findType("StackTrace"),
      StreamBuilder_double: findType("StreamBuilder<double>"),
      String: findType("String"),
      SynchronousFuture_MemoryImage: findType("SynchronousFuture<MemoryImage>"),
      SynchronousFuture_NetworkImage: findType("SynchronousFuture<NetworkImage0>"),
      TextBaseline: findType("TextBaseline"),
      Widget: findType("Widget"),
      _AsyncCompleter_Record_2_double_and_double: findType("_AsyncCompleter<+(double,double)>"),
      _AsyncCompleter_void: findType("_AsyncCompleter<~>"),
      _Future_Record_2_double_and_double: findType("_Future<+(double,double)>"),
      _Future_void: findType("_Future<~>"),
      double: findType("double"),
      int: findType("int"),
      nullable_Color: findType("Color1?"),
      nullable_ImageChunkEvent: findType("ImageChunkEvent?"),
      nullable_ImageInfo: findType("ImageInfo?"),
      nullable_ImageProvider_Object: findType("ImageProvider<Object>?"),
      nullable_List_int: findType("List<int>?"),
      nullable_List_nullable_List_int: findType("List<List<int>?>?"),
      nullable_StackTrace: findType("StackTrace?"),
      nullable_int: findType("int?"),
      void_Function_Duration: findType("~(Duration)")
    };
  })();
  (function constants() {
    var makeConstList = hunkHelpers.makeConstList;
    C.BoxConstraints_yse = new A.BoxConstraints(0, 1 / 0, 0, 300);
    C.ChannelOrder_0 = new B.ChannelOrder(0, "rgba");
    C.ChannelOrder_1 = new B.ChannelOrder(1, "bgra");
    C.ChannelOrder_2 = new B.ChannelOrder(2, "abgr");
    C.ChannelOrder_3 = new B.ChannelOrder(3, "argb");
    C.ChannelOrder_4 = new B.ChannelOrder(4, "rgb");
    C.ChannelOrder_5 = new B.ChannelOrder(5, "bgr");
    C.ChannelOrder_6 = new B.ChannelOrder(6, "grayAlpha");
    C.ChannelOrder_7 = new B.ChannelOrder(7, "red");
    C.ConnectionState_2 = new F.ConnectionState(2, "active");
    C.ConstColorRgb8_4294967295 = new B.ConstColorRgb8(4294967295);
    C.Format_0 = new B.Format(0, "uint1");
    C.Format_1 = new B.Format(1, "uint2");
    C.Format_10 = new B.Format(10, "float32");
    C.Format_11 = new B.Format(11, "float64");
    C.Format_2 = new B.Format(2, "uint4");
    C.Format_3 = new B.Format(3, "uint8");
    C.Format_4 = new B.Format(4, "uint16");
    C.Format_5 = new B.Format(5, "uint32");
    C.Format_6 = new B.Format(6, "int8");
    C.Format_7 = new B.Format(7, "int16");
    C.Format_8 = new B.Format(8, "int32");
    C.Format_9 = new B.Format(9, "float16");
    C.FrameType_2 = new B.FrameType(2, "sequence");
    C.IfdValueType_0 = new B.IfdValueType(0, "none");
    C.IfdValueType_2 = new B.IfdValueType(2, "ascii");
    C.IfdValueType_3 = new B.IfdValueType(3, "short");
    C.IfdValueType_4 = new B.IfdValueType(4, "long");
    C.IfdValueType_5 = new B.IfdValueType(5, "rational");
    C.IfdValueType_7 = new B.IfdValueType(7, "undefined");
    C.JpegChroma_0 = new B.JpegChroma(0, "yuv444");
    C.List_252_243_207_63 = A._setArrayType(makeConstList([252, 243, 207, 63]), type$.JSArray_int);
    C.List_2BR = A._setArrayType(makeConstList([0, 0, 2, 1, 3, 3, 2, 4, 3, 5, 5, 4, 4, 0, 0, 1, 125]), type$.JSArray_int);
    C.List_63_207_243_252 = A._setArrayType(makeConstList([63, 207, 243, 252]), type$.JSArray_int);
    C.List_6sz = A._setArrayType(makeConstList([17, 18, 24, 47, 99, 99, 99, 99, 18, 21, 26, 66, 99, 99, 99, 99, 24, 26, 56, 99, 99, 99, 99, 99, 47, 66, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]), type$.JSArray_int);
    C.List_74c = A._setArrayType(makeConstList([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), type$.JSArray_int);
    C.List_A98 = A._setArrayType(makeConstList([1, 1.387039845, 1.306562965, 1.175875602, 1, 0.785694958, 0.5411961, 0.275899379]), A.findType("JSArray<double>"));
    C.List_CZS = A._setArrayType(makeConstList([1, 2, 3, 0, 4, 17, 5, 18, 33, 49, 65, 6, 19, 81, 97, 7, 34, 113, 20, 50, 129, 145, 161, 8, 35, 66, 177, 193, 21, 82, 209, 240, 36, 51, 98, 114, 130, 9, 10, 22, 23, 24, 25, 26, 37, 38, 39, 40, 41, 42, 52, 53, 54, 55, 56, 57, 58, 67, 68, 69, 70, 71, 72, 73, 74, 83, 84, 85, 86, 87, 88, 89, 90, 99, 100, 101, 102, 103, 104, 105, 106, 115, 116, 117, 118, 119, 120, 121, 122, 131, 132, 133, 134, 135, 136, 137, 138, 146, 147, 148, 149, 150, 151, 152, 153, 154, 162, 163, 164, 165, 166, 167, 168, 169, 170, 178, 179, 180, 181, 182, 183, 184, 185, 186, 194, 195, 196, 197, 198, 199, 200, 201, 202, 210, 211, 212, 213, 214, 215, 216, 217, 218, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250]), type$.JSArray_int);
    C.List_EVh = A._setArrayType(makeConstList([0, 1, 5, 6, 14, 15, 27, 28, 2, 4, 7, 13, 16, 26, 29, 42, 3, 8, 12, 17, 25, 30, 41, 43, 9, 11, 18, 24, 31, 40, 44, 53, 10, 19, 23, 32, 39, 45, 52, 54, 20, 22, 33, 38, 46, 51, 55, 60, 21, 34, 37, 47, 50, 56, 59, 61, 35, 36, 48, 49, 57, 58, 62, 63]), type$.JSArray_int);
    C.List_GUW = A._setArrayType(makeConstList([0, 0, 2, 1, 2, 4, 4, 3, 4, 7, 5, 4, 4, 0, 1, 2, 119]), type$.JSArray_int);
    C.List_Kt5 = A._setArrayType(makeConstList([254, 253, 251, 247, 239, 223, 191, 127]), type$.JSArray_int);
    C.List_NZS = A._setArrayType(makeConstList([0, 0, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0]), type$.JSArray_int);
    C.List_X1N = A._setArrayType(makeConstList([0, 1, 2, 3, 17, 4, 5, 33, 49, 6, 18, 65, 81, 7, 97, 113, 19, 34, 50, 129, 8, 20, 66, 145, 161, 177, 193, 9, 35, 51, 82, 240, 21, 98, 114, 209, 10, 22, 36, 52, 225, 37, 241, 23, 24, 25, 26, 38, 39, 40, 41, 42, 53, 54, 55, 56, 57, 58, 67, 68, 69, 70, 71, 72, 73, 74, 83, 84, 85, 86, 87, 88, 89, 90, 99, 100, 101, 102, 103, 104, 105, 106, 115, 116, 117, 118, 119, 120, 121, 122, 130, 131, 132, 133, 134, 135, 136, 137, 138, 146, 147, 148, 149, 150, 151, 152, 153, 154, 162, 163, 164, 165, 166, 167, 168, 169, 170, 178, 179, 180, 181, 182, 183, 184, 185, 186, 194, 195, 196, 197, 198, 199, 200, 201, 202, 210, 211, 212, 213, 214, 215, 216, 217, 218, 226, 227, 228, 229, 230, 231, 232, 233, 234, 242, 243, 244, 245, 246, 247, 248, 249, 250]), type$.JSArray_int);
    C.List_aYr = A._setArrayType(makeConstList([16, 11, 10, 16, 24, 40, 51, 61, 12, 12, 14, 19, 26, 58, 60, 55, 14, 13, 16, 24, 40, 57, 69, 56, 14, 17, 22, 29, 51, 87, 80, 62, 18, 22, 37, 56, 68, 109, 103, 77, 24, 35, 55, 64, 81, 104, 113, 92, 49, 64, 78, 87, 103, 121, 120, 101, 72, 92, 95, 98, 112, 100, 103, 99]), type$.JSArray_int);
    C.List_w4E = A._setArrayType(makeConstList([0, 1, 1, 2, 4, 8, 1, 1, 2, 4, 8, 4, 8]), type$.JSArray_int);
    C.List_zcj = A._setArrayType(makeConstList([0, 0, 1, 5, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0]), type$.JSArray_int);
    C.Object_XVG = {ProcessingSoftware: 0, SubfileType: 1, OldSubfileType: 2, ImageWidth: 3, ImageLength: 4, ImageHeight: 5, BitsPerSample: 6, Compression: 7, PhotometricInterpretation: 8, Thresholding: 9, CellWidth: 10, CellLength: 11, FillOrder: 12, DocumentName: 13, ImageDescription: 14, Make: 15, Model: 16, StripOffsets: 17, Orientation: 18, SamplesPerPixel: 19, RowsPerStrip: 20, StripByteCounts: 21, MinSampleValue: 22, MaxSampleValue: 23, XResolution: 24, YResolution: 25, PlanarConfiguration: 26, PageName: 27, XPosition: 28, YPosition: 29, GrayResponseUnit: 30, GrayResponseCurve: 31, T4Options: 32, T6Options: 33, ResolutionUnit: 34, PageNumber: 35, ColorResponseUnit: 36, TransferFunction: 37, Software: 38, DateTime: 39, Artist: 40, HostComputer: 41, Predictor: 42, WhitePoint: 43, PrimaryChromaticities: 44, ColorMap: 45, HalftoneHints: 46, TileWidth: 47, TileLength: 48, TileOffsets: 49, TileByteCounts: 50, BadFaxLines: 51, CleanFaxData: 52, ConsecutiveBadFaxLines: 53, InkSet: 54, InkNames: 55, NumberofInks: 56, DotRange: 57, TargetPrinter: 58, ExtraSamples: 59, SampleFormat: 60, SMinSampleValue: 61, SMaxSampleValue: 62, TransferRange: 63, ClipPath: 64, JPEGProc: 65, JPEGInterchangeFormat: 66, JPEGInterchangeFormatLength: 67, YCbCrCoefficients: 68, YCbCrSubSampling: 69, YCbCrPositioning: 70, ReferenceBlackWhite: 71, ApplicationNotes: 72, Rating: 73, CFARepeatPatternDim: 74, CFAPattern: 75, BatteryLevel: 76, Copyright: 77, ExposureTime: 78, FNumber: 79, "IPTC-NAA": 80, ExifOffset: 81, InterColorProfile: 82, ExposureProgram: 83, SpectralSensitivity: 84, GPSOffset: 85, ISOSpeed: 86, OECF: 87, SensitivityType: 88, RecommendedExposureIndex: 89, ExifVersion: 90, DateTimeOriginal: 91, DateTimeDigitized: 92, OffsetTime: 93, OffsetTimeOriginal: 94, OffsetTimeDigitized: 95, ComponentsConfiguration: 96, CompressedBitsPerPixel: 97, ShutterSpeedValue: 98, ApertureValue: 99, BrightnessValue: 100, ExposureBiasValue: 101, MaxApertureValue: 102, SubjectDistance: 103, MeteringMode: 104, LightSource: 105, Flash: 106, FocalLength: 107, SubjectArea: 108, MakerNote: 109, UserComment: 110, SubSecTime: 111, SubSecTimeOriginal: 112, SubSecTimeDigitized: 113, XPTitle: 114, XPComment: 115, XPAuthor: 116, XPKeywords: 117, XPSubject: 118, FlashPixVersion: 119, ColorSpace: 120, ExifImageWidth: 121, ExifImageLength: 122, RelatedSoundFile: 123, InteroperabilityOffset: 124, FlashEnergy: 125, SpatialFrequencyResponse: 126, FocalPlaneXResolution: 127, FocalPlaneYResolution: 128, FocalPlaneResolutionUnit: 129, SubjectLocation: 130, ExposureIndex: 131, SensingMethod: 132, FileSource: 133, SceneType: 134, CVAPattern: 135, CustomRendered: 136, ExposureMode: 137, WhiteBalance: 138, DigitalZoomRatio: 139, FocalLengthIn35mmFilm: 140, SceneCaptureType: 141, GainControl: 142, Contrast: 143, Saturation: 144, Sharpness: 145, DeviceSettingDescription: 146, SubjectDistanceRange: 147, ImageUniqueID: 148, CameraOwnerName: 149, BodySerialNumber: 150, LensSpecification: 151, LensMake: 152, LensModel: 153, LensSerialNumber: 154, Gamma: 155, PrintIM: 156, Padding: 157, OffsetSchema: 158, OwnerName: 159, SerialNumber: 160, InteropIndex: 161, InteropVersion: 162, RelatedImageFileFormat: 163, RelatedImageWidth: 164, RelatedImageLength: 165, GPSVersionID: 166, GPSLatitudeRef: 167, GPSLatitude: 168, GPSLongitudeRef: 169, GPSLongitude: 170, GPSAltitudeRef: 171, GPSAltitude: 172, GPSTimeStamp: 173, GPSSatellites: 174, GPSStatus: 175, GPSMeasureMode: 176, GPSDOP: 177, GPSSpeedRef: 178, GPSSpeed: 179, GPSTrackRef: 180, GPSTrack: 181, GPSImgDirectionRef: 182, GPSImgDirection: 183, GPSMapDatum: 184, GPSDestLatitudeRef: 185, GPSDestLatitude: 186, GPSDestLongitudeRef: 187, GPSDestLongitude: 188, GPSDestBearingRef: 189, GPSDestBearing: 190, GPSDestDistanceRef: 191, GPSDestDistance: 192, GPSProcessingMethod: 193, GPSAreaInformation: 194, GPSDate: 195, GPSDifferential: 196};
    C.Map_1DOpr = new A.ConstantStringMap(C.Object_XVG, [11, 254, 255, 256, 257, 257, 258, 259, 262, 263, 264, 265, 266, 269, 270, 271, 272, 273, 274, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 290, 291, 292, 293, 296, 297, 300, 301, 305, 306, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342, 343, 512, 513, 514, 529, 530, 531, 532, 700, 18246, 33421, 33422, 33423, 33432, 33434, 33437, 33723, 34665, 34675, 34850, 34852, 34853, 34855, 34856, 34864, 34866, 36864, 36867, 36868, 36880, 36881, 36882, 37121, 37122, 37377, 37378, 37379, 37380, 37381, 37382, 37383, 37384, 37385, 37386, 37396, 37500, 37510, 37520, 37521, 37522, 40091, 40092, 40093, 40094, 40095, 40960, 40961, 40962, 40963, 40964, 40965, 41483, 41484, 41486, 41487, 41488, 41492, 41493, 41495, 41728, 41729, 41730, 41985, 41986, 41987, 41988, 41989, 41990, 41991, 41992, 41993, 41994, 41995, 41996, 42016, 42032, 42033, 42034, 42035, 42036, 42037, 42240, 50341, 59932, 59933, 65000, 65001, 1, 2, 4096, 4097, 4098, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], type$.ConstantStringMap_String_int);
    C.Object_5Px = {"0": 0, "1": 1, "2": 2, "3": 3, "4": 4, "5": 5, "6": 6, "7": 7, "8": 8, "9": 9, A: 10, B: 11, C: 12, D: 13, E: 14, F: 15, G: 16, H: 17, I: 18, J: 19, K: 20, L: 21, M: 22, N: 23, O: 24, P: 25, Q: 26, R: 27, S: 28, T: 29, U: 30, V: 31, W: 32, X: 33, Y: 34, Z: 35, a: 36, b: 37, c: 38, d: 39, e: 40, f: 41, g: 42, h: 43, i: 44, j: 45, k: 46, l: 47, m: 48, n: 49, o: 50, p: 51, q: 52, r: 53, s: 54, t: 55, u: 56, v: 57, w: 58, x: 59, y: 60, z: 61, "#": 62, $: 63, "%": 64, "*": 65, "+": 66, ",": 67, "-": 68, ".": 69, ":": 70, ";": 71, "=": 72, "?": 73, "@": 74, "[": 75, "]": 76, "^": 77, _: 78, "{": 79, "|": 80, "}": 81, "~": 82};
    C.Map_4Rm2t = new A.ConstantStringMap(C.Object_5Px, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82], type$.ConstantStringMap_String_int);
    C.Map_vw3Ow = new A.GeneralConstantMap([C.Format_0, 1, C.Format_1, 3, C.Format_2, 15, C.Format_3, 255, C.Format_4, 65535, C.Format_5, 4294967295, C.Format_6, 127, C.Format_7, 32767, C.Format_8, 2147483647, C.Format_9, 1, C.Format_10, 1, C.Format_11, 1], type$.GeneralConstantMap_Format_int);
    C.Map_vw4lG = new A.GeneralConstantMap([C.Format_0, 1, C.Format_1, 1, C.Format_2, 1, C.Format_3, 1, C.Format_4, 2, C.Format_5, 4, C.Format_6, 1, C.Format_7, 2, C.Format_8, 4, C.Format_9, 2, C.Format_10, 4, C.Format_11, 8], type$.GeneralConstantMap_Format_int);
  })();
  (function staticFields() {
    $.Float16__toFloatFloat32Data = null;
    $.Float16____eLut = A._Cell$named("_eLut");
  })();
  (function lazyInitializers() {
    var _lazyFinal = hunkHelpers.lazyFinal;
    _lazyFinal($, "exifImageTags", "$get$exifImageTags", () => {
      var _null = null,
        _s8_ = "ISOSpeed";
      return A.LinkedHashMap_LinkedHashMap$_literal([11, B.ExifTag$("ProcessingSoftware", C.IfdValueType_2, _null), 254, B.ExifTag$("SubfileType", C.IfdValueType_4, 1), 255, B.ExifTag$("OldSubfileType", C.IfdValueType_4, 1), 256, B.ExifTag$("ImageWidth", C.IfdValueType_4, 1), 257, B.ExifTag$("ImageLength", C.IfdValueType_4, 1), 258, B.ExifTag$("BitsPerSample", C.IfdValueType_3, 1), 259, B.ExifTag$("Compression", C.IfdValueType_3, 1), 262, B.ExifTag$("PhotometricInterpretation", C.IfdValueType_3, 1), 263, B.ExifTag$("Thresholding", C.IfdValueType_3, 1), 264, B.ExifTag$("CellWidth", C.IfdValueType_3, 1), 265, B.ExifTag$("CellLength", C.IfdValueType_3, 1), 266, B.ExifTag$("FillOrder", C.IfdValueType_3, 1), 269, B.ExifTag$("DocumentName", C.IfdValueType_2, _null), 270, B.ExifTag$("ImageDescription", C.IfdValueType_2, _null), 271, B.ExifTag$("Make", C.IfdValueType_2, _null), 272, B.ExifTag$("Model", C.IfdValueType_2, _null), 273, B.ExifTag$("StripOffsets", C.IfdValueType_4, _null), 274, B.ExifTag$("Orientation", C.IfdValueType_3, 1), 277, B.ExifTag$("SamplesPerPixel", C.IfdValueType_3, 1), 278, B.ExifTag$("RowsPerStrip", C.IfdValueType_4, 1), 279, B.ExifTag$("StripByteCounts", C.IfdValueType_4, 1), 280, B.ExifTag$("MinSampleValue", C.IfdValueType_3, 1), 281, B.ExifTag$("MaxSampleValue", C.IfdValueType_3, 1), 282, B.ExifTag$("XResolution", C.IfdValueType_5, 1), 283, B.ExifTag$("YResolution", C.IfdValueType_5, 1), 284, B.ExifTag$("PlanarConfiguration", C.IfdValueType_3, 1), 285, B.ExifTag$("PageName", C.IfdValueType_2, _null), 286, B.ExifTag$("XPosition", C.IfdValueType_5, 1), 287, B.ExifTag$("YPosition", C.IfdValueType_5, 1), 290, B.ExifTag$("GrayResponseUnit", C.IfdValueType_3, 1), 291, B.ExifTag$("GrayResponseCurve", C.IfdValueType_0, _null), 292, B.ExifTag$("T4Options", C.IfdValueType_0, _null), 293, B.ExifTag$("T6Options", C.IfdValueType_0, _null), 296, B.ExifTag$("ResolutionUnit", C.IfdValueType_3, 1), 297, B.ExifTag$("PageNumber", C.IfdValueType_3, 2), 300, B.ExifTag$("ColorResponseUnit", C.IfdValueType_0, _null), 301, B.ExifTag$("TransferFunction", C.IfdValueType_3, 768), 305, B.ExifTag$("Software", C.IfdValueType_2, _null), 306, B.ExifTag$("DateTime", C.IfdValueType_2, _null), 315, B.ExifTag$("Artist", C.IfdValueType_2, _null), 316, B.ExifTag$("HostComputer", C.IfdValueType_2, _null), 317, B.ExifTag$("Predictor", C.IfdValueType_3, 1), 318, B.ExifTag$("WhitePoint", C.IfdValueType_5, 2), 319, B.ExifTag$("PrimaryChromaticities", C.IfdValueType_5, 6), 320, B.ExifTag$("ColorMap", C.IfdValueType_3, _null), 321, B.ExifTag$("HalftoneHints", C.IfdValueType_3, 2), 322, B.ExifTag$("TileWidth", C.IfdValueType_4, 1), 323, B.ExifTag$("TileLength", C.IfdValueType_4, 1), 324, B.ExifTag$("TileOffsets", C.IfdValueType_4, _null), 325, B.ExifTag$("TileByteCounts", C.IfdValueType_0, _null), 326, B.ExifTag$("BadFaxLines", C.IfdValueType_0, _null), 327, B.ExifTag$("CleanFaxData", C.IfdValueType_0, _null), 328, B.ExifTag$("ConsecutiveBadFaxLines", C.IfdValueType_0, _null), 332, B.ExifTag$("InkSet", C.IfdValueType_0, _null), 333, B.ExifTag$("InkNames", C.IfdValueType_0, _null), 334, B.ExifTag$("NumberofInks", C.IfdValueType_0, _null), 336, B.ExifTag$("DotRange", C.IfdValueType_0, _null), 337, B.ExifTag$("TargetPrinter", C.IfdValueType_2, _null), 338, B.ExifTag$("ExtraSamples", C.IfdValueType_0, _null), 339, B.ExifTag$("SampleFormat", C.IfdValueType_3, 1), 340, B.ExifTag$("SMinSampleValue", C.IfdValueType_0, _null), 341, B.ExifTag$("SMaxSampleValue", C.IfdValueType_0, _null), 342, B.ExifTag$("TransferRange", C.IfdValueType_0, _null), 343, B.ExifTag$("ClipPath", C.IfdValueType_0, _null), 512, B.ExifTag$("JPEGProc", C.IfdValueType_0, _null), 513, B.ExifTag$("JPEGInterchangeFormat", C.IfdValueType_0, _null), 514, B.ExifTag$("JPEGInterchangeFormatLength", C.IfdValueType_0, _null), 529, B.ExifTag$("YCbCrCoefficients", C.IfdValueType_5, 3), 530, B.ExifTag$("YCbCrSubSampling", C.IfdValueType_3, 1), 531, B.ExifTag$("YCbCrPositioning", C.IfdValueType_3, 1), 532, B.ExifTag$("ReferenceBlackWhite", C.IfdValueType_5, 6), 700, B.ExifTag$("ApplicationNotes", C.IfdValueType_3, 1), 18246, B.ExifTag$("Rating", C.IfdValueType_3, 1), 33421, B.ExifTag$("CFARepeatPatternDim", C.IfdValueType_0, _null), 33422, B.ExifTag$("CFAPattern", C.IfdValueType_0, _null), 33423, B.ExifTag$("BatteryLevel", C.IfdValueType_0, _null), 33432, B.ExifTag$("Copyright", C.IfdValueType_2, _null), 33434, B.ExifTag$("ExposureTime", C.IfdValueType_5, 1), 33437, B.ExifTag$("FNumber", C.IfdValueType_5, _null), 33723, B.ExifTag$("IPTC-NAA", C.IfdValueType_4, 1), 34665, B.ExifTag$("ExifOffset", C.IfdValueType_0, _null), 34675, B.ExifTag$("InterColorProfile", C.IfdValueType_0, _null), 34850, B.ExifTag$("ExposureProgram", C.IfdValueType_3, 1), 34852, B.ExifTag$("SpectralSensitivity", C.IfdValueType_2, _null), 34853, B.ExifTag$("GPSOffset", C.IfdValueType_0, _null), 34855, B.ExifTag$(_s8_, C.IfdValueType_4, 1), 34856, B.ExifTag$("OECF", C.IfdValueType_0, _null), 34864, B.ExifTag$("SensitivityType", C.IfdValueType_3, 1), 34866, B.ExifTag$("RecommendedExposureIndex", C.IfdValueType_4, 1), 34867, B.ExifTag$(_s8_, C.IfdValueType_4, 1), 36864, B.ExifTag$("ExifVersion", C.IfdValueType_7, _null), 36867, B.ExifTag$("DateTimeOriginal", C.IfdValueType_2, _null), 36868, B.ExifTag$("DateTimeDigitized", C.IfdValueType_2, _null), 36880, B.ExifTag$("OffsetTime", C.IfdValueType_2, _null), 36881, B.ExifTag$("OffsetTimeOriginal", C.IfdValueType_2, _null), 36882, B.ExifTag$("OffsetTimeDigitized", C.IfdValueType_2, _null), 37121, B.ExifTag$("ComponentsConfiguration", C.IfdValueType_7, _null), 37122, B.ExifTag$("CompressedBitsPerPixel", C.IfdValueType_0, _null), 37377, B.ExifTag$("ShutterSpeedValue", C.IfdValueType_0, _null), 37378, B.ExifTag$("ApertureValue", C.IfdValueType_0, _null), 37379, B.ExifTag$("BrightnessValue", C.IfdValueType_0, _null), 37380, B.ExifTag$("ExposureBiasValue", C.IfdValueType_0, _null), 37381, B.ExifTag$("MaxApertureValue", C.IfdValueType_0, _null), 37382, B.ExifTag$("SubjectDistance", C.IfdValueType_0, _null), 37383, B.ExifTag$("MeteringMode", C.IfdValueType_0, _null), 37384, B.ExifTag$("LightSource", C.IfdValueType_0, _null), 37385, B.ExifTag$("Flash", C.IfdValueType_0, _null), 37386, B.ExifTag$("FocalLength", C.IfdValueType_0, _null), 37396, B.ExifTag$("SubjectArea", C.IfdValueType_0, _null), 37500, B.ExifTag$("MakerNote", C.IfdValueType_7, _null), 37510, B.ExifTag$("UserComment", C.IfdValueType_7, _null), 37520, B.ExifTag$("SubSecTime", C.IfdValueType_0, _null), 37521, B.ExifTag$("SubSecTimeOriginal", C.IfdValueType_0, _null), 37522, B.ExifTag$("SubSecTimeDigitized", C.IfdValueType_0, _null), 40091, B.ExifTag$("XPTitle", C.IfdValueType_0, _null), 40092, B.ExifTag$("XPComment", C.IfdValueType_0, _null), 40093, B.ExifTag$("XPAuthor", C.IfdValueType_0, _null), 40094, B.ExifTag$("XPKeywords", C.IfdValueType_0, _null), 40095, B.ExifTag$("XPSubject", C.IfdValueType_0, _null), 40960, B.ExifTag$("FlashPixVersion", C.IfdValueType_0, _null), 40961, B.ExifTag$("ColorSpace", C.IfdValueType_3, 1), 40962, B.ExifTag$("ExifImageWidth", C.IfdValueType_3, 1), 40963, B.ExifTag$("ExifImageLength", C.IfdValueType_3, 1), 40964, B.ExifTag$("RelatedSoundFile", C.IfdValueType_0, _null), 40965, B.ExifTag$("InteroperabilityOffset", C.IfdValueType_0, _null), 41483, B.ExifTag$("FlashEnergy", C.IfdValueType_0, _null), 41484, B.ExifTag$("SpatialFrequencyResponse", C.IfdValueType_0, _null), 41486, B.ExifTag$("FocalPlaneXResolution", C.IfdValueType_0, _null), 41487, B.ExifTag$("FocalPlaneYResolution", C.IfdValueType_0, _null), 41488, B.ExifTag$("FocalPlaneResolutionUnit", C.IfdValueType_0, _null), 41492, B.ExifTag$("SubjectLocation", C.IfdValueType_0, _null), 41493, B.ExifTag$("ExposureIndex", C.IfdValueType_0, _null), 41495, B.ExifTag$("SensingMethod", C.IfdValueType_0, _null), 41728, B.ExifTag$("FileSource", C.IfdValueType_0, _null), 41729, B.ExifTag$("SceneType", C.IfdValueType_0, _null), 41730, B.ExifTag$("CVAPattern", C.IfdValueType_0, _null), 41985, B.ExifTag$("CustomRendered", C.IfdValueType_0, _null), 41986, B.ExifTag$("ExposureMode", C.IfdValueType_0, _null), 41987, B.ExifTag$("WhiteBalance", C.IfdValueType_0, _null), 41988, B.ExifTag$("DigitalZoomRatio", C.IfdValueType_0, _null), 41989, B.ExifTag$("FocalLengthIn35mmFilm", C.IfdValueType_0, _null), 41990, B.ExifTag$("SceneCaptureType", C.IfdValueType_0, _null), 41991, B.ExifTag$("GainControl", C.IfdValueType_0, _null), 41992, B.ExifTag$("Contrast", C.IfdValueType_0, _null), 41993, B.ExifTag$("Saturation", C.IfdValueType_0, _null), 41994, B.ExifTag$("Sharpness", C.IfdValueType_0, _null), 41995, B.ExifTag$("DeviceSettingDescription", C.IfdValueType_0, _null), 41996, B.ExifTag$("SubjectDistanceRange", C.IfdValueType_0, _null), 42016, B.ExifTag$("ImageUniqueID", C.IfdValueType_0, _null), 42032, B.ExifTag$("CameraOwnerName", C.IfdValueType_2, _null), 42033, B.ExifTag$("BodySerialNumber", C.IfdValueType_2, _null), 42034, B.ExifTag$("LensSpecification", C.IfdValueType_0, _null), 42035, B.ExifTag$("LensMake", C.IfdValueType_2, _null), 42036, B.ExifTag$("LensModel", C.IfdValueType_2, _null), 42037, B.ExifTag$("LensSerialNumber", C.IfdValueType_2, _null), 42240, B.ExifTag$("Gamma", C.IfdValueType_5, 1), 50341, B.ExifTag$("PrintIM", C.IfdValueType_0, _null), 59932, B.ExifTag$("Padding", C.IfdValueType_0, _null), 59933, B.ExifTag$("OffsetSchema", C.IfdValueType_0, _null), 65000, B.ExifTag$("OwnerName", C.IfdValueType_2, _null), 65001, B.ExifTag$("SerialNumber", C.IfdValueType_2, _null)], type$.int, A.findType("ExifTag"));
    });
    _lazyFinal($, "__float32", "$get$__float32", () => A.NativeFloat32List_NativeFloat32List(1));
    _lazyFinal($, "__float32ToUint32", "$get$__float32ToUint32", () => B.Uint32List_Uint32List$view(D.NativeFloat32List_methods.get$buffer($.$get$__float32())));
  })();
};
;
((d, h) => {
  d[h] = d.current;
  d.eventLog.push({p: "main.dart.js_200", e: "endPart", h: h});
})($__dart_deferred_initializers__, "+b2B2+YFcVjN+mxYBpNZg4sLpZI=");
;
//# sourceMappingURL=main.dart.js_200.part.js.map
