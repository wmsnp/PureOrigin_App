// Generated by dart2js (NullSafetyMode.sound, csp, intern-composite-values), the Dart to JavaScript compiler version: 3.7.2.
((s, d, e) => {
  s[d] = s[d] || {};
  s[d][e] = s[d][e] || [];
  s[d][e].push({p: "main.dart.js_195", e: "beginPart"});
})(self, "$__dart_deferred_initializers__", "eventLog");
$__dart_deferred_initializers__.current = function(hunkHelpers, init, holdersList, $) {
  var C,
  B = {
    AlignmentGeometry_lerp(a, b, t) {
      var t1, t2, t3;
      if (a == b)
        return a;
      if (a == null)
        return b.$mul(0, t);
      if (b == null)
        return a.$mul(0, 1 - t);
      if (a instanceof A.Alignment && b instanceof A.Alignment)
        return B.Alignment_lerp(a, b, t);
      if (a instanceof A.AlignmentDirectional && b instanceof A.AlignmentDirectional)
        return B.AlignmentDirectional_lerp(a, b, t);
      t1 = A.lerpDouble(a.get$_x(), b.get$_x(), t);
      t1.toString;
      t2 = A.lerpDouble(a.get$_alignment$_start(a), b.get$_alignment$_start(b), t);
      t2.toString;
      t3 = A.lerpDouble(a.get$_y(), b.get$_y(), t);
      t3.toString;
      return new B._MixedAlignment(t1, t2, t3);
    },
    Alignment_lerp(a, b, t) {
      var t1, t2;
      if (a === b)
        return a;
      t1 = A.lerpDouble(a.x, b.x, t);
      t1.toString;
      t2 = A.lerpDouble(a.y, b.y, t);
      t2.toString;
      return new A.Alignment(t1, t2);
    },
    AlignmentDirectional_lerp(a, b, t) {
      var t1, t2;
      if (a === b)
        return a;
      t1 = A.lerpDouble(a.start, b.start, t);
      t1.toString;
      t2 = A.lerpDouble(a.y, b.y, t);
      t2.toString;
      return new A.AlignmentDirectional(t1, t2);
    },
    _MixedAlignment: function _MixedAlignment(t0, t1, t2) {
      this._x = t0;
      this._alignment$_start = t1;
      this._y = t2;
    }
  },
  A;
  C = holdersList[0];
  B = hunkHelpers.updateHolder(holdersList[39], B);
  A = holdersList[136];
  B._MixedAlignment.prototype = {
    $mul(_, other) {
      return new B._MixedAlignment(this._x * other, this._alignment$_start * other, this._y * other);
    },
    resolve$1(direction) {
      var t1, _this = this;
      switch (direction.index) {
        case 0:
          t1 = new A.Alignment(_this._x - _this._alignment$_start, _this._y);
          break;
        case 1:
          t1 = new A.Alignment(_this._x + _this._alignment$_start, _this._y);
          break;
        default:
          t1 = null;
      }
      return t1;
    },
    get$_x() {
      return this._x;
    },
    get$_alignment$_start(receiver) {
      return this._alignment$_start;
    },
    get$_y() {
      return this._y;
    }
  };
  var typesOffset = hunkHelpers.updateTypes([]);
  (function inheritance() {
    var _inherit = hunkHelpers.inherit;
    _inherit(B._MixedAlignment, A.AlignmentGeometry);
  })();
  C._Universe_addRules(init.typeUniverse, JSON.parse('{"_MixedAlignment":{"AlignmentGeometry":[]}}'));
};
;
((d, h) => {
  d[h] = d.current;
  d.eventLog.push({p: "main.dart.js_195", e: "endPart", h: h});
})($__dart_deferred_initializers__, "XN2QYkDNyvvIU4N04lBnKfrMzG0=");
;
//# sourceMappingURL=main.dart.js_195.part.js.map
