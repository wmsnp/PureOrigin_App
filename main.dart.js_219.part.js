// Generated by dart2js (NullSafetyMode.sound, csp, intern-composite-values), the Dart to JavaScript compiler version: 3.7.2.
((s, d, e) => {
  s[d] = s[d] || {};
  s[d][e] = s[d][e] || [];
  s[d][e].push({p: "main.dart.js_219", e: "beginPart"});
})(self, "$__dart_deferred_initializers__", "eventLog");
$__dart_deferred_initializers__.current = function(hunkHelpers, init, holdersList, $) {
  var J, B, D, F,
  A = {
    _asyncStarHelper(object, bodyFunctionOrErrorCode, controller) {
      var t1, t2, t3,
        _s10_ = "controller";
      if (bodyFunctionOrErrorCode === 0) {
        t1 = controller.cancelationFuture;
        if (t1 != null)
          t1._completeWithValue$1(null);
        else {
          t1 = controller.___AsyncStarStreamController_controller_A;
          t1 === $ && B.throwLateFieldNI(_s10_);
          t1.close$0(0);
        }
        return;
      } else if (bodyFunctionOrErrorCode === 1) {
        t1 = controller.cancelationFuture;
        if (t1 != null)
          t1._completeError$2(B.unwrapException(object), B.getTraceFromException(object));
        else {
          t1 = B.unwrapException(object);
          t2 = B.getTraceFromException(object);
          t3 = controller.___AsyncStarStreamController_controller_A;
          t3 === $ && B.throwLateFieldNI(_s10_);
          t3.addError$2(t1, t2);
          controller.___AsyncStarStreamController_controller_A.close$0(0);
        }
        return;
      }
      type$.void_Function_int_dynamic._as(bodyFunctionOrErrorCode);
      if (object instanceof A._IterationMarker) {
        if (controller.cancelationFuture != null) {
          bodyFunctionOrErrorCode.call$2(2, null);
          return;
        }
        t1 = object.state;
        if (t1 === 0) {
          t1 = object.value;
          t2 = controller.___AsyncStarStreamController_controller_A;
          t2 === $ && B.throwLateFieldNI(_s10_);
          t2.add$1(0, controller.$ti._precomputed1._as(t1));
          B.scheduleMicrotask(new A._asyncStarHelper_closure(controller, bodyFunctionOrErrorCode));
          return;
        } else if (t1 === 1) {
          t1 = controller.$ti._eval$1("Stream<1>")._as(type$.Stream_dynamic._as(object.value));
          t2 = controller.___AsyncStarStreamController_controller_A;
          t2 === $ && B.throwLateFieldNI(_s10_);
          t2.addStream$2$cancelOnError(0, t1, false).then$1$1(0, new A._asyncStarHelper_closure0(controller, bodyFunctionOrErrorCode), type$.Null);
          return;
        }
      }
      B._awaitOnObject(object, bodyFunctionOrErrorCode);
    },
    _streamOfController(controller) {
      var t1 = controller.___AsyncStarStreamController_controller_A;
      t1 === $ && B.throwLateFieldNI("controller");
      return new B._ControllerStream(t1, B._instanceType(t1)._eval$1("_ControllerStream<1>"));
    },
    _AsyncStarStreamController$(body, $T) {
      var t1 = new A._AsyncStarStreamController($T._eval$1("_AsyncStarStreamController<0>"));
      t1._AsyncStarStreamController$1(body, $T);
      return t1;
    },
    _makeAsyncStarStreamController(body, $T) {
      return A._AsyncStarStreamController$(body, $T);
    },
    _IterationMarker_yieldStar(values) {
      return new A._IterationMarker(values, 1);
    },
    _IterationMarker_yieldSingle(value) {
      return new A._IterationMarker(value, 0);
    },
    _asyncStarHelper_closure: function _asyncStarHelper_closure(t0, t1) {
      this.controller = t0;
      this.bodyFunction = t1;
    },
    _asyncStarHelper_closure0: function _asyncStarHelper_closure0(t0, t1) {
      this.controller = t0;
      this.bodyFunction = t1;
    },
    _AsyncStarStreamController: function _AsyncStarStreamController(t0) {
      var _ = this;
      _.___AsyncStarStreamController_controller_A = $;
      _.isSuspended = false;
      _.cancelationFuture = null;
      _.$ti = t0;
    },
    _AsyncStarStreamController__resumeBody: function _AsyncStarStreamController__resumeBody(t0) {
      this.body = t0;
    },
    _AsyncStarStreamController__resumeBody_closure: function _AsyncStarStreamController__resumeBody_closure(t0) {
      this.body = t0;
    },
    _AsyncStarStreamController_closure0: function _AsyncStarStreamController_closure0(t0) {
      this._resumeBody = t0;
    },
    _AsyncStarStreamController_closure1: function _AsyncStarStreamController_closure1(t0, t1) {
      this.$this = t0;
      this._resumeBody = t1;
    },
    _AsyncStarStreamController_closure: function _AsyncStarStreamController_closure(t0, t1) {
      this.$this = t0;
      this.body = t1;
    },
    _AsyncStarStreamController__closure: function _AsyncStarStreamController__closure(t0) {
      this.body = t0;
    },
    _IterationMarker: function _IterationMarker(t0, t1) {
      this.value = t0;
      this.state = t1;
    },
    _Namespace__namespacePointer() {
      throw B.wrapException(B.UnsupportedError$("_Namespace"));
    },
    _RandomAccessFileOps__RandomAccessFileOps(pointer) {
      throw B.wrapException(B.UnsupportedError$("RandomAccessFile"));
    },
    _checkForErrorResponse(response, message, path) {
      var t1;
      if (type$.List_nullable_Object._is(response) && !J.$eq$(J.$index$asx(response, 0), 0)) {
        t1 = J.getInterceptor$asx(response);
        switch (t1.$index(response, 0)) {
          case 1:
            throw B.wrapException(B.ArgumentError$(message + ": " + path, null));
          case 2:
            throw B.wrapException(A.FileSystemException_FileSystemException$_fromOSError(new A.OSError(B._asString(t1.$index(response, 2)), B._asInt(t1.$index(response, 1))), message, path));
          case 3:
            throw B.wrapException(A.FileSystemException$("File closed", path, null));
          default:
            throw B.wrapException(B.AssertionError$("Unknown error"));
        }
      }
    },
    File_File(path) {
      var t1;
      I.IOOverrides_current();
      B.ArgumentError_checkNotNull(path, "path", type$.String);
      t1 = A.FileSystemEntity__toNullTerminatedUtf8Array(D.C_Utf8Encoder.convert$1(path));
      return new A._File(path, t1);
    },
    FileSystemException$(message, path, osError) {
      return new A.FileSystemException(message, path, osError);
    },
    FileSystemException_FileSystemException$_fromOSError(err, message, path) {
      if ($.$get$Platform_isWindows())
        switch (err.errorCode) {
          case 5:
          case 16:
          case 19:
          case 24:
          case 32:
          case 33:
          case 65:
          case 108:
            return new A.PathAccessException(message, path, err);
          case 80:
          case 183:
            return new A.PathExistsException(message, path, err);
          case 2:
          case 3:
          case 15:
          case 123:
          case 18:
          case 53:
          case 67:
          case 161:
          case 206:
            return new A.PathNotFoundException(message, path, err);
          default:
            return new A.FileSystemException(message, path, err);
        }
      else
        switch (err.errorCode) {
          case 1:
          case 13:
            return new A.PathAccessException(message, path, err);
          case 17:
            return new A.PathExistsException(message, path, err);
          case 2:
            return new A.PathNotFoundException(message, path, err);
          default:
            return new A.FileSystemException(message, path, err);
        }
    },
    _File__namespacePointer() {
      return A._Namespace__namespacePointer();
    },
    _File__dispatchWithNamespace(request, data) {
      D.JSArray_methods.$indexSet(data, 0, A._File__namespacePointer());
    },
    FileSystemEntity__toNullTerminatedUtf8Array(l) {
      var t2, tmp,
        t1 = l.length;
      if (t1 !== 0)
        t2 = !D.NativeUint8List_methods.get$isEmpty(l) && !J.$eq$(D.NativeUint8List_methods.get$last(l), 0);
      else
        t2 = true;
      if (t2) {
        tmp = new Uint8Array(t1 + 1);
        D.NativeUint8List_methods.setRange$3(tmp, 0, t1, l);
        return tmp;
      } else
        return l;
    },
    OSError: function OSError(t0, t1) {
      this.message = t0;
      this.errorCode = t1;
    },
    FileMode: function FileMode(t0) {
      this._io$_mode = t0;
    },
    FileSystemException: function FileSystemException(t0, t1, t2) {
      this.message = t0;
      this.path = t1;
      this.osError = t2;
    },
    PathAccessException: function PathAccessException(t0, t1, t2) {
      this.message = t0;
      this.path = t1;
      this.osError = t2;
    },
    PathExistsException: function PathExistsException(t0, t1, t2) {
      this.message = t0;
      this.path = t1;
      this.osError = t2;
    },
    PathNotFoundException: function PathNotFoundException(t0, t1, t2) {
      this.message = t0;
      this.path = t1;
      this.osError = t2;
    },
    _File: function _File(t0, t1) {
      this._io$_path = t0;
      this._rawPath = t1;
    },
    _File_exists_closure: function _File_exists_closure(t0) {
      this.$this = t0;
    },
    _File_open_closure: function _File_open_closure(t0) {
      this.$this = t0;
    },
    _File_length_closure: function _File_length_closure(t0) {
      this.$this = t0;
    },
    _File_readAsBytes_readUnsized: function _File_readAsBytes_readUnsized() {
    },
    _File_readAsBytes_readUnsized_read: function _File_readAsBytes_readUnsized_read(t0, t1, t2) {
      this.file = t0;
      this.builder = t1;
      this.completer = t2;
    },
    _File_readAsBytes_readUnsized_read_closure: function _File_readAsBytes_readUnsized_read_closure(t0, t1, t2) {
      this.builder = t0;
      this.read = t1;
      this.completer = t2;
    },
    _File_readAsBytes_readSized: function _File_readAsBytes_readSized() {
    },
    _File_readAsBytes_readSized_read: function _File_readAsBytes_readSized_read(t0, t1, t2, t3) {
      var _ = this;
      _._box_0 = t0;
      _.file = t1;
      _.length = t2;
      _.completer = t3;
    },
    _File_readAsBytes_readSized_read_closure: function _File_readAsBytes_readSized_read_closure(t0, t1, t2, t3) {
      var _ = this;
      _._box_0 = t0;
      _.read = t1;
      _.length = t2;
      _.completer = t3;
    },
    _File_readAsBytes_closure: function _File_readAsBytes_closure(t0, t1) {
      this.readUnsized = t0;
      this.readSized = t1;
    },
    _File_readAsBytes__closure: function _File_readAsBytes__closure(t0, t1, t2) {
      this.readUnsized = t0;
      this.file = t1;
      this.readSized = t2;
    },
    _RandomAccessFile: function _RandomAccessFile(t0, t1) {
      var _ = this;
      _.path = t0;
      _._asyncDispatched = false;
      _.___RandomAccessFile__resourceInfo_A = $;
      _._ops = t1;
      _.closed = false;
    },
    _RandomAccessFile_close_closure: function _RandomAccessFile_close_closure(t0) {
      this.$this = t0;
    },
    _RandomAccessFile_read_closure: function _RandomAccessFile_read_closure(t0) {
      this.$this = t0;
    },
    _RandomAccessFile_readInto_closure: function _RandomAccessFile_readInto_closure(t0, t1, t2) {
      this.$this = t0;
      this.buffer = t1;
      this.start = t2;
    },
    _RandomAccessFile_length_closure: function _RandomAccessFile_length_closure(t0) {
      this.$this = t0;
    },
    FileSystemEntity: function FileSystemEntity() {
    },
    FileSystemEntity_resolveSymbolicLinks_closure: function FileSystemEntity_resolveSymbolicLinks_closure(t0) {
      this.$this = t0;
    },
    DirectionalFocusIntent: function DirectionalFocusIntent(t0) {
      this.direction = t0;
    },
    BoxConstraints_lerp(a, b, t) {
      var t1, t2, t3, t4;
      if (a == b)
        return a;
      if (a == null)
        return b.$mul(0, t);
      if (b == null)
        return a.$mul(0, 1 - t);
      t1 = a.minWidth;
      if (isFinite(t1)) {
        t1 = E.lerpDouble(t1, b.minWidth, t);
        t1.toString;
      } else
        t1 = 1 / 0;
      t2 = a.maxWidth;
      if (isFinite(t2)) {
        t2 = E.lerpDouble(t2, b.maxWidth, t);
        t2.toString;
      } else
        t2 = 1 / 0;
      t3 = a.minHeight;
      if (isFinite(t3)) {
        t3 = E.lerpDouble(t3, b.minHeight, t);
        t3.toString;
      } else
        t3 = 1 / 0;
      t4 = a.maxHeight;
      if (isFinite(t4)) {
        t4 = E.lerpDouble(t4, b.maxHeight, t);
        t4.toString;
      } else
        t4 = 1 / 0;
      return new B.BoxConstraints(t1, t2, t3, t4);
    }
  },
  C, G, H, I, E;
  J = holdersList[1];
  B = holdersList[0];
  D = holdersList[2];
  F = holdersList[30];
  A = hunkHelpers.updateHolder(holdersList[16], A);
  C = holdersList[143];
  G = holdersList[80];
  H = holdersList[130];
  I = holdersList[69];
  E = holdersList[136];
  A._AsyncStarStreamController.prototype = {
    _AsyncStarStreamController$1(body, $T) {
      var _this = this,
        t1 = new A._AsyncStarStreamController__resumeBody(body);
      _this.set$___AsyncStarStreamController_controller_A(_this.$ti._eval$1("StreamController<1>")._as(B.StreamController_StreamController(new A._AsyncStarStreamController_closure(_this, body), new A._AsyncStarStreamController_closure0(t1), new A._AsyncStarStreamController_closure1(_this, t1), false, $T)));
    },
    set$___AsyncStarStreamController_controller_A(___AsyncStarStreamController_controller_A) {
      this.___AsyncStarStreamController_controller_A = this.$ti._eval$1("StreamController<1>")._as(___AsyncStarStreamController_controller_A);
    }
  };
  A._IterationMarker.prototype = {
    toString$0(_) {
      return "IterationMarker(" + this.state + ", " + B.S(this.value) + ")";
    }
  };
  A.OSError.prototype = {
    toString$0(_) {
      var t1 = "" + "OS Error",
        t2 = this.message;
      if (t2.length !== 0) {
        t1 = t1 + ": " + t2;
        t2 = this.errorCode;
        if (t2 !== -1)
          t1 = t1 + ", errno = " + D.JSInt_methods.toString$0(t2);
      } else {
        t2 = this.errorCode;
        if (t2 !== -1)
          t1 = t1 + ": errno = " + D.JSInt_methods.toString$0(t2);
      }
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    $isException: 1
  };
  A.FileMode.prototype = {};
  A.FileSystemException.prototype = {
    _toStringHelper$1(className) {
      var _this = this,
        t1 = "" + className,
        t2 = _this.message;
      if (t2.length !== 0) {
        t1 = t1 + (": " + t2) + (", path = '" + _this.path + "'");
        t2 = _this.osError;
        if (t2 != null)
          t1 += " (" + t2.toString$0(0) + ")";
      } else {
        t2 = _this.osError;
        if (t2 != null)
          t1 = t1 + (": " + t2.toString$0(0)) + (", path = '" + _this.path + "'");
        else
          t1 += ": " + _this.path;
      }
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    toString$0(_) {
      return this._toStringHelper$1("FileSystemException");
    },
    $isException: 1
  };
  A.PathAccessException.prototype = {
    toString$0(_) {
      return this._toStringHelper$1("PathAccessException");
    }
  };
  A.PathExistsException.prototype = {
    toString$0(_) {
      return this._toStringHelper$1("PathExistsException");
    }
  };
  A.PathNotFoundException.prototype = {
    toString$0(_) {
      return this._toStringHelper$1("PathNotFoundException");
    }
  };
  A._File.prototype = {
    get$path(_) {
      return this._io$_path;
    },
    exists$0() {
      return A._File__dispatchWithNamespace(0, [null, this._rawPath]).then$1$1(0, new A._File_exists_closure(this), type$.bool);
    },
    open$1$mode(_, mode) {
      if (mode !== C.FileMode_0 && mode !== C.FileMode_1 && mode !== C.FileMode_2 && mode !== C.FileMode_3 && mode !== C.FileMode_4)
        return B.Future_Future$error(new B.ArgumentError(false, null, null, "Invalid file mode for this operation"), null, type$.RandomAccessFile);
      return A._File__dispatchWithNamespace(5, [null, this._rawPath, mode._io$_mode]).then$1$1(0, new A._File_open_closure(this), type$.RandomAccessFile);
    },
    open$0(_) {
      return this.open$1$mode(0, C.FileMode_0);
    },
    length$0(_) {
      return A._File__dispatchWithNamespace(12, [null, this._rawPath]).then$1$1(0, new A._File_length_closure(this), type$.int);
    },
    readAsBytes$0() {
      return this.open$0(0).then$1$1(0, new A._File_readAsBytes_closure(new A._File_readAsBytes_readUnsized(), new A._File_readAsBytes_readSized()), type$.Uint8List);
    },
    toString$0(_) {
      return "File: '" + this._io$_path + "'";
    },
    $isFile0: 1,
    get$_rawPath() {
      return this._rawPath;
    }
  };
  A._RandomAccessFile.prototype = {
    close$0(_) {
      return this._io$_dispatch$3$markClosed(7, [null], true).then$1$1(0, new A._RandomAccessFile_close_closure(this), type$.void);
    },
    read$1(_, bytes) {
      B.ArgumentError_checkNotNull(bytes, "bytes", type$.int);
      return this._io$_dispatch$2(20, [null, bytes]).then$1$1(0, new A._RandomAccessFile_read_closure(this), type$.Uint8List);
    },
    readInto$3(buffer, start, end) {
      var t1 = type$.List_int;
      t1._as(buffer);
      B.ArgumentError_checkNotNull(buffer, "buffer", t1);
      end = B.RangeError_checkValidRange(start, end, buffer.length, null, null);
      if (end === start)
        return B.Future_Future$value(0, type$.int);
      return this._io$_dispatch$2(21, [null, end - start]).then$1$1(0, new A._RandomAccessFile_readInto_closure(this, buffer, start), type$.int);
    },
    length$0(_) {
      return this._io$_dispatch$2(11, [null]).then$1$1(0, new A._RandomAccessFile_length_closure(this), type$.int);
    },
    _io$_pointer$0() {
      return this._ops.getPointer$0();
    },
    _io$_dispatch$3$markClosed(request, data, markClosed) {
      var _this = this, _null = null;
      if (_this.closed)
        return B.Future_Future$error(new A.FileSystemException("File closed", _this.path, _null), _null, type$.nullable_Object);
      if (_this._asyncDispatched)
        return B.Future_Future$error(new A.FileSystemException("An async operation is currently pending", _this.path, _null), _null, type$.nullable_Object);
      if (markClosed)
        _this.closed = true;
      _this._asyncDispatched = true;
      D.JSArray_methods.$indexSet(data, 0, _this._io$_pointer$0());
    },
    _io$_dispatch$2(request, data) {
      return this._io$_dispatch$3$markClosed(request, data, false);
    },
    $isRandomAccessFile: 1
  };
  A.FileSystemEntity.prototype = {
    resolveSymbolicLinks$0() {
      return A._File__dispatchWithNamespace(6, [null, this.get$_rawPath()]).then$1$1(0, new A.FileSystemEntity_resolveSymbolicLinks_closure(this), type$.String);
    }
  };
  A.DirectionalFocusIntent.prototype = {};
  var typesOffset = hunkHelpers.updateTypes(["Future<int>()", "Future<Uint8List>(RandomAccessFile)", "_RandomAccessFile(Object?)", "Future<Uint8List>(RandomAccessFile,int)", "Future<~>()"]);
  A._asyncStarHelper_closure.prototype = {
    call$0() {
      var t3,
        t1 = this.controller,
        t2 = t1.___AsyncStarStreamController_controller_A;
      t2 === $ && B.throwLateFieldNI("controller");
      t3 = t2._state;
      if ((t3 & 1) !== 0 ? (t2.get$_subscription()._state & 4) !== 0 : (t3 & 2) === 0) {
        t1.isSuspended = true;
        return;
      }
      t1 = t1.cancelationFuture != null ? 2 : 0;
      this.bodyFunction.call$2(t1, null);
    },
    $signature: 0
  };
  A._asyncStarHelper_closure0.prototype = {
    call$1(__wc0_formal) {
      var errorCode = this.controller.cancelationFuture != null ? 2 : 0;
      this.bodyFunction.call$2(errorCode, null);
    },
    $signature: 4
  };
  A._AsyncStarStreamController__resumeBody.prototype = {
    call$0() {
      B.scheduleMicrotask(new A._AsyncStarStreamController__resumeBody_closure(this.body));
    },
    $signature: 3
  };
  A._AsyncStarStreamController__resumeBody_closure.prototype = {
    call$0() {
      this.body.call$2(0, null);
    },
    $signature: 0
  };
  A._AsyncStarStreamController_closure0.prototype = {
    call$0() {
      this._resumeBody.call$0();
    },
    $signature: 0
  };
  A._AsyncStarStreamController_closure1.prototype = {
    call$0() {
      var t1 = this.$this;
      if (t1.isSuspended) {
        t1.isSuspended = false;
        this._resumeBody.call$0();
      }
    },
    $signature: 0
  };
  A._AsyncStarStreamController_closure.prototype = {
    call$0() {
      var t1 = this.$this,
        t2 = t1.___AsyncStarStreamController_controller_A;
      t2 === $ && B.throwLateFieldNI("controller");
      if ((t2._state & 4) === 0) {
        t1.cancelationFuture = new B._Future($.Zone__current, type$._Future_dynamic);
        if (t1.isSuspended) {
          t1.isSuspended = false;
          B.scheduleMicrotask(new A._AsyncStarStreamController__closure(this.body));
        }
        return t1.cancelationFuture;
      }
    },
    $signature: 255
  };
  A._AsyncStarStreamController__closure.prototype = {
    call$0() {
      this.body.call$2(2, null);
    },
    $signature: 0
  };
  A._File_exists_closure.prototype = {
    call$1(response) {
      A._checkForErrorResponse(response, "Cannot check existence", this.$this._io$_path);
      return response;
    },
    $signature: 17
  };
  A._File_open_closure.prototype = {
    call$1(response) {
      var t1 = this.$this._io$_path;
      A._checkForErrorResponse(response, "Cannot open file", t1);
      return new A._RandomAccessFile(t1, A._RandomAccessFileOps__RandomAccessFileOps(response));
    },
    $signature: typesOffset + 2
  };
  A._File_length_closure.prototype = {
    call$1(response) {
      A._checkForErrorResponse(response, "Cannot retrieve length of file", this.$this._io$_path);
      return response;
    },
    $signature: 55
  };
  A._File_readAsBytes_readUnsized.prototype = {
    call$1(file) {
      var t1 = B._setArrayType([], type$.JSArray_Uint8List),
        t2 = new B._Future($.Zone__current, type$._Future_Uint8List);
      new A._File_readAsBytes_readUnsized_read(file, new G._BytesBuilder(t1), new B._AsyncCompleter(t2, type$._AsyncCompleter_Uint8List)).call$0();
      return t2;
    },
    $signature: typesOffset + 1
  };
  A._File_readAsBytes_readUnsized_read.prototype = {
    call$0() {
      var _this = this,
        t1 = _this.completer;
      _this.file.read$1(0, 65536).then$1$2$onError(0, new A._File_readAsBytes_readUnsized_read_closure(_this.builder, _this, t1), t1.get$completeError(), type$.Null);
    },
    $signature: 0
  };
  A._File_readAsBytes_readUnsized_read_closure.prototype = {
    call$1(data) {
      var t1;
      type$.Uint8List._as(data);
      t1 = this.builder;
      if (data.length > 0) {
        t1.add$1(0, data);
        this.read.call$0();
      } else
        this.completer.complete$1(0, t1.takeBytes$0());
    },
    $signature: 257
  };
  A._File_readAsBytes_readSized.prototype = {
    call$2(file, $length) {
      var t2, t1 = {};
      t1.data = new Uint8Array($length);
      t1.offset = 0;
      t2 = new B._Future($.Zone__current, type$._Future_Uint8List);
      new A._File_readAsBytes_readSized_read(t1, file, $length, new B._AsyncCompleter(t2, type$._AsyncCompleter_Uint8List)).call$0();
      return t2;
    },
    $signature: typesOffset + 3
  };
  A._File_readAsBytes_readSized_read.prototype = {
    call$0() {
      var _this = this,
        t1 = _this._box_0,
        t2 = t1.data,
        t3 = t1.offset,
        t4 = _this.length,
        t5 = _this.completer;
      _this.file.readInto$3(t2, t3, Math.min(t3 + 16777216, t4)).then$1$2$onError(0, new A._File_readAsBytes_readSized_read_closure(t1, _this, t4, t5), t5.get$completeError(), type$.Null);
    },
    $signature: 0
  };
  A._File_readAsBytes_readSized_read_closure.prototype = {
    call$1(readSize) {
      var t1, t2, _this = this;
      B._asInt(readSize);
      if (readSize > 0) {
        _this._box_0.offset += readSize;
        _this.read.call$0();
      } else {
        t1 = _this._box_0;
        t2 = t1.offset;
        if (t2 < _this.length)
          t1.data = B.Uint8List_Uint8List$sublistView(t1.data, 0, t2);
        _this.completer.complete$1(0, t1.data);
      }
    },
    $signature: 124
  };
  A._File_readAsBytes_closure.prototype = {
    call$1(file) {
      type$.RandomAccessFile._as(file);
      return file.length$0(0).then$1$1(0, new A._File_readAsBytes__closure(this.readUnsized, file, this.readSized), type$.Uint8List).whenComplete$1(file.get$close(file));
    },
    $signature: typesOffset + 1
  };
  A._File_readAsBytes__closure.prototype = {
    call$1($length) {
      var _this = this;
      B._asInt($length);
      if ($length === 0)
        return _this.readUnsized.call$1(_this.file);
      return _this.readSized.call$2(_this.file, $length);
    },
    $signature: 258
  };
  A._RandomAccessFile_close_closure.prototype = {
    call$1(result) {
      var t2,
        t1 = J.getInterceptor$(result);
      if (t1.$eq(result, -1))
        throw B.wrapException(A.FileSystemException$("Cannot close file", this.$this.path, null));
      t2 = this.$this;
      t1 = t2.closed || t1.$eq(result, 0);
      t2.closed = t1;
      if (t1) {
        t1 = t2.___RandomAccessFile__resourceInfo_A;
        t1 === $ && B.throwLateFieldNI("_resourceInfo");
        $._FileResourceInfo_openFiles.remove$1(0, t1.id);
      }
    },
    $signature: 117
  };
  A._RandomAccessFile_read_closure.prototype = {
    call$1(response) {
      var result,
        t1 = this.$this;
      A._checkForErrorResponse(response, "read failed", t1.path);
      result = type$.Uint8List._as(J.$index$asx(type$.List_nullable_Object._as(response), 1));
      t1 = t1.___RandomAccessFile__resourceInfo_A;
      t1 === $ && B.throwLateFieldNI("_resourceInfo");
      t1.addRead$1(result.length);
      return result;
    },
    $signature: 259
  };
  A._RandomAccessFile_readInto_closure.prototype = {
    call$1(response) {
      var t2, read, t3,
        t1 = this.$this;
      A._checkForErrorResponse(response, "readInto failed", t1.path);
      type$.List_nullable_Object._as(response);
      t2 = J.getInterceptor$asx(response);
      read = B._asInt(t2.$index(response, 1));
      t3 = this.start;
      D.NativeUint8List_methods.setRange$3(this.buffer, t3, t3 + read, type$.List_int._as(t2.$index(response, 2)));
      t1 = t1.___RandomAccessFile__resourceInfo_A;
      t1 === $ && B.throwLateFieldNI("_resourceInfo");
      t1.addRead$1(read);
      return read;
    },
    $signature: 55
  };
  A._RandomAccessFile_length_closure.prototype = {
    call$1(response) {
      A._checkForErrorResponse(response, "length failed", this.$this.path);
      return B._asInt(response);
    },
    $signature: 55
  };
  A.FileSystemEntity_resolveSymbolicLinks_closure.prototype = {
    call$1(response) {
      var t1 = this.$this;
      A._checkForErrorResponse(response, "Cannot resolve symbolic links", t1.get$path(t1));
      return response;
    },
    $signature: 95
  };
  (function installTearOffs() {
    var _instance_0_i = hunkHelpers._instance_0i;
    _instance_0_i(A._File.prototype, "get$length", "length$0", 0);
    var _;
    _instance_0_i(_ = A._RandomAccessFile.prototype, "get$close", "close$0", 4);
    _instance_0_i(_, "get$length", "length$0", 0);
  })();
  (function inheritance() {
    var _inheritMany = hunkHelpers.inheritMany,
      _inherit = hunkHelpers.inherit;
    _inheritMany(B.Closure0Args, [A._asyncStarHelper_closure, A._AsyncStarStreamController__resumeBody, A._AsyncStarStreamController__resumeBody_closure, A._AsyncStarStreamController_closure0, A._AsyncStarStreamController_closure1, A._AsyncStarStreamController_closure, A._AsyncStarStreamController__closure, A._File_readAsBytes_readUnsized_read, A._File_readAsBytes_readSized_read]);
    _inheritMany(B.Closure, [A._asyncStarHelper_closure0, A._File_exists_closure, A._File_open_closure, A._File_length_closure, A._File_readAsBytes_readUnsized, A._File_readAsBytes_readUnsized_read_closure, A._File_readAsBytes_readSized_read_closure, A._File_readAsBytes_closure, A._File_readAsBytes__closure, A._RandomAccessFile_close_closure, A._RandomAccessFile_read_closure, A._RandomAccessFile_readInto_closure, A._RandomAccessFile_length_closure, A.FileSystemEntity_resolveSymbolicLinks_closure]);
    _inheritMany(B.Object, [A._AsyncStarStreamController, A._IterationMarker, A.OSError, A.FileMode, A.FileSystemException, A.FileSystemEntity, A._RandomAccessFile]);
    _inheritMany(A.FileSystemException, [A.PathAccessException, A.PathExistsException, A.PathNotFoundException]);
    _inherit(A._File, A.FileSystemEntity);
    _inherit(A._File_readAsBytes_readSized, B.Closure2Args);
    _inherit(A.DirectionalFocusIntent, H.Intent);
  })();
  B._Universe_addRules(init.typeUniverse, JSON.parse('{"_RandomAccessFile":{"RandomAccessFile":[]},"OSError":{"Exception":[]},"FileSystemException":{"Exception":[]},"PathAccessException":{"Exception":[]},"PathExistsException":{"Exception":[]},"PathNotFoundException":{"Exception":[]},"_File":{"File0":[]},"DirectionalFocusIntent":{"Intent":[]},"StreamStateManager":{"ChangeNotifier":[],"Listenable":[]}}'));
  var type$ = (function rtii() {
    var findType = B.findType;
    return {
      JSArray_Uint8List: findType("JSArray<Uint8List>"),
      List_int: findType("List<int>"),
      List_nullable_Object: findType("List<Object?>"),
      Null: findType("Null"),
      RandomAccessFile: findType("RandomAccessFile"),
      Stream_dynamic: findType("Stream<@>"),
      String: findType("String"),
      Uint8List: findType("Uint8List"),
      _AsyncCompleter_Uint8List: findType("_AsyncCompleter<Uint8List>"),
      _Future_Uint8List: findType("_Future<Uint8List>"),
      _Future_dynamic: findType("_Future<@>"),
      bool: findType("bool"),
      int: findType("int"),
      nullable_Object: findType("Object?"),
      void: findType("~"),
      void_Function_int_dynamic: findType("~(int,@)")
    };
  })();
  (function constants() {
    C.C_Uuid = new F.Uuid();
    C.FileMode_0 = new A.FileMode(0);
    C.FileMode_1 = new A.FileMode(1);
    C.FileMode_2 = new A.FileMode(2);
    C.FileMode_3 = new A.FileMode(3);
    C.FileMode_4 = new A.FileMode(4);
    C.DirectionalFocusIntent_TraversalDirection_3 = new A.DirectionalFocusIntent(D.TraversalDirection_3);
    C.DirectionalFocusIntent_TraversalDirection_1 = new A.DirectionalFocusIntent(D.TraversalDirection_1);
    C.DirectionalFocusIntent_TraversalDirection_2 = new A.DirectionalFocusIntent(D.TraversalDirection_2);
    C.DirectionalFocusIntent_TraversalDirection_0 = new A.DirectionalFocusIntent(D.TraversalDirection_0);
    C.Type_NextFocusIntent_OLT = B.typeLiteral("NextFocusIntent");
    C.Type_PreviousFocusIntent_HI0 = B.typeLiteral("PreviousFocusIntent");
  })();
  (function staticFields() {
    $._FileResourceInfo_openFiles = B.LinkedHashMap_LinkedHashMap$_empty(type$.int, B.findType("_FileResourceInfo"));
  })();
  (function lazyInitializers() {
    var _lazyFinal = hunkHelpers.lazyFinal;
    _lazyFinal($, "_IOResourceInfo__sw", "$get$_IOResourceInfo__sw", () => {
      var t1 = B.Stopwatch$();
      t1.start$0(0);
      return t1;
    });
    _lazyFinal($, "_IOResourceInfo__startTime", "$get$_IOResourceInfo__startTime", () => B.DateTime$now()._core$_value);
  })();
};
;
((d, h) => {
  d[h] = d.current;
  d.eventLog.push({p: "main.dart.js_219", e: "endPart", h: h});
})($__dart_deferred_initializers__, "CUHaOAodok9l5wXvkYsLxkEFGGQ=");
;
//# sourceMappingURL=main.dart.js_219.part.js.map
