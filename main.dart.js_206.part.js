// Generated by dart2js (NullSafetyMode.sound, csp, intern-composite-values), the Dart to JavaScript compiler version: 3.7.2.
((s, d, e) => {
  s[d] = s[d] || {};
  s[d][e] = s[d][e] || [];
  s[d][e].push({p: "main.dart.js_206", e: "beginPart"});
})(self, "$__dart_deferred_initializers__", "eventLog");
$__dart_deferred_initializers__.current = function(hunkHelpers, init, holdersList, $) {
  var J, B, C, G, E,
  A = {SliverGridGeometry: function SliverGridGeometry(t0, t1, t2, t3) {
      var _ = this;
      _.scrollOffset = t0;
      _.crossAxisOffset = t1;
      _.mainAxisExtent = t2;
      _.crossAxisExtent = t3;
    }, SliverGridLayout: function SliverGridLayout() {
    }, SliverGridRegularTileLayout: function SliverGridRegularTileLayout(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.crossAxisCount = t0;
      _.mainAxisStride = t1;
      _.crossAxisStride = t2;
      _.childMainAxisExtent = t3;
      _.childCrossAxisExtent = t4;
      _.reverseCrossAxis = t5;
    }, SliverGridDelegate: function SliverGridDelegate() {
    }, SliverGridDelegateWithFixedCrossAxisCount: function SliverGridDelegateWithFixedCrossAxisCount(t0, t1, t2, t3) {
      var _ = this;
      _.crossAxisCount = t0;
      _.mainAxisSpacing = t1;
      _.crossAxisSpacing = t2;
      _.mainAxisExtent = t3;
    }, SliverGridParentData: function SliverGridParentData(t0, t1, t2) {
      var _ = this;
      _.index = _.crossAxisOffset = null;
      _._keptAlive = false;
      _.KeepAliveParentDataMixin_keepAlive = t0;
      _.ContainerParentDataMixin_previousSibling = t1;
      _.ContainerParentDataMixin_nextSibling = t2;
      _.layoutOffset = null;
    }, RenderSliverGrid: function RenderSliverGrid(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _._gridDelegate = t0;
      _._childManager = t1;
      _._keepAliveBucket = t2;
      _.ContainerRenderObjectMixin__childCount = t3;
      _.ContainerRenderObjectMixin__firstChild = t4;
      _.ContainerRenderObjectMixin__lastChild = t5;
      _.parentData = _._geometry = null;
      _._depth = 0;
      _._object$_owner = _._object$_parent = null;
      _._needsLayout = true;
      _._relayoutBoundary = null;
      _._doingThisLayoutWithCallback = false;
      _._constraints = null;
      _.__RenderObject__wasRepaintBoundary_A = $;
      _._layerHandle = t6;
      _._needsCompositingBitsUpdate = false;
      _.__RenderObject__needsCompositing_A = $;
      _._needsPaint = true;
      _._needsCompositedLayerUpdate = false;
      _._cachedSemanticsConfiguration = null;
      _._needsSemanticsUpdate = true;
      _._semantics = null;
    },
    _AxisSize__convert(size, direction) {
      var t1;
      switch (direction.index) {
        case 0:
          t1 = size;
          break;
        case 1:
          t1 = new B.Size(size._dy, size._dx);
          break;
        default:
          t1 = null;
      }
      return t1;
    },
    _AxisSize_applyConstraints(_this, constraints, direction) {
      var t1;
      switch (direction.index) {
        case 0:
          t1 = constraints;
          break;
        case 1:
          t1 = constraints.get$flipped();
          break;
        default:
          t1 = null;
      }
      return t1.constrain$1(_this);
    },
    _AxisSize__(_this, other) {
      return new B.Size(_this._dx + other._dx, Math.max(_this._dy, other._dy));
    },
    RenderWrap__getChildSize(child) {
      return child.get$size(0);
    },
    RenderWrap__setChildPosition(offset, child) {
      var t1 = child.parentData;
      t1.toString;
      type$.WrapParentData._as(t1).offset = offset;
    },
    WrapAlignment: function WrapAlignment(t0, t1) {
      this.index = t0;
      this._name = t1;
    },
    WrapCrossAlignment: function WrapCrossAlignment(t0, t1) {
      this.index = t0;
      this._name = t1;
    },
    _RunMetrics: function _RunMetrics(t0, t1) {
      this.axisSize = t0;
      this.childCount = 1;
      this.leadingChild = t1;
    },
    WrapParentData: function WrapParentData(t0, t1, t2) {
      this.ContainerParentDataMixin_previousSibling = t0;
      this.ContainerParentDataMixin_nextSibling = t1;
      this.offset = t2;
    },
    RenderWrap: function RenderWrap(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14) {
      var _ = this;
      _._wrap$_direction = t0;
      _._wrap$_alignment = t1;
      _._wrap$_spacing = t2;
      _._runAlignment = t3;
      _._runSpacing = t4;
      _._wrap$_crossAxisAlignment = t5;
      _._wrap$_textDirection = t6;
      _._wrap$_verticalDirection = t7;
      _._wrap$_clipBehavior = t8;
      _._wrap$_hasVisualOverflow = false;
      _._wrap$_clipRectLayer = t9;
      _.ContainerRenderObjectMixin__childCount = t10;
      _.ContainerRenderObjectMixin__firstChild = t11;
      _.ContainerRenderObjectMixin__lastChild = t12;
      _._layoutCacheStorage = t13;
      _.parentData = _._box$_size = null;
      _._depth = 0;
      _._object$_owner = _._object$_parent = null;
      _._needsLayout = true;
      _._relayoutBoundary = null;
      _._doingThisLayoutWithCallback = false;
      _._constraints = null;
      _.__RenderObject__wasRepaintBoundary_A = $;
      _._layerHandle = t14;
      _._needsCompositingBitsUpdate = false;
      _.__RenderObject__needsCompositing_A = $;
      _._needsPaint = true;
      _._needsCompositedLayerUpdate = false;
      _._cachedSemanticsConfiguration = null;
      _._needsSemanticsUpdate = true;
      _._semantics = null;
    },
    RenderWrap_computeDryBaseline_findHighestBaseline: function RenderWrap_computeDryBaseline_findHighestBaseline(t0, t1, t2) {
      this._box_0 = t0;
      this.childConstraints = t1;
      this.baseline = t2;
    },
    RenderWrap_computeDryBaseline_getChildSize: function RenderWrap_computeDryBaseline_getChildSize(t0) {
      this.childConstraints = t0;
    },
    _RenderWrap_RenderBox_ContainerRenderObjectMixin: function _RenderWrap_RenderBox_ContainerRenderObjectMixin() {
    },
    _RenderWrap_RenderBox_ContainerRenderObjectMixin_RenderBoxContainerDefaultsMixin: function _RenderWrap_RenderBox_ContainerRenderObjectMixin_RenderBoxContainerDefaultsMixin() {
    },
    Wrap$(alignment, children, clipBehavior, crossAxisAlignment, direction, key, runAlignment, runSpacing, spacing, textDirection, verticalDirection) {
      return new A.Wrap(direction, alignment, spacing, runAlignment, runSpacing, crossAxisAlignment, textDirection, verticalDirection, clipBehavior, children, key);
    },
    Wrap: function Wrap(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10) {
      var _ = this;
      _.direction = t0;
      _.alignment = t1;
      _.spacing = t2;
      _.runAlignment = t3;
      _.runSpacing = t4;
      _.crossAxisAlignment = t5;
      _.textDirection = t6;
      _.verticalDirection = t7;
      _.clipBehavior = t8;
      _.children = t9;
      _.key = t10;
    },
    NeverScrollableScrollPhysics: function NeverScrollableScrollPhysics(t0) {
      this.parent = t0;
    },
    GridView: function GridView(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19) {
      var _ = this;
      _.gridDelegate = t0;
      _.childrenDelegate = t1;
      _.padding = t2;
      _.scrollDirection = t3;
      _.reverse = t4;
      _.controller = t5;
      _.primary = t6;
      _.physics = t7;
      _.scrollBehavior = t8;
      _.shrinkWrap = t9;
      _.center = t10;
      _.anchor = t11;
      _.cacheExtent = t12;
      _.semanticChildCount = t13;
      _.dragStartBehavior = t14;
      _.keyboardDismissBehavior = t15;
      _.restorationId = t16;
      _.clipBehavior = t17;
      _.hitTestBehavior = t18;
      _.key = t19;
    },
    SliverGrid: function SliverGrid(t0, t1, t2) {
      this.gridDelegate = t0;
      this.delegate = t1;
      this.key = t2;
    },
    EpochDateTimeConverter: function EpochDateTimeConverter() {
    },
    _$identity(value, $T) {
      return $T._as(value);
    },
    CustomMessage$(authorId, createdAt, deletedAt, deliveredAt, failedAt, id, metadata, pinned, reactions, replyToMessageId, seenAt, sentAt, $status, updatedAt) {
      return new A.CustomMessage(id, authorId, replyToMessageId, createdAt, deletedAt, failedAt, sentAt, deliveredAt, seenAt, updatedAt, reactions, pinned, metadata, $status, "custom");
    },
    _$JsonConverterToJson(value, toJson, Json, Value) {
      return value == null ? null : toJson.call$1(value);
    },
    Message: function Message() {
    },
    _$Message: function _$Message() {
    },
    CustomMessage: function CustomMessage(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14) {
      var _ = this;
      _.id = t0;
      _.authorId = t1;
      _.replyToMessageId = t2;
      _.createdAt = t3;
      _.deletedAt = t4;
      _.failedAt = t5;
      _.sentAt = t6;
      _.deliveredAt = t7;
      _.seenAt = t8;
      _.updatedAt = t9;
      _._reactions = t10;
      _.pinned = t11;
      _._metadata = t12;
      _.status = t13;
      _.$$type = t14;
    },
    _Message_Object__$Message: function _Message_Object__$Message() {
    },
    EqualUnmodifiableMapView: function EqualUnmodifiableMapView(t0, t1, t2) {
      this._freezed_annotation$_source = t0;
      this._collection$_map = t1;
      this.$ti = t2;
    },
    Freezed: function Freezed() {
    },
    StyledWidget_toMaterial(_this) {
      var _null = null;
      return K.Material$(C.Duration_200000, true, _null, _this, C.Clip_0, _null, 0, _null, _null, _null, _null, _null, L.MaterialType_0);
    },
    TDColors_get_grayColor1(_this) {
      var t1 = _this.__TDThemeData_colorMap_A;
      t1 === $ && B.throwLateFieldNI("colorMap");
      t1 = t1.$index(0, "grayColor1");
      return t1 == null ? D.Color_p2H : t1;
    }
  },
  D, I, K, L, F, M, H;
  J = holdersList[1];
  B = holdersList[0];
  C = holdersList[2];
  G = holdersList[171];
  E = holdersList[204];
  A = hunkHelpers.updateHolder(holdersList[22], A);
  D = holdersList[170];
  I = holdersList[130];
  K = holdersList[123];
  L = holdersList[144];
  F = holdersList[136];
  M = holdersList[89];
  H = holdersList[98];
  A.SliverGridGeometry.prototype = {
    getBoxConstraints$1(constraints) {
      var t1 = this.mainAxisExtent;
      return constraints.asBoxConstraints$3$crossAxisExtent$maxExtent$minExtent(this.crossAxisExtent, t1, t1);
    },
    toString$0(_) {
      var _this = this;
      return "SliverGridGeometry(" + C.JSArray_methods.join$1(B._setArrayType(["scrollOffset: " + B.S(_this.scrollOffset), "crossAxisOffset: " + B.S(_this.crossAxisOffset), "mainAxisExtent: " + B.S(_this.mainAxisExtent), "crossAxisExtent: " + B.S(_this.crossAxisExtent)], type$.JSArray_String), ", ") + ")";
    }
  };
  A.SliverGridLayout.prototype = {};
  A.SliverGridRegularTileLayout.prototype = {
    getMaxChildIndexForScrollOffset$1(scrollOffset) {
      var t1 = this.mainAxisStride;
      if (t1 > 0)
        return Math.max(0, this.crossAxisCount * C.JSNumber_methods.ceil$0(scrollOffset / t1) - 1);
      return 0;
    },
    _getOffsetFromStartInCrossAxis$1(crossAxisStart) {
      var t1, t2, _this = this;
      if (_this.reverseCrossAxis) {
        t1 = _this.crossAxisStride;
        t2 = _this.childCrossAxisExtent;
        return _this.crossAxisCount * t1 - crossAxisStart - t2 - (t1 - t2);
      }
      return crossAxisStart;
    },
    getGeometryForChildIndex$1(index) {
      var _this = this,
        t1 = _this.crossAxisCount,
        t2 = C.JSInt_methods.$mod(index, t1);
      return new A.SliverGridGeometry(C.JSInt_methods.$tdiv(index, t1) * _this.mainAxisStride, _this._getOffsetFromStartInCrossAxis$1(t2 * _this.crossAxisStride), _this.childMainAxisExtent, _this.childCrossAxisExtent);
    },
    computeMaxScrollOffset$1(childCount) {
      var t1;
      if (childCount === 0)
        return 0;
      t1 = this.mainAxisStride;
      return t1 * (C.JSInt_methods.$tdiv(childCount - 1, this.crossAxisCount) + 1) - (t1 - this.childMainAxisExtent);
    }
  };
  A.SliverGridDelegate.prototype = {};
  A.SliverGridDelegateWithFixedCrossAxisCount.prototype = {
    getLayout$1(constraints) {
      var _this = this,
        t1 = _this.crossAxisSpacing,
        t2 = _this.crossAxisCount,
        childCrossAxisExtent = Math.max(0, constraints.crossAxisExtent - t1 * (t2 - 1)) / t2,
        childMainAxisExtent = _this.mainAxisExtent;
      return new A.SliverGridRegularTileLayout(t2, childMainAxisExtent + _this.mainAxisSpacing, childCrossAxisExtent + t1, childMainAxisExtent, childCrossAxisExtent, I.axisDirectionIsReversed(constraints.crossAxisDirection));
    },
    shouldRelayout$1(oldDelegate) {
      var t1, _this = this;
      type$.SliverGridDelegateWithFixedCrossAxisCount._as(oldDelegate);
      t1 = true;
      if (oldDelegate.crossAxisCount === _this.crossAxisCount)
        if (oldDelegate.mainAxisSpacing === _this.mainAxisSpacing)
          if (oldDelegate.crossAxisSpacing === _this.crossAxisSpacing)
            t1 = oldDelegate.mainAxisExtent !== _this.mainAxisExtent;
      return t1;
    }
  };
  A.SliverGridParentData.prototype = {
    toString$0(_) {
      return "crossAxisOffset=" + B.S(this.crossAxisOffset) + "; " + this.super$SliverMultiBoxAdaptorParentData$toString(0);
    }
  };
  A.RenderSliverGrid.prototype = {
    setupParentData$1(child) {
      if (!(child.parentData instanceof A.SliverGridParentData))
        child.parentData = new A.SliverGridParentData(false, null, null);
    },
    set$gridDelegate(value) {
      var _this = this;
      if (_this._gridDelegate === value)
        return;
      if (B.getRuntimeTypeOfDartObject(value) !== B.getRuntimeTypeOfDartObject(_this._gridDelegate) || value.shouldRelayout$1(_this._gridDelegate))
        _this.markNeedsLayout$0();
      _this._gridDelegate = value;
    },
    childCrossAxisPosition$1(child) {
      var t1 = child.parentData;
      t1.toString;
      t1 = type$.SliverGridParentData._as(t1).crossAxisOffset;
      t1.toString;
      return t1;
    },
    performLayout$0() {
      var t2, scrollOffset, targetEndScrollOffset, layout, t3, firstIndex, targetLastIndex, leadingGarbage, firstChildGridGeometry, max, leadingScrollOffset, trailingScrollOffset, t4, t5, index, trailingChildWithLayout, gridGeometry, t6, child, t7, t8, reachedEnd, t9, childConstraints, t10, t11, estimatedTotalExtent, paintExtent, cacheExtent, _this = this, _null = null,
        constraints = type$.SliverConstraints._as(B.RenderObject.prototype.get$constraints.call(_this)),
        t1 = _this._childManager;
      t1._didUnderflow = false;
      t2 = constraints.scrollOffset;
      scrollOffset = t2 + constraints.cacheOrigin;
      targetEndScrollOffset = scrollOffset + constraints.remainingCacheExtent;
      layout = _this._gridDelegate.getLayout$1(constraints);
      t3 = layout.mainAxisStride;
      firstIndex = t3 > 1e-10 ? layout.crossAxisCount * C.JSNumber_methods.$tdiv(scrollOffset, t3) : 0;
      targetLastIndex = isFinite(targetEndScrollOffset) ? layout.getMaxChildIndexForScrollOffset$1(targetEndScrollOffset) : _null;
      if (_this.ContainerRenderObjectMixin__firstChild != null) {
        leadingGarbage = _this.calculateLeadingGarbage$1$firstIndex(firstIndex);
        _this.collectGarbage$2(leadingGarbage, targetLastIndex != null ? _this.calculateTrailingGarbage$1$lastIndex(targetLastIndex) : 0);
      } else
        _this.collectGarbage$2(0, 0);
      firstChildGridGeometry = layout.getGeometryForChildIndex$1(firstIndex);
      if (_this.ContainerRenderObjectMixin__firstChild == null)
        if (!_this.addInitialChild$2$index$layoutOffset(firstIndex, firstChildGridGeometry.scrollOffset)) {
          max = layout.computeMaxScrollOffset$1(t1.get$childCount());
          _this._geometry = H.SliverGeometry$(_null, false, _null, _null, max, 0, 0, max, _null);
          t1.didFinishLayout$0();
          return;
        }
      leadingScrollOffset = firstChildGridGeometry.scrollOffset;
      trailingScrollOffset = leadingScrollOffset + firstChildGridGeometry.mainAxisExtent;
      t3 = _this.ContainerRenderObjectMixin__firstChild;
      t3.toString;
      t4 = type$.RenderBox;
      t3 = t4._as(t3).parentData;
      t3.toString;
      t5 = type$.SliverMultiBoxAdaptorParentData;
      t3 = t5._as(t3).index;
      t3.toString;
      index = t3 - 1;
      t3 = type$.SliverGridParentData;
      trailingChildWithLayout = _null;
      for (; index >= firstIndex; --index) {
        gridGeometry = layout.getGeometryForChildIndex$1(index);
        t6 = gridGeometry.mainAxisExtent;
        child = _this.insertAndLayoutLeadingChild$1(constraints.asBoxConstraints$3$crossAxisExtent$maxExtent$minExtent(gridGeometry.crossAxisExtent, t6, t6));
        t7 = child.parentData;
        t7.toString;
        t3._as(t7);
        t8 = gridGeometry.scrollOffset;
        t7.layoutOffset = t8;
        t7.crossAxisOffset = gridGeometry.crossAxisOffset;
        if (trailingChildWithLayout == null)
          trailingChildWithLayout = child;
        trailingScrollOffset = Math.max(trailingScrollOffset, t8 + t6);
      }
      if (trailingChildWithLayout == null) {
        t6 = _this.ContainerRenderObjectMixin__firstChild;
        t6.toString;
        t6.layout$1(firstChildGridGeometry.getBoxConstraints$1(constraints));
        trailingChildWithLayout = _this.ContainerRenderObjectMixin__firstChild;
        t6 = trailingChildWithLayout.parentData;
        t6.toString;
        t3._as(t6);
        t6.layoutOffset = leadingScrollOffset;
        t6.crossAxisOffset = firstChildGridGeometry.crossAxisOffset;
      }
      t6 = trailingChildWithLayout.parentData;
      t6.toString;
      t6 = t5._as(t6).index;
      t6.toString;
      index = t6 + 1;
      t6 = B._instanceType(_this);
      t7 = t6._eval$1("ContainerRenderObjectMixin.0");
      t6 = t6._eval$1("ContainerRenderObjectMixin.1");
      t8 = targetLastIndex != null;
      while (true) {
        if (!(!t8 || index <= targetLastIndex)) {
          reachedEnd = false;
          break;
        }
        gridGeometry = layout.getGeometryForChildIndex$1(index);
        t9 = gridGeometry.mainAxisExtent;
        childConstraints = constraints.asBoxConstraints$3$crossAxisExtent$maxExtent$minExtent(gridGeometry.crossAxisExtent, t9, t9);
        t10 = t7._as(trailingChildWithLayout).parentData;
        t10.toString;
        child = t6._as(t10).ContainerParentDataMixin_nextSibling;
        if (child != null) {
          t10 = child.parentData;
          t10.toString;
          t10 = t5._as(t10).index;
          t10.toString;
          t10 = t10 !== index;
        } else
          t10 = true;
        if (t10) {
          child = _this.insertAndLayoutChild$2$after(childConstraints, trailingChildWithLayout);
          if (child == null) {
            reachedEnd = true;
            break;
          }
        } else
          child.layout$1(childConstraints);
        t10 = child.parentData;
        t10.toString;
        t3._as(t10);
        t11 = gridGeometry.scrollOffset;
        t10.layoutOffset = t11;
        t10.crossAxisOffset = gridGeometry.crossAxisOffset;
        trailingScrollOffset = Math.max(trailingScrollOffset, t11 + t9);
        ++index;
        trailingChildWithLayout = child;
      }
      t3 = _this.ContainerRenderObjectMixin__lastChild;
      t3.toString;
      t3 = t4._as(t3).parentData;
      t3.toString;
      t3 = t5._as(t3).index;
      t3.toString;
      estimatedTotalExtent = reachedEnd ? trailingScrollOffset : t1.estimateMaxScrollOffset$5$firstIndex$lastIndex$leadingScrollOffset$trailingScrollOffset(constraints, firstIndex, t3, leadingScrollOffset, trailingScrollOffset);
      paintExtent = _this.calculatePaintOffset$3$from$to(constraints, Math.min(t2, leadingScrollOffset), trailingScrollOffset);
      cacheExtent = _this.calculateCacheOffset$3$from$to(constraints, leadingScrollOffset, trailingScrollOffset);
      _this._geometry = H.SliverGeometry$(cacheExtent, estimatedTotalExtent > paintExtent || t2 > 0 || constraints.overlap !== 0, _null, _null, estimatedTotalExtent, paintExtent, 0, estimatedTotalExtent, _null);
      if (estimatedTotalExtent === trailingScrollOffset)
        t1._didUnderflow = true;
      t1.didFinishLayout$0();
    }
  };
  A.WrapAlignment.prototype = {
    _enumToString$0() {
      return "WrapAlignment." + this._name;
    },
    _distributeSpace$4(freeSpace, itemSpacing, itemCount, flipped) {
      var t1, _0_6, _this = this;
      $label0$0: {
        if (D.WrapAlignment_0 === _this) {
          t1 = new B._Record_2(flipped ? freeSpace : 0, itemSpacing);
          break $label0$0;
        }
        if (D.WrapAlignment_1 === _this) {
          t1 = D.WrapAlignment_0._distributeSpace$4(freeSpace, itemSpacing, itemCount, !flipped);
          break $label0$0;
        }
        _0_6 = D.WrapAlignment_3 === _this;
        if (_0_6 && itemCount < 2) {
          t1 = D.WrapAlignment_0._distributeSpace$4(freeSpace, itemSpacing, itemCount, flipped);
          break $label0$0;
        }
        if (D.WrapAlignment_2 === _this) {
          t1 = new B._Record_2(freeSpace / 2, itemSpacing);
          break $label0$0;
        }
        if (_0_6) {
          t1 = new B._Record_2(0, freeSpace / (itemCount - 1) + itemSpacing);
          break $label0$0;
        }
        if (D.WrapAlignment_4 === _this) {
          t1 = freeSpace / itemCount;
          t1 = new B._Record_2(t1 / 2, t1 + itemSpacing);
          break $label0$0;
        }
        if (D.WrapAlignment_5 === _this) {
          t1 = freeSpace / (itemCount + 1);
          t1 = new B._Record_2(t1, t1 + itemSpacing);
          break $label0$0;
        }
        t1 = null;
      }
      return t1;
    }
  };
  A.WrapCrossAlignment.prototype = {
    _enumToString$0() {
      return "WrapCrossAlignment." + this._name;
    },
    get$_flipped() {
      switch (this.index) {
        case 0:
          var t1 = D.WrapCrossAlignment_1;
          break;
        case 1:
          t1 = D.WrapCrossAlignment_0;
          break;
        case 2:
          t1 = D.WrapCrossAlignment_2;
          break;
        default:
          t1 = null;
      }
      return t1;
    },
    get$_wrap$_alignment() {
      switch (this.index) {
        case 0:
          var t1 = 0;
          break;
        case 1:
          t1 = 1;
          break;
        case 2:
          t1 = 0.5;
          break;
        default:
          t1 = null;
      }
      return t1;
    }
  };
  A._RunMetrics.prototype = {
    tryAddingNewChild$5(child, childSize, flipMainAxis, spacing, maxMainExtent) {
      var _this = this,
        t1 = _this.axisSize;
      if (t1._dx + childSize._dx + spacing - maxMainExtent > 1e-10)
        return new A._RunMetrics(childSize, child);
      else {
        _this.axisSize = A._AxisSize__(t1, A._AxisSize__(childSize, new B.Size(spacing, 0)));
        ++_this.childCount;
        if (flipMainAxis)
          _this.leadingChild = child;
        return null;
      }
    }
  };
  A.WrapParentData.prototype = {};
  A.RenderWrap.prototype = {
    set$direction(_, value) {
      if (this._wrap$_direction === value)
        return;
      this._wrap$_direction = value;
      this.markNeedsLayout$0();
    },
    set$alignment(value) {
      if (this._wrap$_alignment === value)
        return;
      this._wrap$_alignment = value;
      this.markNeedsLayout$0();
    },
    set$spacing(_, value) {
      if (this._wrap$_spacing === value)
        return;
      this._wrap$_spacing = value;
      this.markNeedsLayout$0();
    },
    set$runAlignment(value) {
      if (this._runAlignment === value)
        return;
      this._runAlignment = value;
      this.markNeedsLayout$0();
    },
    set$runSpacing(value) {
      if (this._runSpacing === value)
        return;
      this._runSpacing = value;
      this.markNeedsLayout$0();
    },
    set$crossAxisAlignment(value) {
      if (this._wrap$_crossAxisAlignment === value)
        return;
      this._wrap$_crossAxisAlignment = value;
      this.markNeedsLayout$0();
    },
    setupParentData$1(child) {
      type$.RenderBox._as(child);
      if (!(child.parentData instanceof A.WrapParentData))
        child.parentData = new A.WrapParentData(null, null, C.Offset_0_0);
    },
    computeMinIntrinsicWidth$1(height) {
      var child, t1, t2, t3, t4, t5, t6, width, t7, result, _this = this;
      B._asDouble(height);
      switch (_this._wrap$_direction.index) {
        case 0:
          child = _this.ContainerRenderObjectMixin__firstChild;
          for (t1 = B._instanceType(_this), t2 = t1._eval$1("ContainerRenderObjectMixin.0"), t1 = t1._eval$1("ContainerRenderObjectMixin.1"), t3 = type$.Object, t4 = type$._CachedLayoutCalculation_double_double, t5 = type$.double_Function_double, t6 = type$.double, width = 0; child != null;) {
            t7 = child.get$computeMinIntrinsicWidth();
            B.checkTypeBound(t6, t3, "Input", "_computeIntrinsics");
            t4._as(C._IntrinsicDimension_0);
            t5._as(t7);
            B.checkTypeBound(t6, t3, "Input", "_computeWithTimeline");
            result = C._IntrinsicDimension_0.memoize$3(child._layoutCacheStorage, 1 / 0, t7);
            width = Math.max(width, result);
            t7 = t2._as(child).parentData;
            t7.toString;
            child = t1._as(t7).ContainerParentDataMixin_nextSibling;
          }
          return width;
        case 1:
          return _this._computeIntrinsics$2$3(C.C__DryLayout, new B.BoxConstraints(0, 1 / 0, 0, height), _this.get$_computeDryLayout(), type$.BoxConstraints, type$.Size)._dx;
      }
    },
    computeMaxIntrinsicWidth$1(height) {
      var child, t1, t2, t3, t4, t5, t6, width, t7, result, _this = this;
      B._asDouble(height);
      switch (_this._wrap$_direction.index) {
        case 0:
          child = _this.ContainerRenderObjectMixin__firstChild;
          for (t1 = B._instanceType(_this), t2 = t1._eval$1("ContainerRenderObjectMixin.0"), t1 = t1._eval$1("ContainerRenderObjectMixin.1"), t3 = type$.Object, t4 = type$._CachedLayoutCalculation_double_double, t5 = type$.double_Function_double, t6 = type$.double, width = 0; child != null;) {
            t7 = child.get$computeMaxIntrinsicWidth();
            B.checkTypeBound(t6, t3, "Input", "_computeIntrinsics");
            t4._as(C._IntrinsicDimension_1);
            t5._as(t7);
            B.checkTypeBound(t6, t3, "Input", "_computeWithTimeline");
            result = C._IntrinsicDimension_1.memoize$3(child._layoutCacheStorage, 1 / 0, t7);
            width += result;
            t7 = t2._as(child).parentData;
            t7.toString;
            child = t1._as(t7).ContainerParentDataMixin_nextSibling;
          }
          return width;
        case 1:
          return _this._computeIntrinsics$2$3(C.C__DryLayout, new B.BoxConstraints(0, 1 / 0, 0, height), _this.get$_computeDryLayout(), type$.BoxConstraints, type$.Size)._dx;
      }
    },
    computeMinIntrinsicHeight$1(width) {
      var child, t1, t2, t3, t4, t5, t6, height, t7, result, _this = this;
      B._asDouble(width);
      switch (_this._wrap$_direction.index) {
        case 0:
          return _this._computeIntrinsics$2$3(C.C__DryLayout, new B.BoxConstraints(0, width, 0, 1 / 0), _this.get$_computeDryLayout(), type$.BoxConstraints, type$.Size)._dy;
        case 1:
          child = _this.ContainerRenderObjectMixin__firstChild;
          for (t1 = B._instanceType(_this), t2 = t1._eval$1("ContainerRenderObjectMixin.0"), t1 = t1._eval$1("ContainerRenderObjectMixin.1"), t3 = type$.Object, t4 = type$._CachedLayoutCalculation_double_double, t5 = type$.double_Function_double, t6 = type$.double, height = 0; child != null;) {
            t7 = child.get$computeMinIntrinsicHeight();
            B.checkTypeBound(t6, t3, "Input", "_computeIntrinsics");
            t4._as(C._IntrinsicDimension_2);
            t5._as(t7);
            B.checkTypeBound(t6, t3, "Input", "_computeWithTimeline");
            result = C._IntrinsicDimension_2.memoize$3(child._layoutCacheStorage, 1 / 0, t7);
            height = Math.max(height, result);
            t7 = t2._as(child).parentData;
            t7.toString;
            child = t1._as(t7).ContainerParentDataMixin_nextSibling;
          }
          return height;
      }
    },
    computeMaxIntrinsicHeight$1(width) {
      var child, t1, t2, t3, t4, t5, t6, height, t7, result, _this = this;
      B._asDouble(width);
      switch (_this._wrap$_direction.index) {
        case 0:
          return _this._computeIntrinsics$2$3(C.C__DryLayout, new B.BoxConstraints(0, width, 0, 1 / 0), _this.get$_computeDryLayout(), type$.BoxConstraints, type$.Size)._dy;
        case 1:
          child = _this.ContainerRenderObjectMixin__firstChild;
          for (t1 = B._instanceType(_this), t2 = t1._eval$1("ContainerRenderObjectMixin.0"), t1 = t1._eval$1("ContainerRenderObjectMixin.1"), t3 = type$.Object, t4 = type$._CachedLayoutCalculation_double_double, t5 = type$.double_Function_double, t6 = type$.double, height = 0; child != null;) {
            t7 = child.get$computeMaxIntrinsicHeight();
            B.checkTypeBound(t6, t3, "Input", "_computeIntrinsics");
            t4._as(C._IntrinsicDimension_3);
            t5._as(t7);
            B.checkTypeBound(t6, t3, "Input", "_computeWithTimeline");
            result = C._IntrinsicDimension_3.memoize$3(child._layoutCacheStorage, 1 / 0, t7);
            height += result;
            t7 = t2._as(child).parentData;
            t7.toString;
            child = t1._as(t7).ContainerParentDataMixin_nextSibling;
          }
          return height;
      }
    },
    computeDistanceToActualBaseline$1(baseline) {
      return this.defaultComputeDistanceToHighestActualBaseline$1(type$.TextBaseline._as(baseline));
    },
    _getMainAxisExtent$1(childSize) {
      var t1;
      switch (this._wrap$_direction.index) {
        case 0:
          t1 = childSize._dx;
          break;
        case 1:
          t1 = childSize._dy;
          break;
        default:
          t1 = null;
      }
      return t1;
    },
    _getCrossAxisExtent$1(childSize) {
      var t1;
      switch (this._wrap$_direction.index) {
        case 0:
          t1 = childSize._dy;
          break;
        case 1:
          t1 = childSize._dx;
          break;
        default:
          t1 = null;
      }
      return t1;
    },
    _getOffset$2(mainAxisOffset, crossAxisOffset) {
      var t1;
      switch (this._wrap$_direction.index) {
        case 0:
          t1 = new B.Offset(mainAxisOffset, crossAxisOffset);
          break;
        case 1:
          t1 = new B.Offset(crossAxisOffset, mainAxisOffset);
          break;
        default:
          t1 = null;
      }
      return t1;
    },
    get$_areAxesFlipped() {
      var t2,
        t1 = this._wrap$_textDirection;
      switch ((t1 == null ? C.TextDirection_1 : t1).index) {
        case 1:
          t1 = false;
          break;
        case 0:
          t1 = true;
          break;
        default:
          t1 = null;
      }
      switch (this._wrap$_verticalDirection.index) {
        case 1:
          t2 = false;
          break;
        case 0:
          t2 = true;
          break;
        default:
          t2 = null;
      }
      switch (this._wrap$_direction.index) {
        case 0:
          t1 = new B._Record_2(t1, t2);
          break;
        case 1:
          t1 = new B._Record_2(t2, t1);
          break;
        default:
          t1 = null;
      }
      return t1;
    },
    computeDryBaseline$2(constraints, baseline) {
      var t1, _0_0, _0_1, runMetrics, t2, _0_2, childrenAxisSize, containerAxisSize, _this = this, _null = null, _box_0 = {};
      type$.BoxConstraints._as(constraints);
      type$.TextBaseline._as(baseline);
      if (_this.ContainerRenderObjectMixin__firstChild == null)
        return _null;
      switch (_this._wrap$_direction.index) {
        case 0:
          t1 = new B.BoxConstraints(0, constraints.maxWidth, 0, 1 / 0);
          break;
        case 1:
          t1 = new B.BoxConstraints(0, 1 / 0, 0, constraints.maxHeight);
          break;
        default:
          t1 = _null;
      }
      _0_0 = _this._computeRuns$2(constraints, F.layout_helper_ChildLayoutHelper_dryLayoutChild$closure());
      _0_1 = _0_0._0;
      runMetrics = _null;
      t2 = false;
      _0_2 = _0_0._1;
      t2 = type$.List__RunMetrics._is(_0_2);
      if (t2)
        runMetrics = _0_2;
      childrenAxisSize = _0_1;
      if (!t2)
        throw B.wrapException(B.StateError$("Pattern matching error"));
      containerAxisSize = A._AxisSize_applyConstraints(childrenAxisSize, constraints, _this._wrap$_direction);
      _box_0.baselineOffset = null;
      _this._positionChildren$5(runMetrics, childrenAxisSize, containerAxisSize, new A.RenderWrap_computeDryBaseline_findHighestBaseline(_box_0, t1, baseline), new A.RenderWrap_computeDryBaseline_getChildSize(t1));
      return _box_0.baselineOffset;
    },
    computeDryLayout$1(constraints) {
      return this._wrap$_computeDryLayout$1(constraints);
    },
    _wrap$_computeDryLayout$1(constraints) {
      var t1, _0_1, mainAxisLimit, _0_2, childConstraints, child, t2, mainAxisExtent, crossAxisExtent, runMainAxisExtent, runCrossAxisExtent, childCount, childSize, childMainAxisExtent, childCrossAxisExtent, t3, _this = this, _null = null;
      switch (_this._wrap$_direction.index) {
        case 0:
          t1 = constraints.maxWidth;
          t1 = new B._Record_2(new B.BoxConstraints(0, t1, 0, 1 / 0), t1);
          break;
        case 1:
          t1 = constraints.maxHeight;
          t1 = new B._Record_2(new B.BoxConstraints(0, 1 / 0, 0, t1), t1);
          break;
        default:
          t1 = _null;
      }
      _0_1 = t1._0;
      mainAxisLimit = _null;
      _0_2 = t1._1;
      mainAxisLimit = _0_2;
      childConstraints = _0_1;
      child = _this.ContainerRenderObjectMixin__firstChild;
      for (t1 = B._instanceType(_this), t2 = t1._eval$1("ContainerRenderObjectMixin.0"), t1 = t1._eval$1("ContainerRenderObjectMixin.1"), mainAxisExtent = 0, crossAxisExtent = 0, runMainAxisExtent = 0, runCrossAxisExtent = 0, childCount = 0; child != null;) {
        childSize = F.ChildLayoutHelper_dryLayoutChild(child, childConstraints);
        childMainAxisExtent = _this._getMainAxisExtent$1(childSize);
        childCrossAxisExtent = _this._getCrossAxisExtent$1(childSize);
        if (childCount > 0) {
          t3 = _this._wrap$_spacing;
          if (typeof mainAxisLimit !== "number")
            return B.iae(mainAxisLimit);
          t3 = runMainAxisExtent + childMainAxisExtent + t3 > mainAxisLimit;
        } else
          t3 = false;
        if (t3) {
          mainAxisExtent = Math.max(mainAxisExtent, runMainAxisExtent);
          crossAxisExtent += runCrossAxisExtent + _this._runSpacing;
          runMainAxisExtent = 0;
          runCrossAxisExtent = 0;
          childCount = 0;
        }
        runMainAxisExtent += childMainAxisExtent;
        runCrossAxisExtent = Math.max(runCrossAxisExtent, childCrossAxisExtent);
        if (childCount > 0)
          runMainAxisExtent += _this._wrap$_spacing;
        ++childCount;
        t3 = t2._as(child).parentData;
        t3.toString;
        child = t1._as(t3).ContainerParentDataMixin_nextSibling;
      }
      crossAxisExtent += runCrossAxisExtent;
      mainAxisExtent = Math.max(mainAxisExtent, runMainAxisExtent);
      switch (_this._wrap$_direction.index) {
        case 0:
          t1 = new B.Size(mainAxisExtent, crossAxisExtent);
          break;
        case 1:
          t1 = new B.Size(crossAxisExtent, mainAxisExtent);
          break;
        default:
          t1 = _null;
      }
      return constraints.constrain$1(t1);
    },
    performLayout$0() {
      var _0_0, _0_1, runMetrics, t1, _0_2, childrenAxisSize, containerAxisSize, t2, _this = this,
        constraints = type$.BoxConstraints._as(B.RenderObject.prototype.get$constraints.call(_this));
      if (_this.ContainerRenderObjectMixin__firstChild == null) {
        _this._box$_size = new B.Size(B.clampDouble(0, constraints.minWidth, constraints.maxWidth), B.clampDouble(0, constraints.minHeight, constraints.maxHeight));
        _this._wrap$_hasVisualOverflow = false;
        return;
      }
      _0_0 = _this._computeRuns$2(constraints, F.layout_helper_ChildLayoutHelper_layoutChild$closure());
      _0_1 = _0_0._0;
      runMetrics = null;
      t1 = false;
      _0_2 = _0_0._1;
      t1 = type$.List__RunMetrics._is(_0_2);
      if (t1)
        runMetrics = _0_2;
      childrenAxisSize = _0_1;
      if (!t1)
        throw B.wrapException(B.StateError$("Pattern matching error"));
      t1 = _this._wrap$_direction;
      containerAxisSize = A._AxisSize_applyConstraints(childrenAxisSize, constraints, t1);
      _this._box$_size = A._AxisSize__convert(containerAxisSize, t1);
      t1 = containerAxisSize._dx - childrenAxisSize._dx;
      t2 = containerAxisSize._dy - childrenAxisSize._dy;
      _this._wrap$_hasVisualOverflow = t1 < 0 || t2 < 0;
      _this._positionChildren$5(runMetrics, new B.Size(t1, t2), containerAxisSize, A.wrap_RenderWrap__setChildPosition$closure(), A.wrap_RenderWrap__getChildSize$closure());
    },
    _computeRuns$2(constraints, layoutChild) {
      var t1, _0_1, mainAxisLimit, _0_2, childConstraints, _1_1, flipMainAxis, spacing, runMetrics, child, t2, currentRun, childrenAxisSize, _this0, t3, newRun, _this = this, _null = null,
        _s22_ = "Pattern matching error";
      type$.Size_Function_RenderBox_BoxConstraints._as(layoutChild);
      switch (_this._wrap$_direction.index) {
        case 0:
          t1 = constraints.maxWidth;
          t1 = new B._Record_2(new B.BoxConstraints(0, t1, 0, 1 / 0), t1);
          break;
        case 1:
          t1 = constraints.maxHeight;
          t1 = new B._Record_2(new B.BoxConstraints(0, 1 / 0, 0, t1), t1);
          break;
        default:
          t1 = _null;
      }
      _0_1 = t1._0;
      mainAxisLimit = _null;
      _0_2 = t1._1;
      mainAxisLimit = _0_2;
      childConstraints = _0_1;
      _1_1 = _this.get$_areAxesFlipped()._0;
      flipMainAxis = _1_1;
      spacing = _this._wrap$_spacing;
      runMetrics = B._setArrayType([], type$.JSArray__RunMetrics);
      child = _this.ContainerRenderObjectMixin__firstChild;
      t1 = B._instanceType(_this);
      t2 = t1._eval$1("ContainerRenderObjectMixin.0");
      t1 = t1._eval$1("ContainerRenderObjectMixin.1");
      currentRun = _null;
      childrenAxisSize = C.Size_0_0;
      while (child != null) {
        _this0 = A._AxisSize__convert(layoutChild.call$2(child, childConstraints), _this._wrap$_direction);
        t3 = currentRun == null;
        newRun = t3 ? new A._RunMetrics(_this0, child) : currentRun.tryAddingNewChild$5(child, _this0, flipMainAxis, spacing, mainAxisLimit);
        if (newRun != null) {
          C.JSArray_methods.add$1(runMetrics, newRun);
          if (t3)
            t3 = _null;
          else {
            t3 = currentRun.axisSize;
            _this0 = new B.Size(t3._dy, t3._dx);
            t3 = _this0;
          }
          if (t3 == null)
            t3 = C.Size_0_0;
          _this0 = new B.Size(childrenAxisSize._dx + t3._dx, Math.max(childrenAxisSize._dy, t3._dy));
          childrenAxisSize = _this0;
          currentRun = newRun;
        }
        t3 = t2._as(child).parentData;
        t3.toString;
        child = t1._as(t3).ContainerParentDataMixin_nextSibling;
      }
      t1 = _this._runSpacing;
      t2 = runMetrics.length;
      t3 = currentRun.axisSize;
      childrenAxisSize = A._AxisSize__(childrenAxisSize, A._AxisSize__(new B.Size(t1 * (t2 - 1), 0), new B.Size(t3._dy, t3._dx)));
      return new B._Record_2(new B.Size(childrenAxisSize._dy, childrenAxisSize._dx), runMetrics);
    },
    _positionChildren$5(runMetrics, freeAxisSize, containerAxisSize, positionChild, getChildSize) {
      var spacing, crossAxisFreeSpace, _0_0, _0_1, flipCrossAxis, _0_2, effectiveCrossAlignment, _1_0, _1_1, runBetweenSpace, _1_2, nextChild, t1, t2, runCrossAxisOffset, t3, t4, runCrossAxisExtent, childCount, mainAxisFreeSpace, _2_0, _2_1, childBetweenSpace, _2_2, remainingChildCount, child, childMainAxisOffset, _this0, _3_1, childCrossAxisExtent, _3_2, _this = this, _null = null;
      type$.List__RunMetrics._as(runMetrics);
      type$.void_Function_Offset_RenderBox._as(positionChild);
      type$.Size_Function_RenderBox._as(getChildSize);
      spacing = _this._wrap$_spacing;
      crossAxisFreeSpace = Math.max(0, freeAxisSize._dy);
      _0_0 = _this.get$_areAxesFlipped();
      _0_1 = _0_0._0;
      flipCrossAxis = _null;
      _0_2 = _0_0._1;
      flipCrossAxis = _0_2;
      B.boolConversionCheck(flipCrossAxis);
      effectiveCrossAlignment = _this._wrap$_crossAxisAlignment;
      if (flipCrossAxis)
        effectiveCrossAlignment = effectiveCrossAlignment.get$_flipped();
      _1_0 = _this._runAlignment._distributeSpace$4(crossAxisFreeSpace, _this._runSpacing, runMetrics.length, flipCrossAxis);
      _1_1 = _1_0._0;
      runBetweenSpace = _null;
      _1_2 = _1_0._1;
      runBetweenSpace = _1_2;
      nextChild = B.boolConversionCheck(_0_1) ? _this.get$childBefore() : _this.get$childAfter();
      for (t1 = J.get$iterator$ax(flipCrossAxis ? new B.ReversedListIterable(runMetrics, B._arrayInstanceType(runMetrics)._eval$1("ReversedListIterable<1>")) : runMetrics), t2 = containerAxisSize._dx, runCrossAxisOffset = _1_1; t1.moveNext$0();) {
        t3 = t1.get$current(t1);
        t4 = t3.axisSize;
        runCrossAxisExtent = t4._dy;
        childCount = t3.childCount;
        mainAxisFreeSpace = Math.max(0, t2 - t4._dx);
        _2_0 = _this._wrap$_alignment._distributeSpace$4(mainAxisFreeSpace, spacing, childCount, _0_1);
        _2_1 = _2_0._0;
        childBetweenSpace = _null;
        _2_2 = _2_0._1;
        childBetweenSpace = _2_2;
        remainingChildCount = t3.childCount;
        child = t3.leadingChild;
        childMainAxisOffset = _2_1;
        while (true) {
          if (!(child != null && remainingChildCount > 0))
            break;
          _this0 = A._AxisSize__convert(getChildSize.call$1(child), _this._wrap$_direction);
          _3_1 = _this0._dx;
          childCrossAxisExtent = _null;
          _3_2 = _this0._dy;
          childCrossAxisExtent = _3_2;
          t3 = effectiveCrossAlignment.get$_wrap$_alignment();
          if (typeof childCrossAxisExtent !== "number")
            return B.iae(childCrossAxisExtent);
          positionChild.call$2(_this._getOffset$2(childMainAxisOffset, runCrossAxisOffset + t3 * (runCrossAxisExtent - childCrossAxisExtent)), child);
          if (typeof _3_1 !== "number")
            return _3_1.$add();
          if (typeof childBetweenSpace !== "number")
            return B.iae(childBetweenSpace);
          childMainAxisOffset += _3_1 + childBetweenSpace;
          child = nextChild.call$1(child);
          --remainingChildCount;
        }
        if (typeof runBetweenSpace !== "number")
          return B.iae(runBetweenSpace);
        runCrossAxisOffset += runCrossAxisExtent + runBetweenSpace;
      }
    },
    hitTestChildren$2$position(result, position) {
      return this.defaultHitTestChildren$2$position(result, position);
    },
    paint$2(context, offset) {
      var t3, _this = this,
        t1 = _this._wrap$_hasVisualOverflow && _this._wrap$_clipBehavior !== C.Clip_0,
        t2 = _this._wrap$_clipRectLayer;
      if (t1) {
        t1 = _this.__RenderObject__needsCompositing_A;
        t1 === $ && B.throwLateFieldNI("_needsCompositing");
        t3 = _this.get$size(0);
        t2.set$layer(0, context.pushClipRect$6$clipBehavior$oldLayer(t1, offset, new B.Rect(0, 0, 0 + t3._dx, 0 + t3._dy), _this.get$defaultPaint(), _this._wrap$_clipBehavior, t2._layer));
      } else {
        t2.set$layer(0, null);
        _this.defaultPaint$2(context, offset);
      }
    },
    dispose$0() {
      this._wrap$_clipRectLayer.set$layer(0, null);
      this.super$RenderObject$dispose();
    }
  };
  A._RenderWrap_RenderBox_ContainerRenderObjectMixin.prototype = {
    attach$1(owner) {
      var child, t1, t2;
      this.super$RenderObject$attach(owner);
      child = this.ContainerRenderObjectMixin__firstChild;
      for (t1 = type$.WrapParentData; child != null;) {
        child.attach$1(owner);
        t2 = child.parentData;
        t2.toString;
        child = t1._as(t2).ContainerParentDataMixin_nextSibling;
      }
    },
    detach$0(_) {
      var child, t1, t2;
      this.super$RenderObject$detach(0);
      child = this.ContainerRenderObjectMixin__firstChild;
      for (t1 = type$.WrapParentData; child != null;) {
        child.detach$0(0);
        t2 = child.parentData;
        t2.toString;
        child = t1._as(t2).ContainerParentDataMixin_nextSibling;
      }
    }
  };
  A._RenderWrap_RenderBox_ContainerRenderObjectMixin_RenderBoxContainerDefaultsMixin.prototype = {};
  A.Wrap.prototype = {
    createRenderObject$1(context) {
      var _this = this,
        t1 = B.Directionality_maybeOf(context);
      t1 = new A.RenderWrap(_this.direction, _this.alignment, _this.spacing, _this.runAlignment, _this.runSpacing, _this.crossAxisAlignment, t1, _this.verticalDirection, _this.clipBehavior, B.LayerHandle$(type$.ClipRectLayer), 0, null, null, new B._LayoutCacheStorage(), B.LayerHandle$(type$.ContainerLayer));
      t1.RenderObject$0();
      t1.addAll$1(0, null);
      return t1;
    },
    updateRenderObject$2(context, renderObject) {
      var t1, _this = this;
      type$.RenderWrap._as(renderObject);
      renderObject.set$direction(0, _this.direction);
      renderObject.set$alignment(_this.alignment);
      renderObject.set$spacing(0, _this.spacing);
      renderObject.set$runAlignment(_this.runAlignment);
      renderObject.set$runSpacing(_this.runSpacing);
      renderObject.set$crossAxisAlignment(_this.crossAxisAlignment);
      t1 = B.Directionality_maybeOf(context);
      if (renderObject._wrap$_textDirection != t1) {
        renderObject._wrap$_textDirection = t1;
        renderObject.markNeedsLayout$0();
      }
      t1 = _this.verticalDirection;
      if (renderObject._wrap$_verticalDirection !== t1) {
        renderObject._wrap$_verticalDirection = t1;
        renderObject.markNeedsLayout$0();
      }
      t1 = _this.clipBehavior;
      if (t1 !== renderObject._wrap$_clipBehavior) {
        renderObject._wrap$_clipBehavior = t1;
        renderObject.markNeedsPaint$0();
        renderObject.markNeedsSemanticsUpdate$0();
      }
    }
  };
  A.NeverScrollableScrollPhysics.prototype = {
    applyTo$1(ancestor) {
      return new A.NeverScrollableScrollPhysics(this.buildParent$1(ancestor));
    },
    get$allowUserScrolling() {
      return false;
    },
    get$allowImplicitScrolling() {
      return false;
    }
  };
  A.GridView.prototype = {
    buildChildLayout$1(context) {
      return new A.SliverGrid(this.gridDelegate, this.childrenDelegate, null);
    }
  };
  A.SliverGrid.prototype = {
    createRenderObject$1(context) {
      var t1 = new A.RenderSliverGrid(this.gridDelegate, type$.SliverMultiBoxAdaptorElement._as(context), B.LinkedHashMap_LinkedHashMap$_empty(type$.int, type$.RenderBox), 0, null, null, B.LayerHandle$(type$.ContainerLayer));
      t1.RenderObject$0();
      return t1;
    },
    updateRenderObject$2(context, renderObject) {
      type$.RenderSliverGrid._as(renderObject).set$gridDelegate(this.gridDelegate);
    },
    estimateMaxScrollOffset$5(constraints, firstIndex, lastIndex, leadingScrollOffset, trailingScrollOffset) {
      var t1, t2;
      this.super$SliverMultiBoxAdaptorWidget$estimateMaxScrollOffset(constraints, firstIndex, lastIndex, leadingScrollOffset, trailingScrollOffset);
      t1 = this.gridDelegate.getLayout$1(constraints);
      t2 = this.delegate.get$estimatedChildCount();
      t2.toString;
      t2 = t1.computeMaxScrollOffset$1(t2);
      return t2;
    }
  };
  A.EpochDateTimeConverter.prototype = {
    toJson$1(object) {
      return object.toUtc$0()._core$_value;
    }
  };
  A.Message.prototype = {
    get$resolvedStatus() {
      var t1, _this = this;
      if (_this.get$status(_this) != null)
        return _this.get$status(_this);
      t1 = _this.get$metadata(_this);
      if (J.$eq$(t1 == null ? null : J.$index$asx(t1, "sending"), true))
        return E.MessageStatus_3;
      if (_this.get$failedAt() != null)
        return E.MessageStatus_1;
      if (_this.get$seenAt() != null)
        return E.MessageStatus_2;
      if (_this.get$deliveredAt() != null)
        return E.MessageStatus_0;
      if (_this.get$sentAt() != null)
        return E.MessageStatus_4;
      return null;
    },
    get$resolvedTime() {
      var t1 = this.get$sentAt();
      return t1 == null ? this.get$createdAt() : t1;
    }
  };
  A._$Message.prototype = {
    $eq(_, other) {
      var t1, _this = this;
      if (other == null)
        return false;
      if (_this !== other) {
        t1 = false;
        if (J.get$runtimeType$(other) === B.getRuntimeTypeOfDartObject(_this))
          if (other instanceof A.Message)
            if (other.get$id(other) === _this.get$id(_this) || other.get$id(other) === _this.get$id(_this))
              if (other.get$authorId() === _this.get$authorId() || other.get$authorId() === _this.get$authorId())
                if (other.get$replyToMessageId() == _this.get$replyToMessageId() || other.get$replyToMessageId() == _this.get$replyToMessageId())
                  if (other.get$createdAt() == _this.get$createdAt() || J.$eq$(other.get$createdAt(), _this.get$createdAt()))
                    if (other.get$deletedAt() == _this.get$deletedAt() || J.$eq$(other.get$deletedAt(), _this.get$deletedAt()))
                      if (other.get$failedAt() == _this.get$failedAt() || J.$eq$(other.get$failedAt(), _this.get$failedAt()))
                        if (other.get$sentAt() == _this.get$sentAt() || J.$eq$(other.get$sentAt(), _this.get$sentAt()))
                          if (other.get$deliveredAt() == _this.get$deliveredAt() || J.$eq$(other.get$deliveredAt(), _this.get$deliveredAt()))
                            if (other.get$seenAt() == _this.get$seenAt() || J.$eq$(other.get$seenAt(), _this.get$seenAt()))
                              if (other.get$updatedAt() == _this.get$updatedAt() || J.$eq$(other.get$updatedAt(), _this.get$updatedAt()))
                                if (G.DeepCollectionEquality_false.equals$2(other.get$reactions(), _this.get$reactions()))
                                  if (other.get$pinned() == _this.get$pinned() || other.get$pinned() == _this.get$pinned())
                                    if (G.DeepCollectionEquality_false.equals$2(other.get$metadata(other), _this.get$metadata(_this)))
                                      t1 = other.get$status(other) == _this.get$status(_this) || other.get$status(other) == _this.get$status(_this);
      } else
        t1 = true;
      return t1;
    },
    get$hashCode(_) {
      var _this = this;
      return B.Object_hash(B.getRuntimeTypeOfDartObject(_this), _this.get$id(_this), _this.get$authorId(), _this.get$replyToMessageId(), _this.get$createdAt(), _this.get$deletedAt(), _this.get$failedAt(), _this.get$sentAt(), _this.get$deliveredAt(), _this.get$seenAt(), _this.get$updatedAt(), G.DeepCollectionEquality_false.hash$1(0, _this.get$reactions()), _this.get$pinned(), G.DeepCollectionEquality_false.hash$1(0, _this.get$metadata(_this)), _this.get$status(_this), C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue);
    },
    toString$0(_) {
      var _this = this;
      return "Message(id: " + _this.get$id(_this) + ", authorId: " + _this.get$authorId() + ", replyToMessageId: " + B.S(_this.get$replyToMessageId()) + ", createdAt: " + B.S(_this.get$createdAt()) + ", deletedAt: " + B.S(_this.get$deletedAt()) + ", failedAt: " + B.S(_this.get$failedAt()) + ", sentAt: " + B.S(_this.get$sentAt()) + ", deliveredAt: " + B.S(_this.get$deliveredAt()) + ", seenAt: " + B.S(_this.get$seenAt()) + ", updatedAt: " + B.S(_this.get$updatedAt()) + ", reactions: " + B.S(_this.get$reactions()) + ", pinned: " + B.S(_this.get$pinned()) + ", metadata: " + B.S(_this.get$metadata(_this)) + ", status: " + B.S(_this.get$status(_this)) + ")";
    }
  };
  A.CustomMessage.prototype = {
    get$reactions() {
      var value = this._reactions;
      if (value == null)
        return null;
      if (value instanceof A.EqualUnmodifiableMapView)
        return value;
      return new A.EqualUnmodifiableMapView(value, value, type$.EqualUnmodifiableMapView_of_String_and_List_String);
    },
    get$metadata(_) {
      var value = this._metadata;
      if (value == null)
        return null;
      if (value instanceof A.EqualUnmodifiableMapView)
        return value;
      return new A.EqualUnmodifiableMapView(value, value, type$.EqualUnmodifiableMapView_String_dynamic);
    },
    toJson$0() {
      var _0_0, t2, t3, t4, _1_0, _2_0, _3_0, _4_0, _5_0, _6_0, _7_0, _8_0, _9_0, _10_0, _11_0, _this = this,
        t1 = B.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic);
      t1.$indexSet(0, "id", _this.id);
      t1.$indexSet(0, "authorId", _this.authorId);
      _0_0 = _this.replyToMessageId;
      if (_0_0 != null)
        t1.$indexSet(0, "replyToMessageId", _0_0);
      t2 = D.C_EpochDateTimeConverter.get$toJson();
      t3 = type$.int;
      t4 = type$.DateTime;
      _1_0 = A._$JsonConverterToJson(_this.createdAt, t2, t3, t4);
      if (_1_0 != null)
        t1.$indexSet(0, "createdAt", _1_0);
      _2_0 = A._$JsonConverterToJson(_this.deletedAt, t2, t3, t4);
      if (_2_0 != null)
        t1.$indexSet(0, "deletedAt", _2_0);
      _3_0 = A._$JsonConverterToJson(_this.failedAt, t2, t3, t4);
      if (_3_0 != null)
        t1.$indexSet(0, "failedAt", _3_0);
      _4_0 = A._$JsonConverterToJson(_this.sentAt, t2, t3, t4);
      if (_4_0 != null)
        t1.$indexSet(0, "sentAt", _4_0);
      _5_0 = A._$JsonConverterToJson(_this.deliveredAt, t2, t3, t4);
      if (_5_0 != null)
        t1.$indexSet(0, "deliveredAt", _5_0);
      _6_0 = A._$JsonConverterToJson(_this.seenAt, t2, t3, t4);
      if (_6_0 != null)
        t1.$indexSet(0, "seenAt", _6_0);
      _7_0 = A._$JsonConverterToJson(_this.updatedAt, t2, t3, t4);
      if (_7_0 != null)
        t1.$indexSet(0, "updatedAt", _7_0);
      _8_0 = _this.get$reactions();
      if (_8_0 != null)
        t1.$indexSet(0, "reactions", _8_0);
      _9_0 = _this.pinned;
      if (_9_0 != null)
        t1.$indexSet(0, "pinned", _9_0);
      _10_0 = _this.get$metadata(0);
      if (_10_0 != null)
        t1.$indexSet(0, "metadata", _10_0);
      _11_0 = D.Map_f1RYh.$index(0, _this.status);
      if (_11_0 != null)
        t1.$indexSet(0, "status", _11_0);
      t1.$indexSet(0, "type", _this.$$type);
      return t1;
    },
    $eq(_, other) {
      var t1, t2, t3, _this = this;
      if (other == null)
        return false;
      if (_this !== other) {
        t1 = false;
        if (J.get$runtimeType$(other) === B.getRuntimeTypeOfDartObject(_this))
          if (other instanceof A.CustomMessage) {
            t2 = other.id === _this.id;
            if (t2 || t2) {
              t2 = other.authorId === _this.authorId;
              if (t2 || t2) {
                t2 = other.replyToMessageId == _this.replyToMessageId;
                if (t2 || t2) {
                  t2 = other.createdAt;
                  t3 = _this.createdAt;
                  if (t2 == t3 || J.$eq$(t2, t3)) {
                    t2 = other.deletedAt;
                    t3 = _this.deletedAt;
                    if (t2 == t3 || J.$eq$(t2, t3)) {
                      t2 = other.failedAt;
                      t3 = _this.failedAt;
                      if (t2 == t3 || J.$eq$(t2, t3)) {
                        t2 = other.sentAt;
                        t3 = _this.sentAt;
                        if (t2 == t3 || J.$eq$(t2, t3)) {
                          t2 = other.deliveredAt;
                          t3 = _this.deliveredAt;
                          if (t2 == t3 || J.$eq$(t2, t3)) {
                            t2 = other.seenAt;
                            t3 = _this.seenAt;
                            if (t2 == t3 || J.$eq$(t2, t3)) {
                              t2 = other.updatedAt;
                              t3 = _this.updatedAt;
                              if (t2 == t3 || J.$eq$(t2, t3))
                                if (G.DeepCollectionEquality_false.equals$2(other._reactions, _this._reactions)) {
                                  t2 = other.pinned == _this.pinned;
                                  if (t2 || t2)
                                    if (G.DeepCollectionEquality_false.equals$2(other._metadata, _this._metadata)) {
                                      t1 = other.status == _this.status;
                                      t1 = t1 || t1;
                                    }
                                }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
      } else
        t1 = true;
      return t1;
    },
    get$hashCode(_) {
      var _this = this;
      return B.Object_hash(B.getRuntimeTypeOfDartObject(_this), _this.id, _this.authorId, _this.replyToMessageId, _this.createdAt, _this.deletedAt, _this.failedAt, _this.sentAt, _this.deliveredAt, _this.seenAt, _this.updatedAt, G.DeepCollectionEquality_false.hash$1(0, _this._reactions), _this.pinned, G.DeepCollectionEquality_false.hash$1(0, _this._metadata), _this.status, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue);
    },
    toString$0(_) {
      var _this = this;
      return "Message.custom(id: " + _this.id + ", authorId: " + _this.authorId + ", replyToMessageId: " + B.S(_this.replyToMessageId) + ", createdAt: " + B.S(_this.createdAt) + ", deletedAt: " + B.S(_this.deletedAt) + ", failedAt: " + B.S(_this.failedAt) + ", sentAt: " + B.S(_this.sentAt) + ", deliveredAt: " + B.S(_this.deliveredAt) + ", seenAt: " + B.S(_this.seenAt) + ", updatedAt: " + B.S(_this.updatedAt) + ", reactions: " + B.S(_this.get$reactions()) + ", pinned: " + B.S(_this.pinned) + ", metadata: " + B.S(_this.get$metadata(0)) + ", status: " + B.S(_this.status) + ")";
    },
    get$id(receiver) {
      return this.id;
    },
    get$authorId() {
      return this.authorId;
    },
    get$replyToMessageId() {
      return this.replyToMessageId;
    },
    get$createdAt() {
      return this.createdAt;
    },
    get$deletedAt() {
      return this.deletedAt;
    },
    get$failedAt() {
      return this.failedAt;
    },
    get$sentAt() {
      return this.sentAt;
    },
    get$deliveredAt() {
      return this.deliveredAt;
    },
    get$seenAt() {
      return this.seenAt;
    },
    get$updatedAt() {
      return this.updatedAt;
    },
    get$pinned() {
      return this.pinned;
    },
    get$status(receiver) {
      return this.status;
    }
  };
  A._Message_Object__$Message.prototype = {};
  A.EqualUnmodifiableMapView.prototype = {
    $eq(_, other) {
      if (other == null)
        return false;
      return this.$ti._is(other) && B.getRuntimeTypeOfDartObject(other) === B.getRuntimeTypeOfDartObject(this) && J.$eq$(other._freezed_annotation$_source, this._freezed_annotation$_source);
    },
    get$hashCode(_) {
      return B.Object_hash(B.getRuntimeTypeOfDartObject(this), this._freezed_annotation$_source, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue);
    }
  };
  A.Freezed.prototype = {
    toJson$0() {
      return null.call$0();
    },
    map$1$1($receiver, arg0, $T1) {
      return null.call$1$1(arg0, $T1);
    },
    map$1($receiver, arg0) {
      return null.call$1(arg0);
    }
  };
  var typesOffset = hunkHelpers.updateTypes(["double(double)", "int(Object?)", "Size(RenderBox)", "~(Offset,RenderBox)", "0^(0^)<Object?>"]);
  A.RenderWrap_computeDryBaseline_findHighestBaseline.prototype = {
    call$2(offset, child) {
      var t1 = this._box_0;
      t1.baselineOffset = F.BaselineOffset_minOf(t1.baselineOffset, F.BaselineOffset__(child.getDryBaseline$2(this.childConstraints, this.baseline), offset._dy));
    },
    $signature: 390
  };
  A.RenderWrap_computeDryBaseline_getChildSize.prototype = {
    call$1(child) {
      return child._computeIntrinsics$2$3(C.C__DryLayout, this.childConstraints, child.get$_computeDryLayout(), type$.BoxConstraints, type$.Size);
    },
    $signature: 391
  };
  (function installTearOffs() {
    var _static_1 = hunkHelpers._static_1,
      _static_2 = hunkHelpers._static_2,
      _instance_1_u = hunkHelpers._instance_1u,
      _static = hunkHelpers.installStaticTearOff;
    _static_1(A, "wrap_RenderWrap__getChildSize$closure", "RenderWrap__getChildSize", 2);
    _static_2(A, "wrap_RenderWrap__setChildPosition$closure", "RenderWrap__setChildPosition", 3);
    var _;
    _instance_1_u(_ = A.RenderWrap.prototype, "get$computeMinIntrinsicWidth", "computeMinIntrinsicWidth$1", 0);
    _instance_1_u(_, "get$computeMaxIntrinsicWidth", "computeMaxIntrinsicWidth$1", 0);
    _instance_1_u(_, "get$computeMinIntrinsicHeight", "computeMinIntrinsicHeight$1", 0);
    _instance_1_u(_, "get$computeMaxIntrinsicHeight", "computeMaxIntrinsicHeight$1", 0);
    _instance_1_u(A.EpochDateTimeConverter.prototype, "get$toJson", "toJson$1", 1);
    _static(A, "message___$identity$closure", 1, null, ["call$1$1", "call$1"], ["_$identity", function(value) {
      return A._$identity(value, type$.dynamic);
    }], 4, 1);
  })();
  (function inheritance() {
    var _mixinHard = hunkHelpers.mixinHard,
      _mixin = hunkHelpers.mixin,
      _inheritMany = hunkHelpers.inheritMany,
      _inherit = hunkHelpers.inherit;
    _inheritMany(B.Object, [A.SliverGridGeometry, A.SliverGridLayout, A.SliverGridDelegate, A._RunMetrics, A.EpochDateTimeConverter, A._Message_Object__$Message, A._$Message, A.Freezed]);
    _inherit(A.SliverGridRegularTileLayout, A.SliverGridLayout);
    _inherit(A.SliverGridDelegateWithFixedCrossAxisCount, A.SliverGridDelegate);
    _inherit(A.SliverGridParentData, H.SliverMultiBoxAdaptorParentData);
    _inherit(A.RenderSliverGrid, H.RenderSliverMultiBoxAdaptor);
    _inheritMany(B._Enum, [A.WrapAlignment, A.WrapCrossAlignment]);
    _inherit(A.WrapParentData, F.ContainerBoxParentData);
    _inherit(A._RenderWrap_RenderBox_ContainerRenderObjectMixin, B.RenderBox);
    _inherit(A._RenderWrap_RenderBox_ContainerRenderObjectMixin_RenderBoxContainerDefaultsMixin, A._RenderWrap_RenderBox_ContainerRenderObjectMixin);
    _inherit(A.RenderWrap, A._RenderWrap_RenderBox_ContainerRenderObjectMixin_RenderBoxContainerDefaultsMixin);
    _inherit(A.RenderWrap_computeDryBaseline_findHighestBaseline, B.Closure2Args);
    _inherit(A.RenderWrap_computeDryBaseline_getChildSize, B.Closure);
    _inherit(A.Wrap, F.MultiChildRenderObjectWidget);
    _inherit(A.NeverScrollableScrollPhysics, I.ScrollPhysics);
    _inherit(A.GridView, M.BoxScrollView);
    _inherit(A.SliverGrid, H.SliverMultiBoxAdaptorWidget);
    _inherit(A.Message, A._Message_Object__$Message);
    _inherit(A.CustomMessage, A.Message);
    _inherit(A.EqualUnmodifiableMapView, B.UnmodifiableMapView);
    _mixinHard(A._RenderWrap_RenderBox_ContainerRenderObjectMixin, F.ContainerRenderObjectMixin);
    _mixin(A._RenderWrap_RenderBox_ContainerRenderObjectMixin_RenderBoxContainerDefaultsMixin, F.RenderBoxContainerDefaultsMixin);
    _mixin(A._Message_Object__$Message, A._$Message);
  })();
  B._Universe_addRules(init.typeUniverse, JSON.parse('{"SliverGridDelegateWithFixedCrossAxisCount":{"SliverGridDelegate":[]},"SliverGridParentData":{"SliverMultiBoxAdaptorParentData":[],"SliverLogicalParentData":[],"ContainerParentDataMixin":["RenderBox"],"KeepAliveParentDataMixin":[],"ParentData":[],"ContainerParentDataMixin.0":"RenderBox"},"RenderSliverGrid":{"RenderSliverMultiBoxAdaptor":[],"RenderSliver":[],"ContainerRenderObjectMixin":["RenderBox","SliverMultiBoxAdaptorParentData"],"RenderObject":[],"DiagnosticableTree":[],"HitTestTarget":[],"ContainerRenderObjectMixin.1":"SliverMultiBoxAdaptorParentData","ContainerRenderObjectMixin.0":"RenderBox"},"WrapParentData":{"BoxParentData":[],"ContainerParentDataMixin":["RenderBox"],"ParentData":[],"ContainerParentDataMixin.0":"RenderBox"},"WrapAlignment":{"Enum":[]},"WrapCrossAlignment":{"Enum":[]},"RenderWrap":{"RenderBoxContainerDefaultsMixin":["RenderBox","WrapParentData"],"RenderBox":[],"ContainerRenderObjectMixin":["RenderBox","WrapParentData"],"RenderObject":[],"DiagnosticableTree":[],"HitTestTarget":[],"ContainerRenderObjectMixin.1":"WrapParentData","ContainerRenderObjectMixin.0":"RenderBox","RenderBoxContainerDefaultsMixin.1":"WrapParentData"},"Wrap":{"MultiChildRenderObjectWidget":[],"RenderObjectWidget":[],"Widget":[],"DiagnosticableTree":[]},"NeverScrollableScrollPhysics":{"ScrollPhysics":[]},"GridView":{"StatelessWidget":[],"Widget":[],"DiagnosticableTree":[]},"SliverGrid":{"SliverMultiBoxAdaptorWidget":[],"RenderObjectWidget":[],"Widget":[],"DiagnosticableTree":[]},"CustomMessage":{"Message":[]},"EqualUnmodifiableMapView":{"UnmodifiableMapView":["1","2"],"_UnmodifiableMapView_MapView__UnmodifiableMapMixin":["1","2"],"MapView":["1","2"],"_UnmodifiableMapMixin":["1","2"],"Map":["1","2"],"_UnmodifiableMapMixin.K":"1","_UnmodifiableMapMixin.V":"2"}}'));
  var type$ = (function rtii() {
    var findType = B.findType;
    return {
      BoxConstraints: findType("BoxConstraints"),
      ClipRectLayer: findType("ClipRectLayer"),
      ContainerLayer: findType("ContainerLayer0"),
      DateTime: findType("DateTime"),
      EqualUnmodifiableMapView_String_dynamic: findType("EqualUnmodifiableMapView<String,@>"),
      EqualUnmodifiableMapView_of_String_and_List_String: findType("EqualUnmodifiableMapView<String,List<String>>"),
      JSArray_String: findType("JSArray<String>"),
      JSArray__RunMetrics: findType("JSArray<_RunMetrics>"),
      List__RunMetrics: findType("List<_RunMetrics>"),
      Object: findType("Object"),
      RenderBox: findType("RenderBox"),
      RenderSliverGrid: findType("RenderSliverGrid"),
      RenderWrap: findType("RenderWrap"),
      Size: findType("Size"),
      Size_Function_RenderBox: findType("Size(RenderBox)"),
      Size_Function_RenderBox_BoxConstraints: findType("Size(RenderBox,BoxConstraints)"),
      SliverConstraints: findType("SliverConstraints"),
      SliverGridDelegateWithFixedCrossAxisCount: findType("SliverGridDelegateWithFixedCrossAxisCount"),
      SliverGridParentData: findType("SliverGridParentData"),
      SliverMultiBoxAdaptorElement: findType("SliverMultiBoxAdaptorElement"),
      SliverMultiBoxAdaptorParentData: findType("SliverMultiBoxAdaptorParentData"),
      String: findType("String"),
      TextBaseline: findType("TextBaseline"),
      WrapParentData: findType("WrapParentData"),
      _CachedLayoutCalculation_double_double: findType("_CachedLayoutCalculation<double,double>"),
      double: findType("double"),
      double_Function_double: findType("double(double)"),
      dynamic: findType("@"),
      int: findType("int"),
      void_Function_Offset_RenderBox: findType("~(Offset,RenderBox)")
    };
  })();
  (function constants() {
    D.C_EpochDateTimeConverter = new A.EpochDateTimeConverter();
    D.C_Freezed = new A.Freezed();
    D.Color_p2H = new B.Color(1, 0.9529411764705882, 0.9529411764705882, 0.9529411764705882, C.ColorSpace_0);
    D.Map_f1RYh = new B.GeneralConstantMap([E.MessageStatus_0, "delivered", E.MessageStatus_1, "error", E.MessageStatus_2, "seen", E.MessageStatus_3, "sending", E.MessageStatus_4, "sent"], B.findType("GeneralConstantMap<MessageStatus,String>"));
    D.NeverScrollableScrollPhysics_null = new A.NeverScrollableScrollPhysics(null);
    D.WrapAlignment_0 = new A.WrapAlignment(0, "start");
    D.WrapAlignment_1 = new A.WrapAlignment(1, "end");
    D.WrapAlignment_2 = new A.WrapAlignment(2, "center");
    D.WrapAlignment_3 = new A.WrapAlignment(3, "spaceBetween");
    D.WrapAlignment_4 = new A.WrapAlignment(4, "spaceAround");
    D.WrapAlignment_5 = new A.WrapAlignment(5, "spaceEvenly");
    D.WrapCrossAlignment_0 = new A.WrapCrossAlignment(0, "start");
    D.WrapCrossAlignment_1 = new A.WrapCrossAlignment(1, "end");
    D.WrapCrossAlignment_2 = new A.WrapCrossAlignment(2, "center");
  })();
};
;
((d, h) => {
  d[h] = d.current;
  d.eventLog.push({p: "main.dart.js_206", e: "endPart", h: h});
})($__dart_deferred_initializers__, "18LL4hs+KvMkHf2BzwaXj/EbTew=");
;
//# sourceMappingURL=main.dart.js_206.part.js.map
