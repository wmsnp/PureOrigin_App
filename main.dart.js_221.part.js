// Generated by dart2js (NullSafetyMode.sound, csp, intern-composite-values), the Dart to JavaScript compiler version: 3.7.2.
((s, d, e) => {
  s[d] = s[d] || {};
  s[d][e] = s[d][e] || [];
  s[d][e].push({p: "main.dart.js_221", e: "beginPart"});
})(self, "$__dart_deferred_initializers__", "eventLog");
$__dart_deferred_initializers__.current = function(hunkHelpers, init, holdersList, $) {
  var J, B, D, X, S, I, Y, Z, P, A_, A0, A1, A2, A3, A4, A5,
  A = {
    DataPage$() {
      return new A.DataPage(null);
    },
    DataPage: function DataPage(t0) {
      this.key = t0;
    },
    _DataPageState: function _DataPageState(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _._types = t0;
      _._typeLabels = t1;
      _._data_page$_records = t2;
      _._loading = false;
      _._hasMore = true;
      _._data_page$_skip = 0;
      _.___DataPageState__filterType_AI = $;
      _._searchKeyword = "";
      _.___DataPageState_hdm_FI = $;
      _._sC = t3;
      _.___DataPageState__tC_FI = $;
      _.TickerProviderStateMixin__tickers = t4;
      _.TickerProviderStateMixin__tickerModeNotifier = t5;
      _._framework$_element = _._widget = null;
    },
    _DataPageState_initState_closure: function _DataPageState_initState_closure(t0) {
      this.$this = t0;
    },
    _DataPageState_initState_closure0: function _DataPageState_initState_closure0(t0) {
      this.$this = t0;
    },
    _DataPageState_initState__closure: function _DataPageState_initState__closure(t0) {
      this.$this = t0;
    },
    _DataPageState__loadMore_closure: function _DataPageState__loadMore_closure(t0) {
      this.$this = t0;
    },
    _DataPageState__loadMore_closure0: function _DataPageState__loadMore_closure0(t0) {
      this.$this = t0;
    },
    _DataPageState__loadMore_closure1: function _DataPageState__loadMore_closure1(t0) {
      this.$this = t0;
    },
    _DataPageState__refresh_closure: function _DataPageState__refresh_closure(t0) {
      this.$this = t0;
    },
    _DataPageState__refreshRecord_closure: function _DataPageState__refreshRecord_closure(t0, t1, t2) {
      this.$this = t0;
      this.record = t1;
      this.newData = t2;
    },
    _DataPageState__refreshRecord__closure: function _DataPageState__refreshRecord__closure(t0) {
      this.record = t0;
    },
    _DataPageState__buildRecordRow_closure: function _DataPageState__buildRecordRow_closure() {
    },
    _DataPageState__buildRecordRow_closure0: function _DataPageState__buildRecordRow_closure0() {
    },
    _DataPageState__buildRecordRow_closure1: function _DataPageState__buildRecordRow_closure1(t0, t1) {
      this.$this = t0;
      this.record = t1;
    },
    _DataPageState__buildRecordRow__closure: function _DataPageState__buildRecordRow__closure(t0, t1) {
      this.$this = t0;
      this.record = t1;
    },
    _DataPageState__buildRecordRow___closure: function _DataPageState__buildRecordRow___closure(t0, t1) {
      this.$this = t0;
      this.record = t1;
    },
    _DataPageState_build_closure: function _DataPageState_build_closure() {
    },
    _DataPageState_build_closure0: function _DataPageState_build_closure0(t0) {
      this.$this = t0;
    },
    _DataPageState_build_closure1: function _DataPageState_build_closure1(t0) {
      this.$this = t0;
    },
    __DataPageState_State_TickerProviderStateMixin: function __DataPageState_State_TickerProviderStateMixin() {
    },
    _RefreshProgressIndicatorPainter: function _RefreshProgressIndicatorPainter(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15) {
      var _ = this;
      _.arrowheadScale = t0;
      _.trackColor = t1;
      _.valueColor = t2;
      _.value = t3;
      _.headValue = t4;
      _.tailValue = t5;
      _.offsetValue = t6;
      _.rotationValue = t7;
      _.strokeWidth = t8;
      _.strokeAlign = t9;
      _.arcStart = t10;
      _.arcSweep = t11;
      _.strokeCap = t12;
      _.trackGap = t13;
      _.year2023 = t14;
      _._repaint = t15;
    },
    RefreshProgressIndicator: function RefreshProgressIndicator(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10) {
      var _ = this;
      _.elevation = t0;
      _.strokeWidth = t1;
      _.strokeAlign = t2;
      _.strokeCap = t3;
      _.value = t4;
      _.backgroundColor = t5;
      _.color = t6;
      _.valueColor = t7;
      _.semanticsLabel = t8;
      _.semanticsValue = t9;
      _.key = t10;
    },
    _RefreshProgressIndicatorState: function _RefreshProgressIndicatorState(t0, t1) {
      var _ = this;
      _.___RefreshProgressIndicatorState__additionalRotationTween_FI = _.___RefreshProgressIndicatorState__convertTween_FI = $;
      _._progress_indicator$_lastValue = null;
      _.___CircularProgressIndicatorState__controller_A = $;
      _.SingleTickerProviderStateMixin__ticker = t0;
      _.SingleTickerProviderStateMixin__tickerModeNotifier = t1;
      _._framework$_element = _._widget = null;
    },
    _RefreshProgressIndicatorState__buildAnimation_closure: function _RefreshProgressIndicatorState__buildAnimation_closure(t0) {
      this.$this = t0;
    },
    RefreshIndicatorStatus: function RefreshIndicatorStatus(t0, t1) {
      this.index = t0;
      this._name = t1;
    },
    RefreshIndicatorTriggerMode: function RefreshIndicatorTriggerMode(t0, t1) {
      this.index = t0;
      this._name = t1;
    },
    _IndicatorType: function _IndicatorType(t0, t1) {
      this.index = t0;
      this._name = t1;
    },
    RefreshIndicator: function RefreshIndicator(t0, t1, t2) {
      this.child = t0;
      this.onRefresh = t1;
      this.key = t2;
    },
    RefreshIndicatorState: function RefreshIndicatorState(t0, t1) {
      var _ = this;
      _.__RefreshIndicatorState__valueColor_A = _.__RefreshIndicatorState__value_A = _.__RefreshIndicatorState__scaleFactor_A = _.__RefreshIndicatorState__positionFactor_A = _.__RefreshIndicatorState__scaleController_A = _.__RefreshIndicatorState__positionController_A = $;
      _._dragOffset = _._isIndicatorAtTop = _._refresh_indicator$_status = null;
      _.__RefreshIndicatorState__effectiveValueColor_AI = $;
      _.TickerProviderStateMixin__tickers = t0;
      _.TickerProviderStateMixin__tickerModeNotifier = t1;
      _._framework$_element = _._widget = null;
    },
    RefreshIndicatorState__handleScrollNotification_closure: function RefreshIndicatorState__handleScrollNotification_closure(t0) {
      this.$this = t0;
    },
    RefreshIndicatorState__dismiss_closure: function RefreshIndicatorState__dismiss_closure(t0, t1) {
      this.$this = t0;
      this.newMode = t1;
    },
    RefreshIndicatorState__dismiss_closure0: function RefreshIndicatorState__dismiss_closure0(t0) {
      this.$this = t0;
    },
    RefreshIndicatorState__show_closure: function RefreshIndicatorState__show_closure(t0, t1) {
      this.$this = t0;
      this.completer = t1;
    },
    RefreshIndicatorState__show__closure: function RefreshIndicatorState__show__closure(t0) {
      this.$this = t0;
    },
    RefreshIndicatorState__show__closure0: function RefreshIndicatorState__show__closure0(t0, t1) {
      this.$this = t0;
      this.completer = t1;
    },
    RefreshIndicatorState_build_closure: function RefreshIndicatorState_build_closure(t0, t1) {
      this.$this = t0;
      this.showIndeterminateIndicator = t1;
    },
    _RefreshIndicatorState_State_TickerProviderStateMixin: function _RefreshIndicatorState_State_TickerProviderStateMixin() {
    },
    TabController: function TabController(t0, t1, t2, t3) {
      var _ = this;
      _._animationController = t0;
      _._animationDuration = t1;
      _.length = t2;
      _.ChangeNotifier__count = _._indexIsChangingCount = _._previousIndex = _._tab_controller$_index = 0;
      _.ChangeNotifier__listeners = t3;
      _.ChangeNotifier__reentrantlyRemovedListeners = _.ChangeNotifier__notificationCallStackDepth = 0;
    },
    TabController__changeIndex_closure: function TabController__changeIndex_closure(t0) {
      this.$this = t0;
    },
    UnderlineTabIndicator: function UnderlineTabIndicator(t0, t1, t2) {
      this.borderRadius = t0;
      this.borderSide = t1;
      this.insets = t2;
    },
    _UnderlinePainter: function _UnderlinePainter(t0, t1, t2) {
      this.decoration = t0;
      this.borderRadius = t1;
      this.onChanged = t2;
    },
    _TabStyle$(animation, child, defaults, isPrimary, isSelected, labelColor, labelStyle, unselectedLabelColor, unselectedLabelStyle) {
      return new A._TabStyle(labelStyle, unselectedLabelStyle, isSelected, labelColor, unselectedLabelColor, defaults, child, animation, null);
    },
    _TabLabelBarRenderer$(crossAxisAlignment, direction, mainAxisAlignment, mainAxisSize, onPerformLayout, textDirection, verticalDirection) {
      var i, _null = null,
        t1 = B.LayerHandle$(type$.ClipRectLayer),
        _list = J.JSArray_JSArray$allocateFixed(4, type$.TextPainter);
      for (i = 0; i < 4; ++i)
        _list[i] = new E.TextPainter(_null, D.TextAlign_4, D.TextDirection_1, D._LinearTextScaler_1.$eq(0, D._LinearTextScaler_1) ? new B._LinearTextScaler(1) : D._LinearTextScaler_1, _null, _null, _null, _null, G.TextWidthBasis_0, _null);
      t1 = new A._TabLabelBarRenderer(onPerformLayout, direction, mainAxisAlignment, mainAxisSize, crossAxisAlignment, textDirection, verticalDirection, _null, D.Clip_0, 0, t1, _list, true, 0, _null, _null, new B._LayoutCacheStorage(), B.LayerHandle$(type$.ContainerLayer));
      t1.RenderObject$0();
      t1.addAll$1(0, _null);
      return t1;
    },
    _indexChangeProgress(controller) {
      var previousIndex, currentIndex,
        t1 = controller.get$animation(0).__AnimationController__value_A;
      t1 === $ && B.throwLateFieldNI("_value");
      previousIndex = controller._previousIndex;
      currentIndex = controller._tab_controller$_index;
      if (controller._indexIsChangingCount === 0)
        return B.clampDouble(Math.abs(currentIndex - t1), 0, 1);
      return Math.abs(t1 - currentIndex) / Math.abs(currentIndex - previousIndex);
    },
    _TabsPrimaryDefaultsM3_indicatorWeight(indicatorSize) {
      var t1;
      switch (indicatorSize.index) {
        case 1:
          t1 = 3;
          break;
        case 0:
          t1 = 2;
          break;
        default:
          t1 = null;
      }
      return t1;
    },
    TabAlignment: function TabAlignment(t0, t1) {
      this.index = t0;
      this._name = t1;
    },
    TabIndicatorAnimation: function TabIndicatorAnimation(t0, t1) {
      this.index = t0;
      this._name = t1;
    },
    Tab: function Tab(t0, t1) {
      this.text = t0;
      this.key = t1;
    },
    _TabStyle: function _TabStyle(t0, t1, t2, t3, t4, t5, t6, t7, t8) {
      var _ = this;
      _.labelStyle = t0;
      _.unselectedLabelStyle = t1;
      _.isSelected = t2;
      _.labelColor = t3;
      _.unselectedLabelColor = t4;
      _.defaults = t5;
      _.child = t6;
      _.listenable = t7;
      _.key = t8;
    },
    _TabStyle__resolveWithLabelColor_closure: function _TabStyle__resolveWithLabelColor_closure(t0, t1) {
      this._box_0 = t0;
      this.animation = t1;
    },
    _TabLabelBarRenderer: function _TabLabelBarRenderer(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17) {
      var _ = this;
      _.onPerformLayout = t0;
      _._flex$_direction = t1;
      _._mainAxisAlignment = t2;
      _._mainAxisSize = t3;
      _._crossAxisAlignment = t4;
      _._flex$_textDirection = t5;
      _._verticalDirection = t6;
      _._textBaseline = t7;
      _._flex$_overflow = 0;
      _._flex$_clipBehavior = t8;
      _._spacing = t9;
      _._flex$_clipRectLayer = t10;
      _.DebugOverflowIndicatorMixin__indicatorLabel = t11;
      _.DebugOverflowIndicatorMixin__overflowReportNeeded = t12;
      _.ContainerRenderObjectMixin__childCount = t13;
      _.ContainerRenderObjectMixin__firstChild = t14;
      _.ContainerRenderObjectMixin__lastChild = t15;
      _._layoutCacheStorage = t16;
      _.parentData = _._box$_size = null;
      _._depth = 0;
      _._object$_owner = _._object$_parent = null;
      _._needsLayout = true;
      _._relayoutBoundary = null;
      _._doingThisLayoutWithCallback = false;
      _._constraints = null;
      _.__RenderObject__wasRepaintBoundary_A = $;
      _._layerHandle = t17;
      _._needsCompositingBitsUpdate = false;
      _.__RenderObject__needsCompositing_A = $;
      _._needsPaint = true;
      _._needsCompositedLayerUpdate = false;
      _._cachedSemanticsConfiguration = null;
      _._needsSemanticsUpdate = true;
      _._semantics = null;
    },
    _TabLabelBar: function _TabLabelBar(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10) {
      var _ = this;
      _.onPerformLayout = t0;
      _.direction = t1;
      _.mainAxisAlignment = t2;
      _.mainAxisSize = t3;
      _.crossAxisAlignment = t4;
      _.textDirection = t5;
      _.verticalDirection = t6;
      _.textBaseline = t7;
      _.spacing = t8;
      _.children = t9;
      _.key = t10;
    },
    _DividerPainter: function _DividerPainter(t0, t1, t2) {
      this.dividerColor = t0;
      this.dividerHeight = t1;
      this._repaint = t2;
    },
    _IndicatorPainter: function _IndicatorPainter(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12) {
      var _ = this;
      _.controller = t0;
      _.indicator = t1;
      _.indicatorSize = t2;
      _.indicatorPadding = t3;
      _.tabKeys = t4;
      _.labelPaddings = t5;
      _.dividerColor = t6;
      _.dividerHeight = t7;
      _.showDivider = t8;
      _.devicePixelRatio = t9;
      _.indicatorAnimation = t10;
      _.textDirection = t11;
      _._tabs$_painter = _._currentRect = _._currentTextDirection = _._currentTabOffsets = null;
      _._tabs$_needsPaint = false;
      _._repaint = t12;
    },
    _ChangeAnimation: function _ChangeAnimation(t0) {
      this.controller = t0;
    },
    _DragAnimation: function _DragAnimation(t0, t1) {
      this.controller = t0;
      this.index = t1;
    },
    _TabBarScrollPosition: function _TabBarScrollPosition(t0, t1, t2, t3, t4, t5, t6, t7) {
      var _ = this;
      _.tabBar = t0;
      _._viewportDimensionWasNonZero = false;
      _._needsPixelsCorrection = true;
      _._heldPreviousVelocity = 0;
      _._userScrollDirection = t1;
      _._currentDrag = null;
      _.physics = t2;
      _.context = t3;
      _.keepScrollOffset = t4;
      _.debugLabel = t5;
      _._maxScrollExtent = _._minScrollExtent = null;
      _._impliedVelocity = 0;
      _._viewportDimension = _._pixels = null;
      _._haveDimensions = false;
      _._didChangeViewportDimensionOrReceiveCorrection = true;
      _._pendingDimensions = false;
      _._scroll_position$_lastMetrics = null;
      _._haveScheduledUpdateNotification = false;
      _._semanticActions = _._lastAxis = null;
      _.isScrollingNotifier = t6;
      _._activity = null;
      _.ChangeNotifier__count = 0;
      _.ChangeNotifier__listeners = t7;
      _.ChangeNotifier__reentrantlyRemovedListeners = _.ChangeNotifier__notificationCallStackDepth = 0;
    },
    _TabBarScrollController: function _TabBarScrollController(t0, t1, t2, t3, t4) {
      var _ = this;
      _.tabBar = t0;
      _.onAttach = t1;
      _.onDetach = t2;
      _._positions = t3;
      _.ChangeNotifier__count = 0;
      _.ChangeNotifier__listeners = t4;
      _.ChangeNotifier__reentrantlyRemovedListeners = _.ChangeNotifier__notificationCallStackDepth = 0;
    },
    TabBar: function TabBar(t0, t1, t2, t3) {
      var _ = this;
      _.tabs = t0;
      _.controller = t1;
      _.isScrollable = t2;
      _.key = t3;
    },
    _TabBarState: function _TabBarState() {
      var _ = this;
      _._currentIndex = _._indicatorPainter = _._tabs$_controller = _._tabs$_scrollController = null;
      _.___TabBarState__labelPaddings_A = _.___TabBarState__tabKeys_A = _.___TabBarState__tabStripWidth_A = $;
      _._framework$_element = _._widget = null;
    },
    _TabBarState_initState_closure: function _TabBarState_initState_closure() {
    },
    _TabBarState__handleTabControllerTick_closure: function _TabBarState__handleTabControllerTick_closure() {
    },
    _TabBarState_build_closure: function _TabBarState_build_closure(t0, t1) {
      this.$this = t0;
      this.tabBarTheme = t1;
    },
    _TabBarState_build_closure0: function _TabBarState_build_closure0(t0, t1) {
      this.$this = t0;
      this.selectedState = t1;
    },
    _TabBarState_build_closure1: function _TabBarState_build_closure1(t0, t1) {
      this.$this = t0;
      this.index = t1;
    },
    _TabsPrimaryDefaultsM3: function _TabsPrimaryDefaultsM3(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18) {
      var _ = this;
      _.context = t0;
      _.___TabsPrimaryDefaultsM3__textTheme_FI = _.___TabsPrimaryDefaultsM3__colors_FI = $;
      _.isScrollable = t1;
      _.indicator = t2;
      _.indicatorColor = t3;
      _.indicatorSize = t4;
      _.dividerColor = t5;
      _.dividerHeight = t6;
      _.labelColor = t7;
      _.labelPadding = t8;
      _.labelStyle = t9;
      _.unselectedLabelColor = t10;
      _.unselectedLabelStyle = t11;
      _.overlayColor = t12;
      _.splashFactory = t13;
      _.mouseCursor = t14;
      _.tabAlignment = t15;
      _.textScaler = t16;
      _.indicatorAnimation = t17;
      _.splashBorderRadius = t18;
    },
    _TabsPrimaryDefaultsM3_overlayColor_closure: function _TabsPrimaryDefaultsM3_overlayColor_closure(t0) {
      this.$this = t0;
    },
    __ChangeAnimation_Animation_AnimationWithParentMixin: function __ChangeAnimation_Animation_AnimationWithParentMixin() {
    },
    __DragAnimation_Animation_AnimationWithParentMixin: function __DragAnimation_Animation_AnimationWithParentMixin() {
    },
    TabBarTheme_of(context) {
      var t1;
      context.dependOnInheritedWidgetOfExactType$1$0(type$.TabBarTheme);
      t1 = F.Theme_of(context);
      return t1.tabBarTheme;
    }
  },
  C, A6, A7, M, A8, A9, N, Aa, T, Ab, Ac, L, Ad, Ae, F, H, Af, Ag, Ah, E, Ai, Q, U, K, V, O, G, W, R, Aj;
  J = holdersList[1];
  B = holdersList[0];
  D = holdersList[2];
  X = holdersList[124];
  S = holdersList[71];
  I = holdersList[110];
  Y = holdersList[88];
  Z = holdersList[105];
  P = holdersList[132];
  A_ = holdersList[54];
  A0 = holdersList[53];
  A1 = holdersList[26];
  A2 = holdersList[52];
  A3 = holdersList[19];
  A4 = holdersList[35];
  A5 = holdersList[21];
  A = hunkHelpers.updateHolder(holdersList[9], A);
  C = holdersList[192];
  A6 = holdersList[17];
  A7 = holdersList[120];
  M = holdersList[149];
  A8 = holdersList[86];
  A9 = holdersList[92];
  N = holdersList[130];
  Aa = holdersList[122];
  T = holdersList[141];
  Ab = holdersList[194];
  Ac = holdersList[101];
  L = holdersList[123];
  Ad = holdersList[187];
  Ae = holdersList[144];
  F = holdersList[135];
  H = holdersList[145];
  Af = holdersList[114];
  Ag = holdersList[191];
  Ah = holdersList[97];
  E = holdersList[136];
  Ai = holdersList[77];
  Q = holdersList[91];
  U = holdersList[83];
  K = holdersList[126];
  V = holdersList[169];
  O = holdersList[117];
  G = holdersList[137];
  W = holdersList[106];
  R = holdersList[193];
  Aj = holdersList[98];
  A.DataPage.prototype = {
    createState$0() {
      var _null = null,
        t1 = type$.JSArray_String;
      return new A._DataPageState(B._setArrayType(["diet", "exercise", "sleep"], t1), B._setArrayType(["\u996e\u98df", "\u8fd0\u52a8", "\u7761\u7720"], t1), B._setArrayType([], type$.JSArray_Map_String_dynamic), K.ScrollController$(_null, _null), _null, _null);
    }
  };
  A._DataPageState.prototype = {
    get$hdm() {
      var t1, result, _this = this,
        value = _this.___DataPageState_hdm_FI;
      if (value === $) {
        t1 = _this._framework$_element;
        t1.toString;
        result = X.Provider_of(t1, false, type$.HealthDataManager);
        _this.___DataPageState_hdm_FI !== $ && B.throwLateFieldADI("hdm");
        _this.___DataPageState_hdm_FI = result;
        value = result;
      }
      return value;
    },
    get$_tC() {
      var t1, t2, _this = this,
        value = _this.___DataPageState__tC_FI;
      if (value === $) {
        t1 = K.AnimationController$unbounded(null, 0, _this);
        t2 = $.$get$ChangeNotifier__emptyListeners();
        _this.___DataPageState__tC_FI !== $ && B.throwLateFieldADI("_tC");
        value = _this.___DataPageState__tC_FI = new A.TabController(t1, D.Duration_300000, 3, t2);
      }
      return value;
    },
    initState$0() {
      var _this = this;
      _this.super$State$initState();
      _this._loadMore$0();
      _this._sC.addListener$1(0, new A._DataPageState_initState_closure(_this));
      _this.get$_tC().addListener$1(0, new A._DataPageState_initState_closure0(_this));
    },
    _loadMore$0() {
      var $async$goto = 0,
        $async$completer = B._makeAsyncAwaitCompleter(type$.void),
        $async$returnValue, $async$handler = 2, $async$errorStack = [], $async$next = [], $async$self = this, newRecords, filtered, e, t1, value, exception, $async$exception;
      var $async$_loadMore$0 = B._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$errorStack.push($async$result);
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              if (!$async$self._hasMore || $async$self._loading) {
                // goto return
                $async$goto = 1;
                break;
              }
              $async$self.setState$1(new A._DataPageState__loadMore_closure($async$self));
              $async$handler = 4;
              t1 = $async$self.get$hdm();
              value = $async$self.___DataPageState__filterType_AI;
              if (value === $)
                value = $async$self.___DataPageState__filterType_AI = $async$self._types[0];
              $async$goto = 7;
              return B._asyncAwait(t1.getRecords$3$limit$skip(value, 20, $async$self._data_page$_skip), $async$_loadMore$0);
            case 7:
              // returning from await.
              newRecords = $async$result;
              t1 = J.where$1$ax(newRecords, new A._DataPageState__loadMore_closure0($async$self));
              filtered = B.List_List$of(t1, true, t1.$ti._eval$1("Iterable.E"));
              D.JSArray_methods.addAll$1($async$self._data_page$_records, filtered);
              $async$self._data_page$_skip = $async$self._data_page$_skip + J.get$length$asx(newRecords);
              if (J.get$length$asx(newRecords) < 20)
                $async$self._hasMore = false;
              $async$next.push(6);
              // goto finally
              $async$goto = 5;
              break;
            case 4:
              // catch
              $async$handler = 3;
              $async$exception = $async$errorStack.pop();
              e = B.unwrapException($async$exception);
              B.print__debugPrintThrottled$closure().call$1("\u83b7\u53d6\u8bb0\u5f55\u5931\u8d25: " + B.S(e));
              $async$next.push(6);
              // goto finally
              $async$goto = 5;
              break;
            case 3:
              // uncaught
              $async$next = [2];
            case 5:
              // finally
              $async$handler = 2;
              $async$self.setState$1(new A._DataPageState__loadMore_closure1($async$self));
              // goto the next finally handler
              $async$goto = $async$next.pop();
              break;
            case 6:
              // after finally
            case 1:
              // return
              return B._asyncReturn($async$returnValue, $async$completer);
            case 2:
              // rethrow
              return B._asyncRethrow($async$errorStack.at(-1), $async$completer);
          }
      });
      return B._asyncStartSync($async$_loadMore$0, $async$completer);
    },
    _refresh$0() {
      var $async$goto = 0,
        $async$completer = B._makeAsyncAwaitCompleter(type$.void),
        $async$self = this;
      var $async$_refresh$0 = B._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return B._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$self.setState$1(new A._DataPageState__refresh_closure($async$self));
              $async$goto = 2;
              return B._asyncAwait($async$self._loadMore$0(), $async$_refresh$0);
            case 2:
              // returning from await.
              // implicit return
              return B._asyncReturn(null, $async$completer);
          }
      });
      return B._asyncStartSync($async$_refresh$0, $async$completer);
    },
    _refreshRecord$1(record) {
      return this._refreshRecord$body$_DataPageState(type$.Map_String_dynamic._as(record));
    },
    _refreshRecord$body$_DataPageState(record) {
      var $async$goto = 0,
        $async$completer = B._makeAsyncAwaitCompleter(type$.void),
        $async$self = this, t1, newData;
      var $async$_refreshRecord$1 = B._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return B._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = J.getInterceptor$asx(record);
              $async$goto = 2;
              return B._asyncAwait($async$self.get$hdm().getRecord$2(B._asString(t1.$index(record, "_type")), S.DateTime_parse(B._asString(t1.$index(record, "created_at")))._core$_value / 1000), $async$_refreshRecord$1);
            case 2:
              // returning from await.
              newData = $async$result;
              J.$indexSet$ax(newData, "_type", t1.$index(record, "_type"));
              $async$self.setState$1(new A._DataPageState__refreshRecord_closure($async$self, record, newData));
              // implicit return
              return B._asyncReturn(null, $async$completer);
          }
      });
      return B._asyncStartSync($async$_refreshRecord$1, $async$completer);
    },
    _buildRecordRow$1(record) {
      var t1, t2, coreInfo, icon, typeLabel, timeStr, _null = null, _s4_ = "data";
      type$.Map_String_dynamic._as(record);
      t1 = J.getInterceptor$asx(record);
      switch (t1.$index(record, "_type")) {
        case "diet":
          t2 = J.map$1$1$ax(type$.List_dynamic._as(J.$index$asx(t1.$index(record, _s4_), "items")), new A._DataPageState__buildRecordRow_closure(), type$.NutritionItem);
          coreInfo = "\u70ed\u91cf: " + D.JSNumber_methods.toStringAsFixed$1(D.JSArray_methods.fold$1$2(B.List_List$of(t2, true, t2.$ti._eval$1("ListIterable.E")), 0, new A._DataPageState__buildRecordRow_closure0(), type$.double), 0) + " kcal";
          icon = C.IconData_58674_MaterialIcons_null_false;
          typeLabel = "\u996e\u98df";
          break;
        case "exercise":
          t2 = t1.$index(record, _s4_);
          t2 = t2 == null ? _null : J.$index$asx(t2, "summary");
          coreInfo = B._asString(t2 == null ? "" : t2);
          icon = Ag.IconData_57820_MaterialIcons_null_false;
          typeLabel = "\u8fd0\u52a8";
          break;
        case "sleep":
          t2 = t1.$index(record, _s4_);
          t2 = t2 == null ? _null : J.$index$asx(t2, "duration");
          coreInfo = B._asString(t2 == null ? "" : t2);
          icon = C.IconData_57563_MaterialIcons_null_false;
          typeLabel = "\u7761\u7720";
          break;
        default:
          t2 = t1.$index(record, "_type");
          typeLabel = B._asString(t2 == null ? "" : t2);
          icon = C.IconData_58121_MaterialIcons_null_true;
          coreInfo = "";
      }
      t1 = t1.$index(record, "time_spec");
      if (t1 == null)
        timeStr = _null;
      else {
        t1 = J.$index$asx(t1, "start");
        t1 = t1 == null ? _null : D.JSString_methods.substring$2(J.toString$0$(t1), 0, 16);
        timeStr = t1;
      }
      if (timeStr == null)
        timeStr = "";
      t1 = E.Icon$(icon, _null, _null, 28);
      t2 = P.Text$(typeLabel + "  " + timeStr, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null);
      return A5.ListTile$(t1, _null, new A._DataPageState__buildRecordRow_closure1(this, record), P.Text$(coreInfo, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null), t2);
    },
    build$1(context) {
      var _this = this, _null = null,
        t1 = _this.get$_tC(),
        t2 = _this._typeLabels,
        t3 = B._arrayInstanceType(t2),
        t4 = t3._eval$1("MappedListIterable<1,Tab>");
      return Ai.Scaffold$(new A.TabBar(B.List_List$of(new B.MappedListIterable(t2, t3._eval$1("Tab(1)")._as(new A._DataPageState_build_closure()), t4), true, t4._eval$1("ListIterable.E")), t1, true, _null), Ah.StyledList_toColumn(B._setArrayType([A_.StyledWidget_padding(Q.TextField$(true, D.List_empty, false, _null, true, _null, Q.text_field0_TextField__defaultContextMenuBuilder$closure(), _null, _null, _null, C.InputDecoration_dYY, H.DragStartBehavior_1, true, _null, true, _null, false, _null, R.Type_EditableText_O5i, _null, _null, _null, _null, _null, _null, _null, 1, _null, _null, false, "\u2022", _null, new A._DataPageState_build_closure0(_this), _null, _null, _null, false, _null, false, _null, _null, T.EdgeInsets_20_20_20_20, _null, _null, _null, _null, _null, _null, _null, _null, true, D.TextAlign_4, _null, R.TextCapitalization_30, _null, _null, _null), _null, 12, 4), A7.Expanded$(new A.RefreshIndicator(A2.ListView$builder(_null, _this._sC, new A._DataPageState_build_closure1(_this), _this._data_page$_records.length + 1, _null, _null, D.Axis_1, false), _this.get$_refresh(), _null), 1, _null)], type$.JSArray_Widget), H.CrossAxisAlignment_2, H.MainAxisAlignment_0, H.MainAxisSize_1), _null);
    },
    dispose$0() {
      this._sC.dispose$0();
      this.get$_tC().dispose$0();
      this.super$__DataPageState_State_TickerProviderStateMixin$dispose();
    },
    $isTickerProvider: 1
  };
  A.__DataPageState_State_TickerProviderStateMixin.prototype = {
    activate$0() {
      this.super$State$activate();
      this._updateTickerModeNotifier$0();
      this._updateTickers$0();
    },
    dispose$0() {
      var _this = this,
        t1 = _this.TickerProviderStateMixin__tickerModeNotifier;
      if (t1 != null)
        t1.removeListener$1(0, _this.get$_updateTickers());
      _this.set$_tickerModeNotifier(null);
      _this.super$State$dispose();
    }
  };
  A._RefreshProgressIndicatorPainter.prototype = {
    paint$2(canvas, size) {
      var t1, arcEnd, ux, uy, radius, t2, arrowheadRadius, innerRadius, outerRadius, t3, path, paint, _this = this;
      _this.super$_CircularProgressIndicatorPainter$paint(canvas, size);
      t1 = _this.arrowheadScale;
      if (t1 > 0) {
        arcEnd = _this.arcStart + _this.arcSweep;
        ux = Math.cos(arcEnd);
        uy = Math.sin(arcEnd);
        radius = size._dx / 2;
        t2 = _this.strokeWidth;
        arrowheadRadius = t2 * 2 * t1;
        innerRadius = radius - arrowheadRadius;
        outerRadius = radius + arrowheadRadius;
        t3 = $.$get$_renderer();
        path = t3.createPath$0();
        path.moveTo$2(0, radius + ux * innerRadius, radius + uy * innerRadius);
        path.lineTo$2(0, radius + ux * outerRadius, radius + uy * outerRadius);
        path.lineTo$2(0, radius + ux * radius + -uy * t2 * 2 * t1, radius + uy * radius + ux * t2 * 2 * t1);
        path.close$0(0);
        paint = t3.createPaint$0();
        paint.set$color(0, _this.valueColor);
        paint.set$strokeWidth(t2);
        paint.set$style(0, D.PaintingStyle_0);
        canvas.drawPath$2(path, paint);
      }
    }
  };
  A.RefreshProgressIndicator.prototype = {
    get$backgroundColor(_) {
      return I.CircularProgressIndicator.prototype.get$backgroundColor.call(this, 0);
    },
    createState$0() {
      return new A._RefreshProgressIndicatorState(null, null);
    }
  };
  A._RefreshProgressIndicatorState.prototype = {
    get$widget() {
      return type$.RefreshProgressIndicator._as(B.State.prototype.get$widget.call(this));
    },
    build$1(context) {
      var t1, value0, result, _this = this,
        value = type$.RefreshProgressIndicator._as(B.State.prototype.get$widget.call(_this)).value;
      if (value != null) {
        _this._progress_indicator$_lastValue = value;
        t1 = _this.___CircularProgressIndicatorState__controller_A;
        t1 === $ && B.throwLateFieldNI("_controller");
        value0 = _this.___RefreshProgressIndicatorState__convertTween_FI;
        if (value0 === $) {
          result = new F.CurveTween(C.Interval_uxr);
          value0 !== $ && B.throwLateFieldADI("_convertTween");
          _this.set$___RefreshProgressIndicatorState__convertTween_FI(result);
          value0 = result;
        }
        t1.set$value(0, value0.transform$1(0, value) * 0.000225022502250225);
      }
      return _this._buildAnimation$0();
    },
    _buildAnimation$0() {
      var t1 = this.___CircularProgressIndicatorState__controller_A;
      t1 === $ && B.throwLateFieldNI("_controller");
      return F.AnimatedBuilder$(t1, new A._RefreshProgressIndicatorState__buildAnimation_closure(this), null);
    },
    _buildMaterialIndicator$5(context, headValue, tailValue, offsetValue, rotationValue) {
      var rotation, value0, t3, t4, result, valueColor, opacity, indicatorTheme, backgroundColor, strokeWidth, strokeAlign, strokeCap, _this = this, _null = null,
        t1 = type$.RefreshProgressIndicator,
        value = t1._as(B.State.prototype.get$widget.call(_this)).value,
        t2 = value == null,
        arrowheadScale = t2 ? 0 : C.Interval_uxr.transform$1(0, value);
      if (t2 && _this._progress_indicator$_lastValue == null)
        rotation = 0;
      else {
        value0 = _this.___RefreshProgressIndicatorState__additionalRotationTween_FI;
        if (value0 === $) {
          t3 = type$.Tween_double;
          t4 = type$.TweenSequenceItem_double;
          result = F.TweenSequence$(B._setArrayType([new F.TweenSequenceItem(new E.Tween(-0.1, -0.2, t3), 0.33, t4), new F.TweenSequenceItem(new E.Tween(-0.2, 1.35, t3), 0.6699999999999999, t4)], type$.JSArray_TweenSequenceItem_double), type$.double);
          _this.___RefreshProgressIndicatorState__additionalRotationTween_FI !== $ && B.throwLateFieldADI("_additionalRotationTween");
          _this.set$___RefreshProgressIndicatorState__additionalRotationTween_FI(result);
          value0 = result;
        }
        if (t2) {
          t3 = _this._progress_indicator$_lastValue;
          t3.toString;
        } else
          t3 = value;
        rotation = 3.141592653589793 * value0.transform$1(0, t3);
      }
      valueColor = t1._as(B.State.prototype.get$widget.call(_this))._getValueColor$1(context);
      opacity = valueColor.get$opacity(valueColor);
      valueColor = valueColor.withOpacity$1(1);
      F.Theme_of(context);
      switch (true) {
        case true:
          t2 = I._CircularProgressIndicatorDefaultsM3Year2023$(context, t2);
          break;
        case false:
          t2 = I._CircularProgressIndicatorDefaultsM2$(context, t2);
          break;
        default:
          t2 = _null;
      }
      indicatorTheme = I.ProgressIndicatorTheme_of(context);
      t3 = t1._as(B.State.prototype.get$widget.call(_this));
      I.CircularProgressIndicator.prototype.get$backgroundColor.call(t3, 0);
      backgroundColor = indicatorTheme.refreshBackgroundColor;
      if (backgroundColor == null)
        backgroundColor = F.Theme_of(context).canvasColor;
      t3 = t1._as(B.State.prototype.get$widget.call(_this)).strokeWidth;
      strokeWidth = t3 == null ? indicatorTheme.strokeWidth : t3;
      if (strokeWidth == null)
        strokeWidth = t2.get$strokeWidth();
      t1._as(B.State.prototype.get$widget.call(_this));
      strokeAlign = indicatorTheme.strokeAlign;
      if (strokeAlign == null)
        strokeAlign = t2.get$strokeAlign();
      strokeCap = t1._as(B.State.prototype.get$widget.call(_this)).strokeCap;
      if (strokeCap == null)
        strokeCap = indicatorTheme.strokeCap;
      t2 = t1._as(B.State.prototype.get$widget.call(_this));
      t1._as(B.State.prototype.get$widget.call(_this));
      t3 = t1._as(B.State.prototype.get$widget.call(_this));
      t1._as(B.State.prototype.get$widget.call(_this));
      t1 = tailValue * 3 / 2 * 3.141592653589793;
      t4 = Math.max(headValue * 3 / 2 * 3.141592653589793 - t1, 0.001);
      return t2._buildSemanticsWrapper$2$child$context(new E.Padding(Ad.EdgeInsets_4_4_4_4, W.SizedBox$fromSize(L.Material$(D.Duration_200000, true, _null, new E.Padding(C.EdgeInsets_12_12_12_12, Af.Opacity$(W.Transform$rotate(rotation, F.CustomPaint$(_null, _null, _null, new A._RefreshProgressIndicatorPainter(arrowheadScale, _null, valueColor, _null, headValue, tailValue, offsetValue, rotationValue, strokeWidth, strokeAlign, -1.5707963267948966 + t1 + rotationValue * 3.141592653589793 * 2 + offsetValue * 0.5 * 3.141592653589793, t4, strokeCap, _null, true, _null), D.Size_0_0)), opacity), _null), D.Clip_0, backgroundColor, t3.elevation, _null, _null, _null, _null, _null, Ae.MaterialType_2), C.Size_41_41), _null), context);
    },
    set$___RefreshProgressIndicatorState__convertTween_FI(___RefreshProgressIndicatorState__convertTween_FI) {
      this.___RefreshProgressIndicatorState__convertTween_FI = type$.Animatable_double._as(___RefreshProgressIndicatorState__convertTween_FI);
    },
    set$___RefreshProgressIndicatorState__additionalRotationTween_FI(___RefreshProgressIndicatorState__additionalRotationTween_FI) {
      this.___RefreshProgressIndicatorState__additionalRotationTween_FI = type$.Animatable_double._as(___RefreshProgressIndicatorState__additionalRotationTween_FI);
    }
  };
  A.RefreshIndicatorStatus.prototype = {
    _enumToString$0() {
      return "RefreshIndicatorStatus." + this._name;
    }
  };
  A.RefreshIndicatorTriggerMode.prototype = {
    _enumToString$0() {
      return "RefreshIndicatorTriggerMode." + this._name;
    }
  };
  A._IndicatorType.prototype = {
    _enumToString$0() {
      return "_IndicatorType." + this._name;
    }
  };
  A.RefreshIndicator.prototype = {
    createState$0() {
      return new A.RefreshIndicatorState(null, null);
    },
    onRefresh$0() {
      return this.onRefresh.call$0();
    },
    notificationPredicate$1(arg0) {
      return N.scroll_notification__defaultScrollNotificationPredicate$closure().call$1(arg0);
    }
  };
  A.RefreshIndicatorState.prototype = {
    get$_effectiveValueColor() {
      var t1, _this = this,
        value = _this.__RefreshIndicatorState__effectiveValueColor_AI;
      if (value === $) {
        _this._widget.toString;
        t1 = _this._framework$_element;
        t1.toString;
        t1 = F.Theme_of(t1);
        value = _this.__RefreshIndicatorState__effectiveValueColor_AI = t1.colorScheme.primary;
      }
      return value;
    },
    initState$0() {
      var t1, t2, t3, t4, _this = this, _null = null;
      _this.super$State$initState();
      t1 = E.AnimationController$(_null, _null, _null, _null, _this);
      _this.__RefreshIndicatorState__positionController_A = t1;
      t2 = type$.Animatable_double;
      t3 = t2._as($.$get$RefreshIndicatorState__kDragSizeFactorLimitTween());
      t4 = type$.Animation_double;
      _this.set$__RefreshIndicatorState__positionFactor_A(t4._as(new E._AnimatedEvaluation(t4._as(t4._as(t1)), t3, t3.$ti._eval$1("_AnimatedEvaluation<Animatable.T>"))));
      t3 = _this.__RefreshIndicatorState__positionController_A;
      t1 = t2._as($.$get$RefreshIndicatorState__threeQuarterTween());
      _this.set$__RefreshIndicatorState__value_A(t4._as(new E._AnimatedEvaluation(t4._as(t4._as(t3)), t1, t1.$ti._eval$1("_AnimatedEvaluation<Animatable.T>"))));
      t1 = E.AnimationController$(_null, _null, _null, _null, _this);
      _this.__RefreshIndicatorState__scaleController_A = t1;
      t2 = t2._as($.$get$RefreshIndicatorState__oneToZeroTween());
      _this.set$__RefreshIndicatorState__scaleFactor_A(t4._as(new E._AnimatedEvaluation(t4._as(t4._as(t1)), t2, t2.$ti._eval$1("_AnimatedEvaluation<Animatable.T>"))));
    },
    didChangeDependencies$0() {
      this._setupColorTween$0();
      this.super$State$didChangeDependencies();
    },
    didUpdateWidget$1(oldWidget) {
      this.super$State$didUpdateWidget(type$.RefreshIndicator._as(oldWidget));
      this._widget.toString;
    },
    dispose$0() {
      var t1 = this.__RefreshIndicatorState__positionController_A;
      t1 === $ && B.throwLateFieldNI("_positionController");
      t1.dispose$0();
      t1 = this.__RefreshIndicatorState__scaleController_A;
      t1 === $ && B.throwLateFieldNI("_scaleController");
      t1.dispose$0();
      this.super$_RefreshIndicatorState_State_TickerProviderStateMixin$dispose();
    },
    _setupColorTween$0() {
      var t1, color, t2, t3, t4, t5, _this = this;
      _this._widget.toString;
      t1 = _this._framework$_element;
      t1.toString;
      t1 = F.Theme_of(t1);
      _this.__RefreshIndicatorState__effectiveValueColor_AI = t1.colorScheme.primary;
      color = _this.get$_effectiveValueColor();
      t1 = type$.Animation_nullable_Color;
      if (color.get$alpha(color) === 0)
        _this.set$__RefreshIndicatorState__valueColor_A(t1._as(new A8.AlwaysStoppedAnimation(color, type$.AlwaysStoppedAnimation_Color)));
      else {
        t2 = _this.__RefreshIndicatorState__positionController_A;
        t2 === $ && B.throwLateFieldNI("_positionController");
        t3 = color.withAlpha$1(0);
        t4 = color.withAlpha$1(color.get$alpha(color));
        t5 = type$.ColorTween._eval$1("_ChainedEvaluation<Animatable.T>");
        t4 = type$.Animatable_nullable_Color._as(new E._ChainedEvaluation(type$.Animatable_double._as(new F.CurveTween(C.Interval_Gs3)), new N.ColorTween(t3, t4), t5));
        t3 = type$.Animation_double;
        _this.set$__RefreshIndicatorState__valueColor_A(t1._as(new E._AnimatedEvaluation(t3._as(t3._as(t2)), t4, t5._eval$1("_AnimatedEvaluation<Animatable.T>"))));
      }
    },
    _refresh_indicator$_handleScrollNotification$1(notification) {
      var t1, t2, _0_0, t3, _this = this;
      type$.ScrollNotification._as(notification);
      if (!B.boolConversionCheck(_this._widget.notificationPredicate$1(notification)))
        return false;
      t1 = notification instanceof K.ScrollStartNotification && notification.dragDetails != null;
      if (!t1)
        if (notification instanceof K.ScrollUpdateNotification)
          if (notification.dragDetails != null)
            _this._widget.toString;
      if (t1) {
        t1 = notification.metrics;
        t2 = t1.axisDirection;
        if (!(t2 === D.AxisDirection_0 && Math.max(t1.get$maxScrollExtent() - t1.get$pixels(), 0) === 0))
          t1 = t2 === D.AxisDirection_2 && Math.max(t1.get$pixels() - t1.get$minScrollExtent(), 0) === 0;
        else
          t1 = true;
        t1 = t1 && _this._refresh_indicator$_status == null && _this._refresh_indicator$_start$1(0, t2);
      } else
        t1 = false;
      if (t1) {
        _this.setState$1(new A.RefreshIndicatorState__handleScrollNotification_closure(_this));
        return false;
      }
      t1 = notification.metrics;
      _0_0 = t1.axisDirection;
      $label0$0: {
        t2 = null;
        if (D.AxisDirection_2 === _0_0 || D.AxisDirection_0 === _0_0) {
          t2 = true;
          break $label0$0;
        }
        if (D.AxisDirection_3 === _0_0 || D.AxisDirection_1 === _0_0)
          break $label0$0;
      }
      if (t2 != _this._isIndicatorAtTop) {
        t1 = _this._refresh_indicator$_status;
        if (t1 === C.RefreshIndicatorStatus_0 || t1 === C.RefreshIndicatorStatus_1)
          _this._dismiss$1(C.RefreshIndicatorStatus_5);
      } else if (notification instanceof K.ScrollUpdateNotification) {
        t2 = _this._refresh_indicator$_status;
        if (t2 === C.RefreshIndicatorStatus_0 || t2 === C.RefreshIndicatorStatus_1) {
          if (_0_0 === D.AxisDirection_2) {
            t2 = _this._dragOffset;
            t2.toString;
            t3 = notification.scrollDelta;
            t3.toString;
            _this._dragOffset = t2 - t3;
          } else if (_0_0 === D.AxisDirection_0) {
            t2 = _this._dragOffset;
            t2.toString;
            t3 = notification.scrollDelta;
            t3.toString;
            _this._dragOffset = t2 + t3;
          }
          t1 = t1._scroll_metrics$_viewportDimension;
          t1.toString;
          _this._checkDragOffset$1(t1);
        }
        if (_this._refresh_indicator$_status === C.RefreshIndicatorStatus_1 && notification.dragDetails == null)
          _this._refresh_indicator$_show$0();
      } else if (notification instanceof K.OverscrollNotification) {
        t2 = _this._refresh_indicator$_status;
        if (t2 === C.RefreshIndicatorStatus_0 || t2 === C.RefreshIndicatorStatus_1) {
          if (_0_0 === D.AxisDirection_2) {
            t2 = _this._dragOffset;
            t2.toString;
            _this._dragOffset = t2 - notification.overscroll;
          } else if (_0_0 === D.AxisDirection_0) {
            t2 = _this._dragOffset;
            t2.toString;
            _this._dragOffset = t2 + notification.overscroll;
          }
          t1 = t1._scroll_metrics$_viewportDimension;
          t1.toString;
          _this._checkDragOffset$1(t1);
        }
      } else if (notification instanceof K.ScrollEndNotification)
        switch (_this._refresh_indicator$_status) {
          case C.RefreshIndicatorStatus_1:
            t1 = _this.__RefreshIndicatorState__positionController_A;
            t1 === $ && B.throwLateFieldNI("_positionController");
            t1 = t1.__AnimationController__value_A;
            t1 === $ && B.throwLateFieldNI("_value");
            if (t1 < 1)
              _this._dismiss$1(C.RefreshIndicatorStatus_5);
            else
              _this._refresh_indicator$_show$0();
            break;
          case C.RefreshIndicatorStatus_0:
            _this._dismiss$1(C.RefreshIndicatorStatus_5);
            break;
          case C.RefreshIndicatorStatus_5:
          case C.RefreshIndicatorStatus_4:
          case C.RefreshIndicatorStatus_3:
          case C.RefreshIndicatorStatus_2:
          case null:
          case void 0:
            break;
        }
      return false;
    },
    _handleIndicatorNotification$1(notification) {
      type$.OverscrollIndicatorNotification._as(notification);
      if (notification.ViewportNotificationMixin__depth !== 0 || !notification.leading)
        return false;
      if (this._refresh_indicator$_status === C.RefreshIndicatorStatus_0) {
        notification.accepted = false;
        return true;
      }
      return false;
    },
    _refresh_indicator$_start$1(_, direction) {
      var t1, _this = this;
      switch (direction.index) {
        case 2:
        case 0:
          _this._isIndicatorAtTop = true;
          break;
        case 3:
        case 1:
          _this._isIndicatorAtTop = null;
          return false;
      }
      _this._dragOffset = 0;
      t1 = _this.__RefreshIndicatorState__scaleController_A;
      t1 === $ && B.throwLateFieldNI("_scaleController");
      t1.set$value(0, 0);
      t1 = _this.__RefreshIndicatorState__positionController_A;
      t1 === $ && B.throwLateFieldNI("_positionController");
      t1.set$value(0, 0);
      return true;
    },
    _checkDragOffset$1(containerExtent) {
      var newValue, t2, _this = this,
        t1 = _this._dragOffset;
      t1.toString;
      newValue = t1 / (containerExtent * 0.25);
      if (_this._refresh_indicator$_status === C.RefreshIndicatorStatus_1)
        newValue = Math.max(newValue, 0.6666666666666666);
      t1 = _this.__RefreshIndicatorState__positionController_A;
      t1 === $ && B.throwLateFieldNI("_positionController");
      t1.set$value(0, B.clampDouble(newValue, 0, 1));
      if (_this._refresh_indicator$_status === C.RefreshIndicatorStatus_0) {
        t1 = _this.__RefreshIndicatorState__valueColor_A;
        t1 === $ && B.throwLateFieldNI("_valueColor");
        t1 = t1.get$value(t1);
        t1.toString;
        t1 = J.get$alpha$z(t1);
        t2 = _this.get$_effectiveValueColor();
        t2 = t1 === t2.get$alpha(t2);
        t1 = t2;
      } else
        t1 = false;
      if (t1) {
        _this._refresh_indicator$_status = C.RefreshIndicatorStatus_1;
        _this._widget.toString;
      }
    },
    _dismiss$1(newMode) {
      var $async$goto = 0,
        $async$completer = B._makeAsyncAwaitCompleter(type$.void),
        $async$self = this, t1;
      var $async$_dismiss$1 = B._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return B._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return B._asyncAwait(B.Future_Future$value(null, type$.void), $async$_dismiss$1);
            case 2:
              // returning from await.
              $async$self.setState$1(new A.RefreshIndicatorState__dismiss_closure($async$self, newMode));
            case 3:
              // switch
              switch ($async$self._refresh_indicator$_status.index) {
                case 4:
                  // goto case
                  $async$goto = 5;
                  break;
                case 5:
                  // goto case
                  $async$goto = 6;
                  break;
                case 1:
                  // goto case
                  $async$goto = 7;
                  break;
                case 0:
                  // goto case
                  $async$goto = 8;
                  break;
                case 3:
                  // goto case
                  $async$goto = 9;
                  break;
                case 2:
                  // goto case
                  $async$goto = 10;
                  break;
                default:
                  // goto after switch
                  $async$goto = 4;
                  break;
              }
              break;
            case 5:
              // case
              t1 = $async$self.__RefreshIndicatorState__scaleController_A;
              t1 === $ && B.throwLateFieldNI("_scaleController");
              t1._direction = G._AnimationDirection_0;
              $async$goto = 11;
              return B._asyncAwait(t1._animateToInternal$3$curve$duration(1, G.C__Linear, D.Duration_200000), $async$_dismiss$1);
            case 11:
              // returning from await.
              // goto after switch
              $async$goto = 4;
              break;
            case 6:
              // case
              t1 = $async$self.__RefreshIndicatorState__positionController_A;
              t1 === $ && B.throwLateFieldNI("_positionController");
              t1._direction = G._AnimationDirection_0;
              $async$goto = 12;
              return B._asyncAwait(t1._animateToInternal$3$curve$duration(0, G.C__Linear, D.Duration_200000), $async$_dismiss$1);
            case 12:
              // returning from await.
              // goto after switch
              $async$goto = 4;
              break;
            case 7:
              // case
            case 8:
              // case
            case 9:
              // case
            case 10:
              // case
              // goto after switch
              $async$goto = 4;
              break;
            case 4:
              // after switch
              if ($async$self._framework$_element != null && $async$self._refresh_indicator$_status === newMode) {
                $async$self._isIndicatorAtTop = $async$self._dragOffset = null;
                $async$self.setState$1(new A.RefreshIndicatorState__dismiss_closure0($async$self));
              }
              // implicit return
              return B._asyncReturn(null, $async$completer);
          }
      });
      return B._asyncStartSync($async$_dismiss$1, $async$completer);
    },
    _refresh_indicator$_show$0() {
      var t2, _this = this,
        t1 = $.Zone__current;
      _this._refresh_indicator$_status = C.RefreshIndicatorStatus_2;
      _this._widget.toString;
      t2 = _this.__RefreshIndicatorState__positionController_A;
      t2 === $ && B.throwLateFieldNI("_positionController");
      t2._direction = G._AnimationDirection_0;
      t2._animateToInternal$3$curve$duration(0.6666666666666666, G.C__Linear, V.Duration_150000).then$1$1(0, new A.RefreshIndicatorState__show_closure(_this, new B._AsyncCompleter(new B._Future(t1, type$._Future_void), type$._AsyncCompleter_void)), type$.void);
    },
    build$1(context) {
      var t3, t4, t5, _this = this, _null = null,
        t1 = _this._widget.child,
        t2 = _this._refresh_indicator$_status,
        showIndeterminateIndicator = t2 === C.RefreshIndicatorStatus_3 || t2 === C.RefreshIndicatorStatus_4;
      t1 = B._setArrayType([new N.NotificationListener(_this.get$_refresh_indicator$_handleScrollNotification(), new N.NotificationListener(_this.get$_handleIndicatorNotification(), t1, _null, type$.NotificationListener_OverscrollIndicatorNotification), _null, type$.NotificationListener_ScrollNotification)], type$.JSArray_Widget);
      if (_this._refresh_indicator$_status != null) {
        t2 = _this._isIndicatorAtTop;
        t2.toString;
        _this._widget.toString;
        t2 = !t2 ? 0 : _null;
        t3 = _this.__RefreshIndicatorState__positionFactor_A;
        t3 === $ && B.throwLateFieldNI("_positionFactor");
        t4 = _this.__RefreshIndicatorState__scaleFactor_A;
        t4 === $ && B.throwLateFieldNI("_scaleFactor");
        t5 = _this.__RefreshIndicatorState__positionController_A;
        t5 === $ && B.throwLateFieldNI("_positionController");
        t1.push(F.Positioned$(t2, A1.SizeTransition$(1, new E.Padding(new B.EdgeInsets(0, 40, 0, 0), new E.Align(T.Alignment_0_m1, _null, _null, Aj.ScaleTransition$(G.Alignment_0_0, F.AnimatedBuilder$(t5, new A.RefreshIndicatorState_build_closure(_this, showIndeterminateIndicator), _null), t4), _null), _null), t3), _null, _null, 0, 0, 0, _null));
      }
      return new E.Stack(G.AlignmentDirectional_m1_m1, _null, G.StackFit_0, D.Clip_1, t1, _null);
    },
    set$__RefreshIndicatorState__positionFactor_A(__RefreshIndicatorState__positionFactor_A) {
      this.__RefreshIndicatorState__positionFactor_A = type$.Animation_double._as(__RefreshIndicatorState__positionFactor_A);
    },
    set$__RefreshIndicatorState__scaleFactor_A(__RefreshIndicatorState__scaleFactor_A) {
      this.__RefreshIndicatorState__scaleFactor_A = type$.Animation_double._as(__RefreshIndicatorState__scaleFactor_A);
    },
    set$__RefreshIndicatorState__value_A(__RefreshIndicatorState__value_A) {
      this.__RefreshIndicatorState__value_A = type$.Animation_double._as(__RefreshIndicatorState__value_A);
    },
    set$__RefreshIndicatorState__valueColor_A(__RefreshIndicatorState__valueColor_A) {
      this.__RefreshIndicatorState__valueColor_A = type$.Animation_nullable_Color._as(__RefreshIndicatorState__valueColor_A);
    },
    $isTickerProvider: 1
  };
  A._RefreshIndicatorState_State_TickerProviderStateMixin.prototype = {
    activate$0() {
      this.super$State$activate();
      this._updateTickerModeNotifier$0();
      this._updateTickers$0();
    },
    dispose$0() {
      var _this = this,
        t1 = _this.TickerProviderStateMixin__tickerModeNotifier;
      if (t1 != null)
        t1.removeListener$1(0, _this.get$_updateTickers());
      _this.set$_tickerModeNotifier(null);
      _this.super$State$dispose();
    }
  };
  A.TabController.prototype = {
    get$animation(_) {
      var t1 = this._animationController;
      return t1 == null ? null : t1;
    },
    _changeIndex$3$curve$duration(value, curve, duration) {
      var t2, _this = this,
        t1 = _this._tab_controller$_index;
      if (value === t1 || _this.length < 2)
        return;
      _this._previousIndex = t1;
      _this._tab_controller$_index = value;
      t1 = _this._indexIsChangingCount + 1;
      if (duration._duration > 0) {
        _this._indexIsChangingCount = t1;
        _this.notifyListeners$0();
        t1 = _this._animationController;
        t2 = _this._tab_controller$_index;
        t1._direction = G._AnimationDirection_0;
        t1._animateToInternal$3$curve$duration(t2, curve, duration).whenCompleteOrCancel$1(new A.TabController__changeIndex_closure(_this));
      } else {
        _this._indexIsChangingCount = t1;
        _this._animationController.set$value(0, value);
        --_this._indexIsChangingCount;
        _this.notifyListeners$0();
      }
    },
    dispose$0() {
      var t1 = this._animationController;
      if (t1 != null)
        t1.dispose$0();
      this._animationController = null;
      this.super$ChangeNotifier$dispose();
    },
    get$length(receiver) {
      return this.length;
    }
  };
  A.UnderlineTabIndicator.prototype = {
    lerpFrom$2(a, t) {
      var t1, t2;
      if (a instanceof A.UnderlineTabIndicator) {
        t1 = E.BorderSide_lerp(a.borderSide, this.borderSide, t);
        t2 = O.EdgeInsetsGeometry_lerp(a.insets, this.insets, t);
        t2.toString;
        return new A.UnderlineTabIndicator(null, t1, t2);
      }
      return this.super$Decoration$lerpFrom(a, t);
    },
    lerpTo$2(b, t) {
      var t1, t2;
      if (b instanceof A.UnderlineTabIndicator) {
        t1 = E.BorderSide_lerp(this.borderSide, b.borderSide, t);
        t2 = O.EdgeInsetsGeometry_lerp(this.insets, b.insets, t);
        t2.toString;
        return new A.UnderlineTabIndicator(null, t1, t2);
      }
      return this.super$Decoration$lerpTo(b, t);
    },
    createBoxPainter$1(onChanged) {
      return new A._UnderlinePainter(this, this.borderRadius, type$.nullable_void_Function._as(onChanged));
    },
    _indicatorRectFor$2(rect, textDirection) {
      var indicator = this.insets.resolve$1(textDirection).deflateRect$1(rect),
        t1 = indicator.left,
        t2 = this.borderSide.width,
        t3 = indicator.bottom - t2;
      return new B.Rect(t1, t3, t1 + (indicator.right - t1), t3 + t2);
    },
    getClipPath$2(rect, textDirection) {
      var t2,
        t1 = this.borderRadius;
      if (t1 != null) {
        t2 = $.$get$_renderer().createPath$0();
        t2.addRRect$1(t1.toRRect$1(this._indicatorRectFor$2(rect, textDirection)));
        return t2;
      }
      t1 = $.$get$_renderer().createPath$0();
      t1.addRect$1(this._indicatorRectFor$2(rect, textDirection));
      return t1;
    }
  };
  A._UnderlinePainter.prototype = {
    paint$3(canvas, offset, configuration) {
      var t4, paint, indicator,
        t1 = configuration.size,
        t2 = offset._dx,
        t3 = offset._dy,
        rect = new B.Rect(t2, t3, t2 + t1._dx, t3 + t1._dy);
      t1 = configuration.textDirection;
      t1.toString;
      t2 = this.borderRadius;
      t3 = this.decoration;
      t4 = t3.borderSide;
      if (t2 != null) {
        paint = $.$get$_renderer().createPaint$0();
        paint.set$color(0, t4.color);
        indicator = t3._indicatorRectFor$2(rect, t1);
        t1 = t2.topLeft;
        t3 = t2.topRight;
        t4 = t2.bottomRight;
        canvas.drawRRect$2(B.RRect$fromRectAndCorners(indicator, t2.bottomLeft, t4, t1, t3), paint);
      } else {
        paint = t4.toPaint$0();
        paint.set$strokeCap(D.StrokeCap_20);
        indicator = t3._indicatorRectFor$2(rect, t1).inflate$1(-(t4.width / 2));
        t1 = indicator.bottom;
        canvas.drawLine$3(new B.Offset(indicator.left, t1), new B.Offset(indicator.right, t1), paint);
      }
    }
  };
  A.TabAlignment.prototype = {
    _enumToString$0() {
      return "TabAlignment." + this._name;
    }
  };
  A.TabIndicatorAnimation.prototype = {
    _enumToString$0() {
      return "TabIndicatorAnimation." + this._name;
    }
  };
  A.Tab.prototype = {
    _buildLabelText$0() {
      var _null = null,
        t1 = P.Text$(this.text, _null, _null, _null, G.TextOverflow_1, _null, false, _null, _null, _null, _null, _null, _null, _null);
      return t1;
    },
    build$1(context) {
      var _null = null,
        label = this._buildLabelText$0(),
        t1 = E.Center$(label, _null, _null, 1);
      return new B.Semantics(B.SemanticsProperties$(_null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, D.SemanticsRole_1, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null), false, false, false, false, new E.SizedBox(_null, 46, t1, _null), _null);
    },
    get$preferredSize() {
      return C.Size_EWx;
    },
    $isPreferredSizeWidget: 1
  };
  A._TabStyle.prototype = {
    _resolveWithLabelColor$2$iconTheme(context, iconTheme) {
      var tabBarTheme, animation, t2, selectedColor, unselectedColor, _null = null, t1 = {};
      F.Theme_of(context);
      tabBarTheme = A.TabBarTheme_of(context);
      animation = type$.Animation_double._as(this.listenable);
      t2 = tabBarTheme.labelColor;
      if (t2 == null)
        t2 = _null;
      if (t2 == null) {
        t2 = tabBarTheme.labelStyle;
        t2 = t2 == null ? _null : t2.color;
        selectedColor = t2;
      } else
        selectedColor = t2;
      if (selectedColor == null)
        selectedColor = this.defaults.get$labelColor();
      t1.selectedColor = selectedColor;
      t1.unselectedColor = null;
      if (selectedColor instanceof F._WidgetStateColor) {
        t2 = type$.Set_WidgetState;
        t1.unselectedColor = selectedColor._resolve.call$1(t2._as(H.Set_empty));
        t1.selectedColor = selectedColor._resolve.call$1(t2._as(C.Set_zpZ11));
      } else {
        t2 = tabBarTheme.unselectedLabelColor;
        if (t2 == null)
          t2 = _null;
        if (t2 == null) {
          t2 = tabBarTheme.unselectedLabelStyle;
          t2 = t2 == null ? _null : t2.color;
        }
        if (t2 == null) {
          t2 = iconTheme == null ? _null : iconTheme.color;
          unselectedColor = t2;
        } else
          unselectedColor = t2;
        if (unselectedColor == null) {
          t2 = this.defaults.get$unselectedLabelColor();
          t2.toString;
          unselectedColor = t2;
        }
        t1.unselectedColor = unselectedColor;
      }
      return F._WidgetStateColor$(new A._TabStyle__resolveWithLabelColor_closure(t1, animation));
    },
    _resolveWithLabelColor$1(context) {
      return this._resolveWithLabelColor$2$iconTheme(context, null);
    },
    build$1(context) {
      var selectedStyle, unselectedStyle, textStyle, _0_0, _this = this, _null = null,
        theme = F.Theme_of(context),
        tabBarTheme = A.TabBarTheme_of(context),
        animation = type$.Animation_double._as(_this.listenable),
        t1 = _this.isSelected,
        states = t1 ? C.Set_zpZ11 : H.Set_empty,
        t2 = _this.labelStyle,
        t3 = tabBarTheme.labelStyle;
      if (t3 == null) {
        t3 = _this.defaults.get$labelStyle();
        t3.toString;
      }
      selectedStyle = t3.copyWith$1$inherit(true);
      t3 = tabBarTheme.unselectedLabelStyle;
      t2 = t3 == null ? t2 : t3;
      if (t2 == null) {
        t2 = _this.defaults.get$unselectedLabelStyle();
        t2.toString;
      }
      unselectedStyle = t2.copyWith$1$inherit(true);
      if (t1) {
        t1 = L.TextStyle_lerp(selectedStyle, unselectedStyle, animation.get$value(animation));
        t1.toString;
        textStyle = t1;
      } else {
        t1 = L.TextStyle_lerp(unselectedStyle, selectedStyle, animation.get$value(animation));
        t1.toString;
        textStyle = t1;
      }
      switch (theme.colorScheme.brightness.index) {
        case 1:
          t1 = $.$get$kDefaultIconDarkColor();
          break;
        case 0:
          t1 = $.$get$kDefaultIconLightColor();
          break;
        default:
          t1 = _null;
      }
      _0_0 = E.IconTheme_of(context);
      $label0$1: {
        t1 = !J.$eq$(_0_0.color, t1);
        if (t1) {
          t1 = _0_0;
          break $label0$1;
        }
        t1 = _null;
        break $label0$1;
      }
      t2 = _this._resolveWithLabelColor$2$iconTheme(context, t1);
      type$.Set_WidgetState._as(states);
      t2 = t2._resolve.call$1(states);
      t3 = textStyle.copyWith$1$color(_this._resolveWithLabelColor$1(context)._resolve.call$1(states));
      t1 = t1 == null ? _null : t1.size;
      if (t1 == null)
        t1 = 24;
      return E.DefaultTextStyle$(O.IconTheme_merge(_this.child, new E.IconThemeData(t1, _null, _null, _null, _null, t2, _null, _null, _null)), _null, _null, G.TextOverflow_0, true, t3, _null, _null, G.TextWidthBasis_0);
    }
  };
  A._TabLabelBarRenderer.prototype = {
    performLayout$0() {
      var child, xOffsets, t1, t2, _this = this;
      _this.super$RenderFlex$performLayout();
      child = _this.ContainerRenderObjectMixin__firstChild;
      xOffsets = B._setArrayType([], type$.JSArray_double);
      for (t1 = type$.FlexParentData; child != null;) {
        t2 = child.parentData;
        t2.toString;
        t1._as(t2);
        D.JSArray_methods.add$1(xOffsets, t2.offset._dx);
        child = t2.ContainerParentDataMixin_nextSibling;
      }
      switch (_this._flex$_textDirection.index) {
        case 0:
          D.JSArray_methods.insert$2(xOffsets, 0, _this.get$size(0)._dx);
          break;
        case 1:
          D.JSArray_methods.add$1(xOffsets, _this.get$size(0)._dx);
          break;
      }
      t1 = _this._flex$_textDirection;
      t1.toString;
      t2 = _this.get$size(0);
      _this.onPerformLayout.call$3(xOffsets, t1, t2._dx);
    },
    set$onPerformLayout(onPerformLayout) {
      this.onPerformLayout = type$.void_Function_3_List_double_and_TextDirection_and_double._as(onPerformLayout);
    }
  };
  A._TabLabelBar.prototype = {
    createRenderObject$1(context) {
      var _this = this,
        t1 = _this.getEffectiveTextDirection$1(context);
      t1.toString;
      return A._TabLabelBarRenderer$(_this.crossAxisAlignment, _this.direction, _this.mainAxisAlignment, _this.mainAxisSize, _this.onPerformLayout, t1, _this.verticalDirection);
    },
    updateRenderObject$2(context, renderObject) {
      type$._TabLabelBarRenderer._as(renderObject);
      this.super$Flex$updateRenderObject(context, renderObject);
      renderObject.set$onPerformLayout(this.onPerformLayout);
    }
  };
  A._DividerPainter.prototype = {
    paint$2(canvas, size) {
      var paint,
        t1 = this.dividerHeight;
      if (t1 <= 0)
        return;
      paint = $.$get$_renderer().createPaint$0();
      paint.set$color(0, this.dividerColor);
      paint.set$strokeWidth(t1);
      t1 = size._dy;
      canvas.drawLine$3(new B.Offset(0, t1 - paint.get$strokeWidth() / 2), new B.Offset(size._dx, t1 - paint.get$strokeWidth() / 2), paint);
    },
    shouldRepaint$1(oldDelegate) {
      type$._DividerPainter._as(oldDelegate);
      return !oldDelegate.dividerColor.$eq(0, this.dividerColor) || oldDelegate.dividerHeight !== this.dividerHeight;
    }
  };
  A._IndicatorPainter.prototype = {
    markNeedsPaint$0() {
      this._tabs$_needsPaint = true;
    },
    dispose$0() {
      var t1 = this._tabs$_painter;
      if (t1 != null)
        t1.dispose$0();
    },
    indicatorRect$2(tabBarSize, tabIndex) {
      var t1, t2, t3, t4, tabLeft, tabRight, tabWidth, insets, rect, t5, _this = this;
      switch (_this._currentTextDirection.index) {
        case 0:
          t1 = _this._currentTabOffsets;
          t2 = tabIndex + 1;
          t3 = t1.length;
          if (!(t2 >= 0 && t2 < t3))
            return B.ioore(t1, t2);
          t2 = t1[t2];
          if (!(tabIndex >= 0 && tabIndex < t3))
            return B.ioore(t1, tabIndex);
          t1 = new B._Record_2(t2, t1[tabIndex]);
          break;
        case 1:
          t1 = _this._currentTabOffsets;
          t2 = t1.length;
          if (!(tabIndex >= 0 && tabIndex < t2))
            return B.ioore(t1, tabIndex);
          t3 = t1[tabIndex];
          t4 = tabIndex + 1;
          if (!(t4 < t2))
            return B.ioore(t1, t4);
          t4 = new B._Record_2(t3, t1[t4]);
          t1 = t4;
          break;
        default:
          t1 = null;
      }
      tabLeft = t1._0;
      tabRight = t1._1;
      if (_this.indicatorSize === C.TabBarIndicatorSize_1) {
        t1 = _this.tabKeys;
        if (!(tabIndex >= 0 && tabIndex < t1.length))
          return B.ioore(t1, tabIndex);
        t1 = t1[tabIndex];
        tabWidth = $.WidgetsBinding__instance.WidgetsBinding__buildOwner._globalKeyRegistry.$index(0, t1).get$size(0)._dx;
        t1 = _this.labelPaddings;
        if (!(tabIndex < t1.length))
          return B.ioore(t1, tabIndex);
        insets = t1[tabIndex].resolve$1(_this._currentTextDirection);
        tabLeft += (tabRight - tabLeft - (tabWidth + insets.get$horizontal())) / 2 + insets.left;
        tabRight = tabLeft + tabWidth;
      }
      insets = _this.indicatorPadding;
      t1 = tabLeft + (tabRight - tabLeft);
      t2 = 0 + tabBarSize._dy;
      rect = new B.Rect(tabLeft, 0, t1, t2);
      t3 = insets.get$horizontal();
      t4 = insets.get$_top(0);
      t5 = insets.get$_bottom(0);
      if (!(t1 - tabLeft >= t3 && t2 >= t4 + t5))
        throw B.wrapException(B.FlutterError_FlutterError("indicatorPadding insets should be less than Tab Size\nRect Size : " + rect.get$size(0).toString$0(0) + ", Insets: " + insets.toString$0(0)));
      return insets.deflateRect$1(rect);
    },
    paint$2(canvas, size) {
      var t2, t3, ltr, from, to, t4, t5, t6, dividerPaint, t7, _this = this, _null = null,
        t1 = _this._tabs$_needsPaint = false;
      if (_this._tabs$_painter == null)
        _this._tabs$_painter = _this.indicator.createBoxPainter$1(_this.get$markNeedsPaint());
      t2 = _this.controller;
      t3 = t2.get$animation(0).__AnimationController__value_A;
      t3 === $ && B.throwLateFieldNI("_value");
      switch (_this.indicatorAnimation.index) {
        case 0:
          ltr = t2._tab_controller$_index > t3;
          t2 = ltr ? D.JSNumber_methods.floor$0(t3) : D.JSNumber_methods.ceil$0(t3);
          from = D.JSInt_methods.clamp$2(t2, 0, _this._currentTabOffsets.length - 2);
          t2 = ltr ? from + 1 : from - 1;
          to = D.JSInt_methods.clamp$2(t2, 0, _this._currentTabOffsets.length - 2);
          t3 = U.Rect_lerp(_this.indicatorRect$2(size, from), _this.indicatorRect$2(size, to), Math.abs(t3 - from));
          t2 = t3;
          break;
        case 1:
          t2 = _this._applyElasticEffect$2$size$value(size, t3);
          break;
        default:
          t2 = _null;
      }
      _this._currentRect = t2;
      t3 = t2.right;
      t4 = t2.left;
      t5 = t2.bottom;
      t2 = t2.top;
      t6 = _this._currentTextDirection;
      if (_this.showDivider) {
        t1 = _this.dividerHeight;
        t1.toString;
        t1 = t1 > 0;
      }
      if (t1) {
        dividerPaint = $.$get$_renderer().createPaint$0();
        t1 = _this.dividerColor;
        t1.toString;
        dividerPaint.set$color(0, t1);
        t1 = _this.dividerHeight;
        t1.toString;
        dividerPaint.set$strokeWidth(t1);
        t1 = size._dy;
        canvas.drawLine$3(new B.Offset(0, t1 - dividerPaint.get$strokeWidth() / 2), new B.Offset(size._dx, t1 - dividerPaint.get$strokeWidth() / 2), dividerPaint);
      }
      t1 = _this._tabs$_painter;
      t1.toString;
      t7 = _this._currentRect;
      t1.paint$3(canvas, new B.Offset(t7.left, t7.top), new E.ImageConfiguration(_null, _this.devicePixelRatio, _null, t6, new B.Size(t3 - t4, t5 - t2), _null));
    },
    accelerateInterpolation$1(fraction) {
      return 1 - Math.cos(fraction * 3.141592653589793 / 2);
    },
    _applyElasticEffect$2$size$value(size, value) {
      var t3, to, from, toRect, fromRect, tabsDelta, tabChangeProgress, t4, leftFraction, rightFraction, lerpRectRight, lerpRectLeft, _this = this, _null = null,
        t1 = _this.controller,
        index = t1._tab_controller$_index,
        progressLeft = Math.abs(index - value),
        t2 = progressLeft !== 0;
      if (!t2 || t1._indexIsChangingCount === 0) {
        switch (_this.textDirection.index) {
          case 1:
            t3 = D.JSNumber_methods.ceil$0(value);
            break;
          case 0:
            t3 = D.JSNumber_methods.floor$0(value);
            break;
          default:
            t3 = _null;
        }
        to = J.clamp$2$n(t3, 0, _this._currentTabOffsets.length - 2);
      } else
        to = index;
      if (!t2 || t1._indexIsChangingCount === 0) {
        switch (_this.textDirection.index) {
          case 1:
            t2 = to - 1;
            break;
          case 0:
            t2 = to + 1;
            break;
          default:
            t2 = _null;
        }
        from = J.clamp$2$n(t2, 0, _this._currentTabOffsets.length - 2);
      } else
        from = t1._previousIndex;
      toRect = _this.indicatorRect$2(size, to);
      fromRect = _this.indicatorRect$2(size, from);
      t2 = U.Rect_lerp(fromRect, toRect, Math.abs(value - from));
      t2.toString;
      if (t1.get$animation(0).get$status(0) === G.AnimationStatus_3)
        return t2;
      t3 = t1._indexIsChangingCount !== 0;
      if (t3) {
        tabsDelta = Math.abs(t1._tab_controller$_index - t1._previousIndex);
        tabChangeProgress = 1 - B.clampDouble(tabsDelta !== 0 ? progressLeft / tabsDelta : progressLeft, 0, 1);
      } else
        tabChangeProgress = progressLeft;
      if (tabChangeProgress === 1)
        return t2;
      switch (_this.textDirection.index) {
        case 1:
          t3 = t3 ? index > value : value > index;
          break;
        case 0:
          t3 = t3 ? value > index : index > value;
          break;
        default:
          t3 = _null;
      }
      t4 = tabChangeProgress * 3.141592653589793 / 2;
      if (t3) {
        leftFraction = _this.accelerateInterpolation$1(tabChangeProgress);
        rightFraction = Math.sin(t4);
      } else {
        leftFraction = Math.sin(t4);
        rightFraction = _this.accelerateInterpolation$1(tabChangeProgress);
      }
      if (t1._indexIsChangingCount !== 0) {
        t1 = E.lerpDouble(fromRect.left, toRect.left, leftFraction);
        t1.toString;
        t3 = E.lerpDouble(fromRect.right, toRect.right, rightFraction);
        t3.toString;
        lerpRectRight = t3;
        lerpRectLeft = t1;
      } else {
        switch (t3) {
          case true:
            t1 = E.lerpDouble(fromRect.left, toRect.left, leftFraction);
            t1.toString;
            break;
          case false:
            t1 = E.lerpDouble(toRect.left, fromRect.left, leftFraction);
            t1.toString;
            break;
          default:
            t1 = _null;
        }
        switch (t3) {
          case true:
            t3 = E.lerpDouble(fromRect.right, toRect.right, rightFraction);
            t3.toString;
            break;
          case false:
            t3 = E.lerpDouble(toRect.right, fromRect.right, rightFraction);
            t3.toString;
            break;
          default:
            t3 = _null;
        }
        lerpRectRight = t3;
        lerpRectLeft = t1;
      }
      return new B.Rect(lerpRectLeft, t2.top, lerpRectRight, t2.bottom);
    },
    shouldRepaint$1(old) {
      var _this = this;
      type$._IndicatorPainter._as(old);
      return _this._tabs$_needsPaint || _this.controller !== old.controller || !_this.indicator.$eq(0, old.indicator) || _this.tabKeys.length !== old.tabKeys.length || !B.listEquals0(_this._currentTabOffsets, old._currentTabOffsets, type$.double) || _this._currentTextDirection != old._currentTextDirection;
    },
    set$_currentTabOffsets(_currentTabOffsets) {
      this._currentTabOffsets = type$.nullable_List_double._as(_currentTabOffsets);
    }
  };
  A._ChangeAnimation.prototype = {
    get$parent(_) {
      var t1 = this.controller.get$animation(0);
      t1.toString;
      return t1;
    },
    removeStatusListener$1(listener) {
      type$.void_Function_AnimationStatus._as(listener);
      if (this.controller.get$animation(0) != null)
        this.super$AnimationWithParentMixin$removeStatusListener(listener);
    },
    removeListener$1(_, listener) {
      type$.void_Function._as(listener);
      if (this.controller.get$animation(0) != null)
        this.super$AnimationWithParentMixin$removeListener(0, listener);
    },
    get$value(_) {
      return A._indexChangeProgress(this.controller);
    }
  };
  A._DragAnimation.prototype = {
    get$parent(_) {
      var t1 = this.controller.get$animation(0);
      t1.toString;
      return t1;
    },
    removeStatusListener$1(listener) {
      type$.void_Function_AnimationStatus._as(listener);
      if (this.controller.get$animation(0) != null)
        this.super$AnimationWithParentMixin$removeStatusListener(listener);
    },
    removeListener$1(_, listener) {
      type$.void_Function._as(listener);
      if (this.controller.get$animation(0) != null)
        this.super$AnimationWithParentMixin$removeListener(0, listener);
    },
    get$value(_) {
      var t1 = this.controller,
        t2 = t1.get$animation(0).__AnimationController__value_A;
      t2 === $ && B.throwLateFieldNI("_value");
      return B.clampDouble(Math.abs(B.clampDouble(t2, 0, t1.length - 1) - this.index), 0, 1);
    }
  };
  A._TabBarScrollPosition.prototype = {
    applyContentDimensions$2(minScrollExtent, maxScrollExtent) {
      var t2, t3, t4, result, _this = this,
        t1 = _this._viewportDimensionWasNonZero;
      if (!t1) {
        t1 = _this._viewportDimension;
        t1.toString;
        t1 = _this._viewportDimensionWasNonZero = t1 !== 0;
      }
      t1 = !t1 || _this._needsPixelsCorrection;
      if (t1) {
        _this._needsPixelsCorrection = false;
        t2 = _this.tabBar;
        t3 = _this._viewportDimension;
        t3.toString;
        t4 = t2._currentIndex;
        t4.toString;
        _this._pixels = t2._tabScrollOffset$4(t4, t3, minScrollExtent, maxScrollExtent);
      }
      result = !t1;
      return _this.super$ScrollPosition$applyContentDimensions(minScrollExtent, maxScrollExtent) && result;
    }
  };
  A._TabBarScrollController.prototype = {
    createScrollPosition$3(physics, context, oldPosition) {
      var _null = null,
        t1 = $.$get$ChangeNotifier__emptyListeners();
      t1 = new A._TabBarScrollPosition(this.tabBar, V.ScrollDirection_0, physics, context, true, _null, new B.ValueNotifier(false, t1, type$.ValueNotifier_bool), t1);
      t1.ScrollPosition$5$context$debugLabel$keepScrollOffset$oldPosition$physics(context, _null, true, oldPosition, physics);
      t1.ScrollPositionWithSingleContext$6$context$debugLabel$initialPixels$keepScrollOffset$oldPosition$physics(context, _null, _null, true, oldPosition, physics);
      return t1;
    }
  };
  A.TabBar.prototype = {
    get$preferredSize() {
      var t1, t2, t3, maxHeight, _i, item;
      for (t1 = this.tabs, t2 = t1.length, t3 = type$.PreferredSizeWidget, maxHeight = 46, _i = 0; _i < t1.length; t1.length === t2 || (0, B.throwConcurrentModificationError)(t1), ++_i) {
        item = t1[_i];
        if (t3._is(item))
          maxHeight = Math.max(item.get$preferredSize()._dy, maxHeight);
      }
      return new B.Size(1 / 0, maxHeight + 2);
    },
    get$tabHasTextAndIcon() {
      var t1, t2, t3, _i, item;
      for (t1 = this.tabs, t2 = t1.length, t3 = type$.PreferredSizeWidget, _i = 0; _i < t1.length; t1.length === t2 || (0, B.throwConcurrentModificationError)(t1), ++_i) {
        item = t1[_i];
        if (t3._is(item))
          if (item.get$preferredSize()._dy === 72)
            return true;
      }
      return false;
    },
    createState$0() {
      return new A._TabBarState();
    },
    $isPreferredSizeWidget: 1
  };
  A._TabBarState.prototype = {
    initState$0() {
      var t1, t2, t3, _this = this;
      _this.super$State$initState();
      t1 = _this._widget.tabs;
      t2 = B._arrayInstanceType(t1);
      t3 = t2._eval$1("MappedListIterable<1,GlobalKey<State<StatefulWidget>>>");
      _this.set$___TabBarState__tabKeys_A(type$.List_GlobalKey_State_StatefulWidget._as(B.List_List$of(new B.MappedListIterable(t1, t2._eval$1("GlobalKey<State<StatefulWidget>>(1)")._as(new A._TabBarState_initState_closure()), t3), true, t3._eval$1("ListIterable.E"))));
      _this.set$___TabBarState__labelPaddings_A(type$.List_EdgeInsetsGeometry._as(B.List_List$filled(_this._widget.tabs.length, D.EdgeInsets_0_0_0_0, true, type$.EdgeInsetsGeometry)));
    },
    get$_tabs$_defaults() {
      var _null = null,
        t1 = this._framework$_element;
      t1.toString;
      F.Theme_of(t1);
      this._widget.toString;
      t1 = this._framework$_element;
      t1.toString;
      return new A._TabsPrimaryDefaultsM3(t1, true, _null, _null, C.TabBarIndicatorSize_1, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null);
    },
    _getIndicator$1(indicatorSize) {
      var tabBarTheme, color, t2, effectiveIndicatorWeight, effectiveBorderRadius, _this = this, _null = null,
        t1 = _this._framework$_element;
      t1.toString;
      F.Theme_of(t1);
      t1 = _this._framework$_element;
      t1.toString;
      tabBarTheme = A.TabBarTheme_of(t1);
      _this._widget.toString;
      t1 = tabBarTheme.indicator;
      if (t1 != null)
        return t1;
      color = tabBarTheme.indicatorColor;
      if (color == null)
        color = _this.get$_tabs$_defaults().get$indicatorColor();
      _this._widget.toString;
      t1 = color.get$value(color);
      t2 = _this._framework$_element;
      t2.toString;
      t2 = L.LookupBoundary_findAncestorRenderObjectOfType(t2, type$._RenderInkFeatures);
      if (t2 == null)
        t2 = _null;
      else {
        t2 = t2.color;
        t2 = t2 == null ? _null : t2.get$value(t2);
      }
      t2 = t1 === t2;
      t1 = t2;
      if (t1)
        color = G.Color_wst;
      _this._widget.toString;
      switch (true) {
        case true:
          t1 = A._TabsPrimaryDefaultsM3_indicatorWeight(indicatorSize);
          break;
        case false:
          t1 = 2;
          break;
        default:
          t1 = _null;
      }
      effectiveIndicatorWeight = Math.max(2, B.checkNum(t1));
      switch (indicatorSize.index) {
        case 1:
          t1 = true;
          break;
        case 0:
          t1 = false;
          break;
        default:
          t1 = _null;
      }
      effectiveBorderRadius = t1 ? new E.BorderRadius(new B.Radius(effectiveIndicatorWeight, effectiveIndicatorWeight), new B.Radius(effectiveIndicatorWeight, effectiveIndicatorWeight), D.Radius_0_0, D.Radius_0_0) : _null;
      return new A.UnderlineTabIndicator(effectiveBorderRadius, new E.BorderSide(color, effectiveIndicatorWeight, G.BorderStyle_1, -1), D.EdgeInsets_0_0_0_0);
    },
    get$_controllerIsValid() {
      var t1 = this._tabs$_controller;
      return (t1 == null ? null : t1.get$animation(0)) != null;
    },
    _updateTabController$0() {
      var t1, t2, _this = this,
        newController = _this._widget.controller;
      if (newController === _this._tabs$_controller)
        return;
      if (_this.get$_controllerIsValid()) {
        _this._tabs$_controller.get$animation(0).removeListener$1(0, _this.get$_handleTabControllerAnimationTick());
        _this._tabs$_controller.removeListener$1(0, _this.get$_handleTabControllerTick());
      }
      _this._tabs$_controller = newController;
      t1 = newController.get$animation(0);
      t1.toString;
      t2 = type$.void_Function._as(_this.get$_handleTabControllerAnimationTick());
      t1.didRegisterListener$0();
      t1.AnimationLocalListenersMixin__listeners.add$1(0, t2);
      _this._tabs$_controller.addListener$1(0, _this.get$_handleTabControllerTick());
      _this._currentIndex = _this._tabs$_controller._tab_controller$_index;
    },
    _initIndicatorPainter$0() {
      var tabBarTheme, indicatorSize, oldPainter, t2, t3, t4, t5, t6, t7, t8, _this = this,
        t1 = _this._framework$_element;
      t1.toString;
      F.Theme_of(t1);
      t1 = _this._framework$_element;
      t1.toString;
      tabBarTheme = A.TabBarTheme_of(t1);
      _this._widget.toString;
      indicatorSize = tabBarTheme.indicatorSize;
      if (indicatorSize == null) {
        t1 = _this.get$_tabs$_defaults().indicatorSize;
        t1.toString;
        indicatorSize = t1;
      }
      oldPainter = _this._indicatorPainter;
      switch (indicatorSize.index) {
        case 1:
          t1 = C.TabIndicatorAnimation_1;
          break;
        case 0:
          t1 = C.TabIndicatorAnimation_0;
          break;
        default:
          t1 = null;
      }
      if (!_this.get$_controllerIsValid())
        t1 = null;
      else {
        t2 = _this._tabs$_controller;
        t2.toString;
        t3 = _this._getIndicator$1(indicatorSize);
        _this._widget.toString;
        t4 = _this.___TabBarState__tabKeys_A;
        t4 === $ && B.throwLateFieldNI("_tabKeys");
        t5 = _this.___TabBarState__labelPaddings_A;
        t5 === $ && B.throwLateFieldNI("_labelPaddings");
        t6 = tabBarTheme.dividerColor;
        if (t6 == null)
          t6 = _this.get$_tabs$_defaults().get$dividerColor();
        _this._widget.toString;
        t7 = _this.get$_tabs$_defaults().get$dividerHeight();
        _this._widget.toString;
        t8 = _this._framework$_element;
        t8.toString;
        t8 = B.InheritedModel_inheritFrom(t8, D._MediaQueryAspect_2, type$.MediaQuery).data;
        _this._widget.toString;
        t1 = new A._IndicatorPainter(t2, t3, indicatorSize, D.EdgeInsets_0_0_0_0, t4, t5, t6, t7, false, t8.devicePixelRatio, t1, _this._framework$_element.dependOnInheritedWidgetOfExactType$1$0(type$.Directionality).textDirection, t2.get$animation(0));
        if (oldPainter != null) {
          t2 = oldPainter._currentTabOffsets;
          t3 = oldPainter._currentTextDirection;
          t1.set$_currentTabOffsets(type$.nullable_List_double._as(t2));
          t1._currentTextDirection = t3;
        }
      }
      _this._indicatorPainter = t1;
      if (oldPainter != null)
        oldPainter.dispose$0();
    },
    didChangeDependencies$0() {
      this.super$State$didChangeDependencies();
      this._updateTabController$0();
      this._initIndicatorPainter$0();
    },
    didUpdateWidget$1(oldWidget) {
      var t1, position, t2, t3, delta, _list, n, _this = this,
        _s14_ = "_labelPaddings";
      type$.TabBar._as(oldWidget);
      _this.super$State$didUpdateWidget(oldWidget);
      if (_this._widget.controller !== oldWidget.controller) {
        _this._updateTabController$0();
        _this._initIndicatorPainter$0();
        t1 = _this._tabs$_scrollController;
        if (t1 != null && t1._positions.length !== 0) {
          position = D.JSArray_methods.get$single(t1._positions);
          if (position instanceof A._TabBarScrollPosition)
            position._needsPixelsCorrection = true;
        }
      } else {
        t1 = true;
        t1 = D.EdgeInsets_0_0_0_0.$eq(0, D.EdgeInsets_0_0_0_0);
        if (t1)
          _this._widget.toString;
        t1 = !t1;
        if (t1)
          _this._initIndicatorPainter$0();
      }
      t1 = _this._widget.tabs.length;
      t2 = _this.___TabBarState__tabKeys_A;
      t2 === $ && B.throwLateFieldNI("_tabKeys");
      t3 = t2.length;
      if (t1 > t3) {
        delta = t1 - t3;
        _list = J.JSArray_JSArray$allocateGrowable(delta, type$.GlobalKey_State_StatefulWidget);
        for (t1 = type$.LabeledGlobalKey_State_StatefulWidget, n = 0; n < delta; ++n)
          _list[n] = new F.LabeledGlobalKey(null, t1);
        D.JSArray_methods.addAll$1(t2, _list);
        t1 = _this.___TabBarState__labelPaddings_A;
        t1 === $ && B.throwLateFieldNI(_s14_);
        D.JSArray_methods.addAll$1(t1, B.List_List$filled(delta, D.EdgeInsets_0_0_0_0, false, type$.EdgeInsetsGeometry));
      } else if (t1 < t3) {
        D.JSArray_methods.removeRange$2(t2, t1, t3);
        t1 = _this.___TabBarState__labelPaddings_A;
        t1 === $ && B.throwLateFieldNI(_s14_);
        D.JSArray_methods.removeRange$2(t1, _this._widget.tabs.length, _this.___TabBarState__tabKeys_A.length);
      }
    },
    dispose$0() {
      var t1, _this = this;
      _this._indicatorPainter.dispose$0();
      if (_this.get$_controllerIsValid()) {
        _this._tabs$_controller.get$animation(0).removeListener$1(0, _this.get$_handleTabControllerAnimationTick());
        _this._tabs$_controller.removeListener$1(0, _this.get$_handleTabControllerTick());
      }
      _this._tabs$_controller = null;
      t1 = _this._tabs$_scrollController;
      if (t1 != null)
        t1.dispose$0();
      _this.super$State$dispose();
    },
    _tabScrollOffset$4(index, viewportWidth, minExtent, maxExtent) {
      var t1, t2, t3, t4, tabCenter, paddingStart, _this = this;
      _this._widget.toString;
      t1 = _this._indicatorPainter._currentTabOffsets;
      t2 = t1.length;
      if (!(index >= 0 && index < t2))
        return B.ioore(t1, index);
      t3 = t1[index];
      t4 = index + 1;
      if (!(t4 < t2))
        return B.ioore(t1, t4);
      tabCenter = (t3 + t1[t4]) / 2;
      paddingStart = 0;
      switch (_this._framework$_element.dependOnInheritedWidgetOfExactType$1$0(type$.Directionality).textDirection.index) {
        case 0:
          _this._widget.toString;
          t1 = _this.___TabBarState__tabStripWidth_A;
          t1 === $ && B.throwLateFieldNI("_tabStripWidth");
          tabCenter = t1 - tabCenter;
          break;
        case 1:
          _this._widget.toString;
          break;
        default:
          paddingStart = null;
      }
      if (typeof paddingStart !== "number")
        return B.iae(paddingStart);
      return B.clampDouble(tabCenter + paddingStart - viewportWidth / 2, minExtent, maxExtent);
    },
    _tabCenteredScrollOffset$1(index) {
      var t2, t3,
        position = D.JSArray_methods.get$single(this._tabs$_scrollController._positions),
        t1 = position._viewportDimension;
      t1.toString;
      t2 = position._minScrollExtent;
      t2.toString;
      t3 = position._maxScrollExtent;
      t3.toString;
      return this._tabScrollOffset$4(index, t1, t2, t3);
    },
    _scrollToControllerValue$0() {
      var leadingPosition, middlePosition, trailingPosition, index, _0_0, _this = this,
        t1 = _this._currentIndex;
      t1.toString;
      leadingPosition = t1 > 0 ? _this._tabCenteredScrollOffset$1(t1 - 1) : null;
      t1 = _this._currentIndex;
      t1.toString;
      middlePosition = _this._tabCenteredScrollOffset$1(t1);
      t1 = _this._currentIndex;
      t1.toString;
      trailingPosition = t1 < _this._indicatorPainter._currentTabOffsets.length - 2 ? _this._tabCenteredScrollOffset$1(t1 + 1) : null;
      t1 = _this._tabs$_controller;
      index = t1._tab_controller$_index;
      t1 = t1.get$animation(0).__AnimationController__value_A;
      t1 === $ && B.throwLateFieldNI("_value");
      _0_0 = t1 - index;
      $label0$0: {
        if (-1 === _0_0) {
          t1 = leadingPosition == null ? middlePosition : leadingPosition;
          break $label0$0;
        }
        if (1 === _0_0) {
          t1 = trailingPosition == null ? middlePosition : trailingPosition;
          break $label0$0;
        }
        if (0 === _0_0) {
          t1 = middlePosition;
          break $label0$0;
        }
        if (_0_0 < 0) {
          if (leadingPosition == null)
            t1 = middlePosition;
          else {
            t1 = E.lerpDouble(middlePosition, leadingPosition, index - t1);
            t1.toString;
          }
          break $label0$0;
        }
        if (trailingPosition == null)
          t1 = middlePosition;
        else {
          t1 = E.lerpDouble(middlePosition, trailingPosition, _0_0);
          t1.toString;
        }
        break $label0$0;
      }
      _this._tabs$_scrollController.jumpTo$1(t1);
    },
    _handleTabControllerAnimationTick$0() {
      var _this = this,
        t1 = _this._tabs$_controller,
        t2 = t1._indexIsChangingCount === 0;
      if (t2)
        _this._widget.toString;
      if (t2) {
        _this._currentIndex = t1._tab_controller$_index;
        _this._scrollToControllerValue$0();
      }
    },
    _handleTabControllerTick$0() {
      var offset, _this = this,
        t1 = _this._tabs$_controller._tab_controller$_index;
      if (t1 !== _this._currentIndex) {
        _this._currentIndex = t1;
        _this._widget.toString;
        offset = _this._tabCenteredScrollOffset$1(t1);
        _this._tabs$_scrollController.animateTo$3$curve$duration(offset, D.Cubic_glB, D.Duration_300000);
      }
      _this.setState$1(new A._TabBarState__handleTabControllerTick_closure());
    },
    _saveTabOffsets$3(tabOffsets, textDirection, width) {
      var t1;
      type$.List_double._as(tabOffsets);
      this.___TabBarState__tabStripWidth_A = width;
      t1 = this._indicatorPainter;
      if (t1 != null) {
        t1.set$_currentTabOffsets(type$.nullable_List_double._as(tabOffsets));
        t1._currentTextDirection = textDirection;
      }
    },
    _buildStyledTab$4(child, isSelected, animation, defaults) {
      var _null = null;
      type$.Animation_double._as(animation);
      this._widget.toString;
      return A._TabStyle$(animation, child, defaults, true, isSelected, _null, _null, _null, _null);
    },
    build$1(context) {
      var tabBarTheme, effectiveTabAlignment, wrappedTabs, t1, previousIndex, t2, t3, t4, animation, tabIndex, tabCount, t5, t6, t7, t8, t9, index, t10, t11, effectiveMouseCursor, defaultOverlay, t12, t13, t14, effectivePadding, tabBar, dividerColor, _this = this, _null = null;
      F.Theme_of(context);
      tabBarTheme = A.TabBarTheme_of(context);
      _this._widget.toString;
      effectiveTabAlignment = _this.get$_tabs$_defaults().get$tabAlignment();
      F.Localizations_of(context, H.Type_MaterialLocalizations_nEU, type$.MaterialLocalizations).toString;
      if (_this._tabs$_controller.length === 0) {
        _this._widget.toString;
        return E.LimitedBox$(new E.SizedBox(1 / 0, 48, _null, _null), 1 / 0, 0);
      }
      wrappedTabs = B.List_List$generate(_this._widget.tabs.length, new A._TabBarState_build_closure(_this, tabBarTheme), true, type$.Widget);
      t1 = _this._tabs$_controller;
      if (t1 != null) {
        previousIndex = t1._previousIndex;
        t2 = t1._indexIsChangingCount;
        t3 = _this._currentIndex;
        t4 = wrappedTabs.length;
        if (t2 !== 0) {
          animation = new A._ChangeAnimation(t1);
          t3.toString;
          if (!(t3 < t4))
            return B.ioore(wrappedTabs, t3);
          D.JSArray_methods.$indexSet(wrappedTabs, t3, _this._buildStyledTab$4(wrappedTabs[t3], true, animation, _this.get$_tabs$_defaults()));
          if (!(previousIndex < wrappedTabs.length))
            return B.ioore(wrappedTabs, previousIndex);
          D.JSArray_methods.$indexSet(wrappedTabs, previousIndex, _this._buildStyledTab$4(wrappedTabs[previousIndex], false, animation, _this.get$_tabs$_defaults()));
        } else {
          t3.toString;
          if (!(t3 < t4))
            return B.ioore(wrappedTabs, t3);
          D.JSArray_methods.$indexSet(wrappedTabs, t3, _this._buildStyledTab$4(wrappedTabs[t3], true, new A._DragAnimation(t1, t3), _this.get$_tabs$_defaults()));
          t1 = _this._currentIndex;
          t1.toString;
          if (t1 > 0) {
            tabIndex = t1 - 1;
            t1 = _this._tabs$_controller;
            t1.toString;
            t2 = B._setArrayType([], type$.JSArray_of_void_Function_AnimationStatus);
            if (!(tabIndex < wrappedTabs.length))
              return B.ioore(wrappedTabs, tabIndex);
            D.JSArray_methods.$indexSet(wrappedTabs, tabIndex, _this._buildStyledTab$4(wrappedTabs[tabIndex], false, new F.ReverseAnimation(new A._DragAnimation(t1, tabIndex), new E.ObserverList(t2, type$.ObserverList_of_void_Function_AnimationStatus), 0), _this.get$_tabs$_defaults()));
          }
          t1 = _this._currentIndex;
          t1.toString;
          if (t1 < _this._widget.tabs.length - 1) {
            tabIndex = t1 + 1;
            t1 = _this._tabs$_controller;
            t1.toString;
            t2 = B._setArrayType([], type$.JSArray_of_void_Function_AnimationStatus);
            if (!(tabIndex < wrappedTabs.length))
              return B.ioore(wrappedTabs, tabIndex);
            D.JSArray_methods.$indexSet(wrappedTabs, tabIndex, _this._buildStyledTab$4(wrappedTabs[tabIndex], false, new F.ReverseAnimation(new A._DragAnimation(t1, tabIndex), new E.ObserverList(t2, type$.ObserverList_of_void_Function_AnimationStatus), 0), _this.get$_tabs$_defaults()));
          }
        }
      }
      tabCount = _this._widget.tabs.length;
      for (t1 = type$.JSArray_Widget, t2 = tabBarTheme.splashBorderRadius, t3 = tabBarTheme.overlayColor, t4 = type$._WidgetStatePropertyWith_nullable_Color, t5 = type$.nullable_MouseCursor, t6 = type$.WidgetState, t7 = type$.Set_WidgetState, t8 = t2 == null, t9 = t3 == null, index = 0; index < tabCount; ++index) {
        t10 = B.LinkedHashSet_LinkedHashSet$_empty(t6);
        if (index === _this._currentIndex)
          t10.add$1(0, G.WidgetState_4);
        _this._widget.toString;
        t11 = L.WidgetStateProperty_resolveAs(_null, t10, t5);
        if (t11 == null)
          effectiveMouseCursor = _null;
        else
          effectiveMouseCursor = t11;
        if (effectiveMouseCursor == null)
          effectiveMouseCursor = L.WidgetStateMouseCursor__clickable(t7._as(t10));
        defaultOverlay = new O._WidgetStatePropertyWith(new A._TabBarState_build_closure0(_this, t10), t4);
        _this._widget.toString;
        t10 = t9 ? defaultOverlay : t3;
        t11 = _this.get$_tabs$_defaults().get$splashFactory();
        _this._widget.toString;
        t12 = t8 ? _this.get$_tabs$_defaults().splashBorderRadius : t2;
        _this._widget.toString;
        if (!(index < wrappedTabs.length))
          return B.ioore(wrappedTabs, index);
        t13 = wrappedTabs[index];
        t14 = _this._currentIndex;
        D.JSArray_methods.$indexSet(wrappedTabs, index, L.InkWell$(false, t12, true, new E.Padding(new B.EdgeInsets(0, 0, 0, 2), new E.Stack(G.AlignmentDirectional_m1_m1, _null, G.StackFit_0, D.Clip_1, B._setArrayType([t13, new B.Semantics(new B.SemanticsProperties(_null, _null, _null, _null, _null, index === t14, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null), false, false, false, false, _null, _null)], t1), _null), _null), _null, true, _null, _null, _null, _null, effectiveMouseCursor, _null, _null, _null, _null, new A._TabBarState_build_closure1(_this, index), t10, _null, t11, _null));
        _this._widget.toString;
      }
      t1 = _this._indicatorPainter;
      _this._widget.toString;
      t2 = _this.get$_tabs$_defaults();
      t3 = effectiveTabAlignment === C.TabAlignment_2 ? H.MainAxisSize_1 : H.MainAxisSize_0;
      t1 = F.CustomPaint$(A._TabStyle$(H.C__AlwaysDismissedAnimation, new A._TabLabelBar(_this.get$_saveTabOffsets(), D.Axis_0, H.MainAxisAlignment_0, t3, H.CrossAxisAlignment_2, _null, H.VerticalDirection_1, _null, 0, wrappedTabs, _null), t2, true, false, _null, _null, _null, _null), _null, _null, t1, D.Size_0_0);
      t2 = B.SemanticsProperties$(_null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, D.SemanticsRole_2, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null);
      _this._widget.toString;
      if (effectiveTabAlignment === C.TabAlignment_1)
        effectivePadding = C.EdgeInsetsDirectional_52_0_0_0.add$1(0, D.EdgeInsets_0_0_0_0);
      else
        effectivePadding = _null;
      if (_this._tabs$_scrollController == null)
        _this._tabs$_scrollController = new A._TabBarScrollController(_this, _null, _null, B._setArrayType([], type$.JSArray_ScrollPosition), $.$get$ChangeNotifier__emptyListeners());
      t3 = N.ScrollConfiguration_of(context).copyWith$1$overscroll(false);
      _this._widget.toString;
      tabBar = A6.ScrollConfiguration$(t3, Z.SingleChildScrollView$(new B.Semantics(t2, false, false, false, false, t1, _null), _this._tabs$_scrollController, H.DragStartBehavior_1, effectivePadding, _null, D.Axis_0));
      $label0$0: {
        if (C.TabAlignment_3 === effectiveTabAlignment) {
          t1 = G.Alignment_0_0;
          break $label0$0;
        }
        if (C.TabAlignment_0 === effectiveTabAlignment || C.TabAlignment_1 === effectiveTabAlignment || C.TabAlignment_2 === effectiveTabAlignment) {
          t1 = R.AlignmentDirectional_m1_0;
          break $label0$0;
        }
        t1 = _null;
      }
      dividerColor = tabBarTheme.dividerColor;
      if (dividerColor == null) {
        t2 = _this.get$_tabs$_defaults().get$dividerColor();
        t2.toString;
        dividerColor = t2;
      }
      _this._widget.toString;
      t2 = _this.get$_tabs$_defaults().get$dividerHeight();
      t2.toString;
      t3 = t2 > 0;
      tabBar = new E.Align(t1, t3 ? _null : 1, 1, tabBar, _null);
      if (!dividerColor.$eq(0, D.Color_Edl) && t3)
        tabBar = F.CustomPaint$(tabBar, _null, _null, new A._DividerPainter(dividerColor, t2, _null), D.Size_0_0);
      t1 = B.InheritedModel_inheritFrom(context, _null, type$.MediaQuery).data;
      _this._widget.toString;
      return B.MediaQuery$(tabBar, t1.copyWith$1$textScaler(tabBarTheme.textScaler));
    },
    set$___TabBarState__tabKeys_A(___TabBarState__tabKeys_A) {
      this.___TabBarState__tabKeys_A = type$.List_GlobalKey_State_StatefulWidget._as(___TabBarState__tabKeys_A);
    },
    set$___TabBarState__labelPaddings_A(___TabBarState__labelPaddings_A) {
      this.___TabBarState__labelPaddings_A = type$.List_EdgeInsetsGeometry._as(___TabBarState__labelPaddings_A);
    }
  };
  A._TabsPrimaryDefaultsM3.prototype = {
    get$_tabs$_colors() {
      var t1, _this = this,
        value = _this.___TabsPrimaryDefaultsM3__colors_FI;
      if (value === $) {
        t1 = F.Theme_of(_this.context);
        _this.___TabsPrimaryDefaultsM3__colors_FI !== $ && B.throwLateFieldADI("_colors");
        value = _this.___TabsPrimaryDefaultsM3__colors_FI = t1.colorScheme;
      }
      return value;
    },
    get$_tabs$_textTheme() {
      var t1, _this = this,
        value = _this.___TabsPrimaryDefaultsM3__textTheme_FI;
      if (value === $) {
        t1 = F.Theme_of(_this.context);
        _this.___TabsPrimaryDefaultsM3__textTheme_FI !== $ && B.throwLateFieldADI("_textTheme");
        value = _this.___TabsPrimaryDefaultsM3__textTheme_FI = t1.textTheme;
      }
      return value;
    },
    get$dividerColor() {
      var t1 = this.get$_tabs$_colors(),
        t2 = t1._outlineVariant;
      if (t2 == null) {
        t2 = t1._onBackground;
        t1 = t2 == null ? t1.onSurface : t2;
      } else
        t1 = t2;
      return t1;
    },
    get$dividerHeight() {
      return 1;
    },
    get$indicatorColor() {
      return this.get$_tabs$_colors().primary;
    },
    get$labelColor() {
      return this.get$_tabs$_colors().primary;
    },
    get$labelStyle() {
      return this.get$_tabs$_textTheme().titleSmall;
    },
    get$unselectedLabelColor() {
      var t1 = this.get$_tabs$_colors(),
        t2 = t1._onSurfaceVariant;
      return t2 == null ? t1.onSurface : t2;
    },
    get$unselectedLabelStyle() {
      return this.get$_tabs$_textTheme().titleSmall;
    },
    get$overlayColor() {
      return new O._WidgetStatePropertyWith(new A._TabsPrimaryDefaultsM3_overlayColor_closure(this), type$._WidgetStatePropertyWith_nullable_Color);
    },
    get$splashFactory() {
      return F.Theme_of(this.context).splashFactory;
    },
    get$tabAlignment() {
      return C.TabAlignment_1;
    }
  };
  A.__ChangeAnimation_Animation_AnimationWithParentMixin.prototype = {};
  A.__DragAnimation_Animation_AnimationWithParentMixin.prototype = {};
  var typesOffset = hunkHelpers.updateTypes(["~()", "Color?(Set<WidgetState>)", "Future<~>()", "NutritionItem(@)", "double(double,NutritionItem)", "RecordDetailDialog(BuildContext)", "Tab(String)", "bool(ScrollNotification)", "bool(OverscrollIndicatorNotification)", "Color(Set<WidgetState>)", "~(List<double>,TextDirection,double)", "Center(int)"]);
  A._DataPageState_initState_closure.prototype = {
    call$0() {
      var t1 = this.$this,
        t2 = t1._sC._positions,
        t3 = D.JSArray_methods.get$single(t2)._pixels;
      t3.toString;
      t2 = D.JSArray_methods.get$single(t2)._maxScrollExtent;
      t2.toString;
      return t3 >= t2 - 100 && !t1._loading && t1._hasMore ? t1._loadMore$0() : null;
    },
    $signature: 0
  };
  A._DataPageState_initState_closure0.prototype = {
    call$0() {
      var t1 = this.$this;
      if (t1.get$_tC()._indexIsChangingCount !== 0)
        return;
      t1.setState$1(new A._DataPageState_initState__closure(t1));
      t1._refresh$0();
    },
    $signature: 0
  };
  A._DataPageState_initState__closure.prototype = {
    call$0() {
      var t1 = this.$this,
        t2 = t1._types,
        t3 = t1.get$_tC()._tab_controller$_index;
      if (!(t3 < 3))
        return B.ioore(t2, t3);
      return t1.___DataPageState__filterType_AI = t2[t3];
    },
    $signature: 0
  };
  A._DataPageState__loadMore_closure.prototype = {
    call$0() {
      return this.$this._loading = true;
    },
    $signature: 0
  };
  A._DataPageState__loadMore_closure0.prototype = {
    call$1(r) {
      var t1, t2;
      type$.Map_String_dynamic._as(r);
      t1 = this.$this;
      if (t1._searchKeyword.length === 0)
        t1 = true;
      else {
        t2 = J.$index$asx(r, "data");
        t1 = t2 == null ? null : D.JSString_methods.contains$1(J.toString$0$(t2).toLowerCase(), t1._searchKeyword.toLowerCase());
        t1 = t1 === true;
      }
      return t1;
    },
    $signature: 89
  };
  A._DataPageState__loadMore_closure1.prototype = {
    call$0() {
      return this.$this._loading = false;
    },
    $signature: 0
  };
  A._DataPageState__refresh_closure.prototype = {
    call$0() {
      var t1 = this.$this;
      D.JSArray_methods.clear$0(t1._data_page$_records);
      t1._data_page$_skip = 0;
      t1._hasMore = true;
    },
    $signature: 0
  };
  A._DataPageState__refreshRecord_closure.prototype = {
    call$0() {
      var t1 = this.$this._data_page$_records,
        index = D.JSArray_methods.indexWhere$1(t1, new A._DataPageState__refreshRecord__closure(this.record));
      if (index !== -1)
        D.JSArray_methods.$indexSet(t1, index, this.newData);
    },
    $signature: 0
  };
  A._DataPageState__refreshRecord__closure.prototype = {
    call$1(r) {
      var _s10_ = "created_at";
      return J.$eq$(J.$index$asx(type$.Map_String_dynamic._as(r), _s10_), J.$index$asx(this.record, _s10_));
    },
    $signature: 89
  };
  A._DataPageState__buildRecordRow_closure.prototype = {
    call$1(e) {
      return A4.NutritionItem_NutritionItem$fromJson(type$.Map_String_dynamic._as(e));
    },
    $signature: typesOffset + 3
  };
  A._DataPageState__buildRecordRow_closure0.prototype = {
    call$2(sum, item) {
      return B._asDouble(sum) + type$.NutritionItem._as(item).nutrientAmount$1("\u70ed\u91cf");
    },
    $signature: typesOffset + 4
  };
  A._DataPageState__buildRecordRow_closure1.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = B._makeAsyncAwaitCompleter(type$.void),
        $async$self = this, t1, t2;
      var $async$call$0 = B._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return B._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return B._asyncAwait(B.loadDeferredLibrary("record_detail", ""), $async$call$0);
            case 2:
              // returning from await.
              t1 = $async$self.$this;
              t2 = t1._framework$_element;
              t2.toString;
              Y.showDialog(new A._DataPageState__buildRecordRow__closure(t1, $async$self.record), t2, type$.dynamic);
              // implicit return
              return B._asyncReturn(null, $async$completer);
          }
      });
      return B._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 5
  };
  A._DataPageState__buildRecordRow__closure.prototype = {
    call$1(__wc0_formal) {
      var t1, t2, t3, t4;
      type$.BuildContext._as(__wc0_formal);
      B.checkDeferredIsLoaded("record_detail");
      t1 = this.record;
      t2 = J.getInterceptor$asx(t1);
      t3 = type$.String;
      t4 = type$.dynamic;
      return A3.RecordDetailDialog$(B.LinkedHashMap_LinkedHashMap$_literal(["event", "record_status", "data", B.LinkedHashMap_LinkedHashMap$_literal(["type", t2.$index(t1, "_type"), "created_at", S.DateTime_parse(B._asString(t2.$index(t1, "created_at")))._core$_value / 1000], t3, t4)], t3, t4), new A._DataPageState__buildRecordRow___closure(this.$this, t1));
    },
    $signature: typesOffset + 5
  };
  A._DataPageState__buildRecordRow___closure.prototype = {
    call$0() {
      return this.$this._refreshRecord$1(this.record);
    },
    $signature: 0
  };
  A._DataPageState_build_closure.prototype = {
    call$1(e) {
      return new A.Tab(B._asString(e), null);
    },
    $signature: typesOffset + 6
  };
  A._DataPageState_build_closure0.prototype = {
    call$1(v) {
      var t1 = this.$this;
      t1._searchKeyword = v;
      t1._refresh$0();
    },
    $signature: 23
  };
  A._DataPageState_build_closure1.prototype = {
    call$2(context, index) {
      var t1, t2, t3, _null = null;
      type$.BuildContext._as(context);
      B._asInt(index);
      t1 = this.$this;
      t2 = t1._data_page$_records;
      t3 = t2.length;
      if (index >= t3)
        return t1._hasMore ? new E.SizedBox(_null, 60, E.Center$(A0.CircularProgressIndicator$(_null, _null, _null, _null, _null, _null, _null, _null, _null, _null), _null, _null, _null), _null) : C.SizedBox_GFq;
      if (t3 === 0)
        return C.SizedBox_0Q1;
      if (!(index >= 0))
        return B.ioore(t2, index);
      return t1._buildRecordRow$1(t2[index]);
    },
    $signature: 86
  };
  A._RefreshProgressIndicatorState__buildAnimation_closure.prototype = {
    call$2(context, child) {
      var t1, t2, t3, t4;
      type$.BuildContext._as(context);
      type$.nullable_Widget._as(child);
      t1 = this.$this;
      t2 = $.$get$_CircularProgressIndicatorState__strokeHeadTween();
      t3 = t1.___CircularProgressIndicatorState__controller_A;
      t3 === $ && B.throwLateFieldNI("_controller");
      t4 = type$.Animation_double;
      t3 = t2.transform$1(0, t4._as(t3).get$value(0));
      if (typeof t3 !== "number")
        return B.iae(t3);
      return t1._buildMaterialIndicator$5(context, 1.05 * t3, $.$get$_CircularProgressIndicatorState__strokeTailTween().transform$1(0, t4._as(t1.___CircularProgressIndicatorState__controller_A).get$value(0)), $.$get$_CircularProgressIndicatorState__offsetTween().transform$1(0, t4._as(t1.___CircularProgressIndicatorState__controller_A).get$value(0)), $.$get$_CircularProgressIndicatorState__rotationTween().transform$1(0, t4._as(t1.___CircularProgressIndicatorState__controller_A).get$value(0)));
    },
    $signature: 48
  };
  A.RefreshIndicatorState__handleScrollNotification_closure.prototype = {
    call$0() {
      var t1 = this.$this;
      t1._refresh_indicator$_status = C.RefreshIndicatorStatus_0;
      t1._widget.toString;
    },
    $signature: 0
  };
  A.RefreshIndicatorState__dismiss_closure.prototype = {
    call$0() {
      var t1 = this.$this;
      t1._refresh_indicator$_status = this.newMode;
      t1._widget.toString;
    },
    $signature: 0
  };
  A.RefreshIndicatorState__dismiss_closure0.prototype = {
    call$0() {
      this.$this._refresh_indicator$_status = null;
    },
    $signature: 0
  };
  A.RefreshIndicatorState__show_closure.prototype = {
    call$1(value) {
      var t1 = this.$this;
      if (t1._framework$_element != null && t1._refresh_indicator$_status === C.RefreshIndicatorStatus_2) {
        t1.setState$1(new A.RefreshIndicatorState__show__closure(t1));
        t1._widget.onRefresh$0().whenComplete$1(new A.RefreshIndicatorState__show__closure0(t1, this.completer));
      }
    },
    $signature: 9
  };
  A.RefreshIndicatorState__show__closure.prototype = {
    call$0() {
      this.$this._refresh_indicator$_status = C.RefreshIndicatorStatus_3;
    },
    $signature: 0
  };
  A.RefreshIndicatorState__show__closure0.prototype = {
    call$0() {
      var t1 = this.$this;
      if (t1._framework$_element != null && t1._refresh_indicator$_status === C.RefreshIndicatorStatus_3) {
        this.completer.complete$0(0);
        t1._dismiss$1(C.RefreshIndicatorStatus_4);
      }
    },
    $signature: 3
  };
  A.RefreshIndicatorState_build_closure.prototype = {
    call$2(context, child) {
      var t1, t2, t3, t4, materialIndicator, cupertinoIndicator, _null = null;
      type$.BuildContext._as(context);
      type$.nullable_Widget._as(child);
      t1 = this.$this;
      t1._widget.toString;
      t2 = F.Localizations_of(context, H.Type_MaterialLocalizations_nEU, type$.MaterialLocalizations);
      t2.toString;
      t2 = t2.get$refreshIndicatorSemanticLabel();
      t1._widget.toString;
      if (this.showIndeterminateIndicator)
        t3 = _null;
      else {
        t3 = t1.__RefreshIndicatorState__value_A;
        t3 === $ && B.throwLateFieldNI("_value");
        t4 = type$.Animation_double._as(t3.parent);
        t4 = t3._evaluatable.transform$1(0, t4.get$value(t4));
        t3 = t4;
      }
      t4 = t1.__RefreshIndicatorState__valueColor_A;
      t4 === $ && B.throwLateFieldNI("_valueColor");
      t1._widget.toString;
      materialIndicator = new A.RefreshProgressIndicator(2, 2.5, _null, _null, t3, _null, _null, t4, t2, _null, _null);
      cupertinoIndicator = I.CupertinoActivityIndicator$(_null, _null);
      switch (0) {
        case 0:
          return materialIndicator;
      }
    },
    $signature: 48
  };
  A.TabController__changeIndex_closure.prototype = {
    call$0() {
      var t1 = this.$this;
      if (t1._animationController != null) {
        --t1._indexIsChangingCount;
        t1.notifyListeners$0();
      }
    },
    $signature: 0
  };
  A._TabStyle__resolveWithLabelColor_closure.prototype = {
    call$1(states) {
      var t1, t2, _this = this;
      if (type$.Set_WidgetState._as(states).contains$1(0, G.WidgetState_4)) {
        t1 = _this._box_0;
        t2 = _this.animation;
        t2 = E.Color_lerp(t1.selectedColor, t1.unselectedColor, t2.get$value(t2));
        t2.toString;
        return t2;
      }
      t1 = _this._box_0;
      t2 = _this.animation;
      t2 = E.Color_lerp(t1.unselectedColor, t1.selectedColor, t2.get$value(t2));
      t2.toString;
      return t2;
    },
    $signature: typesOffset + 9
  };
  A._TabBarState_initState_closure.prototype = {
    call$1(tab) {
      type$.Widget._as(tab);
      return new F.LabeledGlobalKey(null, type$.LabeledGlobalKey_State_StatefulWidget);
    },
    $signature: 352
  };
  A._TabBarState__handleTabControllerTick_closure.prototype = {
    call$0() {
    },
    $signature: 0
  };
  A._TabBarState_build_closure.prototype = {
    call$1(index) {
      var padding, tab, t3,
        t1 = this.$this,
        t2 = t1._widget;
      t2.toString;
      padding = this.tabBarTheme.labelPadding;
      if (padding == null)
        padding = H.EdgeInsets_16_0_16_0;
      t2 = t2.tabs;
      if (!(index < t2.length))
        return B.ioore(t2, index);
      tab = t2[index];
      if (type$.PreferredSizeWidget._is(tab) && tab.get$preferredSize()._dy === 46 && t1._widget.get$tabHasTextAndIcon())
        padding = padding.add$1(0, C.EdgeInsets_0_13_0_13);
      t2 = t1.___TabBarState__labelPaddings_A;
      t2 === $ && B.throwLateFieldNI("_labelPaddings");
      D.JSArray_methods.$indexSet(t2, index, padding);
      t2 = t1.___TabBarState__labelPaddings_A;
      if (!(index < t2.length))
        return B.ioore(t2, index);
      t2 = t2[index];
      t3 = t1.___TabBarState__tabKeys_A;
      t3 === $ && B.throwLateFieldNI("_tabKeys");
      if (!(index < t3.length))
        return B.ioore(t3, index);
      t3 = t3[index];
      t1 = t1._widget.tabs;
      if (!(index < t1.length))
        return B.ioore(t1, index);
      return E.Center$(new E.Padding(t2, new Aa.KeyedSubtree(t1[index], t3), null), 1, null, null);
    },
    $signature: typesOffset + 11
  };
  A._TabBarState_build_closure0.prototype = {
    call$1(states) {
      var t1,
        effectiveStates = this.selectedState;
      effectiveStates.addAll$1(0, type$.Set_WidgetState._as(states));
      t1 = this.$this.get$_tabs$_defaults().get$overlayColor();
      return t1 == null ? null : t1.resolve$1(effectiveStates);
    },
    $signature: typesOffset + 1
  };
  A._TabBarState_build_closure1.prototype = {
    call$0() {
      var t1 = this.$this,
        t2 = t1._tabs$_controller,
        t3 = t2._animationDuration;
      t2._changeIndex$3$curve$duration(this.index, D.Cubic_glB, t3);
      t1._widget.toString;
    },
    $signature: 0
  };
  A._TabsPrimaryDefaultsM3_overlayColor_closure.prototype = {
    call$1(states) {
      var t1, _this = this;
      type$.Set_WidgetState._as(states);
      if (states.contains$1(0, G.WidgetState_4)) {
        if (states.contains$1(0, M.WidgetState_2))
          return _this.$this.get$_tabs$_colors().primary.withOpacity$1(0.1);
        if (states.contains$1(0, M.WidgetState_0))
          return _this.$this.get$_tabs$_colors().primary.withOpacity$1(0.08);
        if (states.contains$1(0, M.WidgetState_1))
          return _this.$this.get$_tabs$_colors().primary.withOpacity$1(0.1);
        return null;
      }
      if (states.contains$1(0, M.WidgetState_2))
        return _this.$this.get$_tabs$_colors().primary.withOpacity$1(0.1);
      if (states.contains$1(0, M.WidgetState_0)) {
        t1 = _this.$this.get$_tabs$_colors().onSurface;
        return B.Color$fromARGB(20, t1.toARGB32$0() >>> 16 & 255, t1.toARGB32$0() >>> 8 & 255, t1.toARGB32$0() & 255);
      }
      if (states.contains$1(0, M.WidgetState_1)) {
        t1 = _this.$this.get$_tabs$_colors().onSurface;
        return B.Color$fromARGB(D.JSNumber_methods.round$0(25.5), t1.toARGB32$0() >>> 16 & 255, t1.toARGB32$0() >>> 8 & 255, t1.toARGB32$0() & 255);
      }
      return null;
    },
    $signature: typesOffset + 1
  };
  (function aliases() {
    var _ = A.__DataPageState_State_TickerProviderStateMixin.prototype;
    _.super$__DataPageState_State_TickerProviderStateMixin$dispose = _.dispose$0;
    _ = A._RefreshIndicatorState_State_TickerProviderStateMixin.prototype;
    _.super$_RefreshIndicatorState_State_TickerProviderStateMixin$dispose = _.dispose$0;
  })();
  (function installTearOffs() {
    var _instance_0_u = hunkHelpers._instance_0u,
      _instance_1_u = hunkHelpers._instance_1u,
      _instance = hunkHelpers.installInstanceTearOff;
    _instance_0_u(A._DataPageState.prototype, "get$_refresh", "_refresh$0", 2);
    var _;
    _instance_1_u(_ = A.RefreshIndicatorState.prototype, "get$_refresh_indicator$_handleScrollNotification", "_refresh_indicator$_handleScrollNotification$1", 7);
    _instance_1_u(_, "get$_handleIndicatorNotification", "_handleIndicatorNotification$1", 8);
    _instance_0_u(A.TabController.prototype, "get$dispose", "dispose$0", 0);
    _instance_0_u(A._IndicatorPainter.prototype, "get$markNeedsPaint", "markNeedsPaint$0", 0);
    _instance_0_u(_ = A._TabBarState.prototype, "get$_handleTabControllerAnimationTick", "_handleTabControllerAnimationTick$0", 0);
    _instance_0_u(_, "get$_handleTabControllerTick", "_handleTabControllerTick$0", 0);
    _instance(_, "get$_saveTabOffsets", 0, 3, null, ["call$3"], ["_saveTabOffsets$3"], 10, 0, 0);
  })();
  (function inheritance() {
    var _mixinHard = hunkHelpers.mixinHard,
      _mixin = hunkHelpers.mixin,
      _inheritMany = hunkHelpers.inheritMany,
      _inherit = hunkHelpers.inherit;
    _inheritMany(B.StatefulWidget, [A.DataPage, A.RefreshIndicator, A.TabBar]);
    _inheritMany(B.State, [A.__DataPageState_State_TickerProviderStateMixin, A._RefreshIndicatorState_State_TickerProviderStateMixin, A._TabBarState]);
    _inherit(A._DataPageState, A.__DataPageState_State_TickerProviderStateMixin);
    _inheritMany(B.Closure0Args, [A._DataPageState_initState_closure, A._DataPageState_initState_closure0, A._DataPageState_initState__closure, A._DataPageState__loadMore_closure, A._DataPageState__loadMore_closure1, A._DataPageState__refresh_closure, A._DataPageState__refreshRecord_closure, A._DataPageState__buildRecordRow_closure1, A._DataPageState__buildRecordRow___closure, A.RefreshIndicatorState__handleScrollNotification_closure, A.RefreshIndicatorState__dismiss_closure, A.RefreshIndicatorState__dismiss_closure0, A.RefreshIndicatorState__show__closure, A.RefreshIndicatorState__show__closure0, A.TabController__changeIndex_closure, A._TabBarState__handleTabControllerTick_closure, A._TabBarState_build_closure1]);
    _inheritMany(B.Closure, [A._DataPageState__loadMore_closure0, A._DataPageState__refreshRecord__closure, A._DataPageState__buildRecordRow_closure, A._DataPageState__buildRecordRow__closure, A._DataPageState_build_closure, A._DataPageState_build_closure0, A.RefreshIndicatorState__show_closure, A._TabStyle__resolveWithLabelColor_closure, A._TabBarState_initState_closure, A._TabBarState_build_closure, A._TabBarState_build_closure0, A._TabsPrimaryDefaultsM3_overlayColor_closure]);
    _inheritMany(B.Closure2Args, [A._DataPageState__buildRecordRow_closure0, A._DataPageState_build_closure1, A._RefreshProgressIndicatorState__buildAnimation_closure, A.RefreshIndicatorState_build_closure]);
    _inherit(A._RefreshProgressIndicatorPainter, I._CircularProgressIndicatorPainter);
    _inherit(A.RefreshProgressIndicator, I.CircularProgressIndicator);
    _inherit(A._RefreshProgressIndicatorState, I._CircularProgressIndicatorState);
    _inheritMany(B._Enum, [A.RefreshIndicatorStatus, A.RefreshIndicatorTriggerMode, A._IndicatorType, A.TabAlignment, A.TabIndicatorAnimation]);
    _inherit(A.RefreshIndicatorState, A._RefreshIndicatorState_State_TickerProviderStateMixin);
    _inherit(A.TabController, B.ChangeNotifier);
    _inherit(A.UnderlineTabIndicator, E.Decoration);
    _inherit(A._UnderlinePainter, E.BoxPainter);
    _inherit(A.Tab, B.StatelessWidget);
    _inherit(A._TabStyle, F.AnimatedWidget);
    _inherit(A._TabLabelBarRenderer, F.RenderFlex);
    _inherit(A._TabLabelBar, F.Flex);
    _inheritMany(F.CustomPainter, [A._DividerPainter, A._IndicatorPainter]);
    _inheritMany(E.Animation, [A.__ChangeAnimation_Animation_AnimationWithParentMixin, A.__DragAnimation_Animation_AnimationWithParentMixin]);
    _inherit(A._ChangeAnimation, A.__ChangeAnimation_Animation_AnimationWithParentMixin);
    _inherit(A._DragAnimation, A.__DragAnimation_Animation_AnimationWithParentMixin);
    _inherit(A._TabBarScrollPosition, K.ScrollPositionWithSingleContext);
    _inherit(A._TabBarScrollController, K.ScrollController);
    _inherit(A._TabsPrimaryDefaultsM3, F.TabBarThemeData);
    _mixinHard(A.__DataPageState_State_TickerProviderStateMixin, E.TickerProviderStateMixin);
    _mixinHard(A._RefreshIndicatorState_State_TickerProviderStateMixin, E.TickerProviderStateMixin);
    _mixin(A.__ChangeAnimation_Animation_AnimationWithParentMixin, E.AnimationWithParentMixin);
    _mixin(A.__DragAnimation_Animation_AnimationWithParentMixin, E.AnimationWithParentMixin);
  })();
  B._Universe_addRules(init.typeUniverse, JSON.parse('{"DataPage":{"StatefulWidget":[],"Widget":[],"DiagnosticableTree":[]},"_DataPageState":{"TickerProviderStateMixin":["DataPage"],"State":["DataPage"],"TickerProvider":[],"State.T":"DataPage"},"_RefreshProgressIndicatorPainter":{"_CircularProgressIndicatorPainter":[],"CustomPainter":[],"Listenable":[]},"RefreshProgressIndicator":{"CircularProgressIndicator":[],"StatefulWidget":[],"Widget":[],"DiagnosticableTree":[]},"_RefreshProgressIndicatorState":{"State":["CircularProgressIndicator"],"TickerProvider":[],"State.T":"CircularProgressIndicator"},"RefreshIndicator":{"StatefulWidget":[],"Widget":[],"DiagnosticableTree":[]},"RefreshIndicatorStatus":{"Enum":[]},"RefreshIndicatorTriggerMode":{"Enum":[]},"_IndicatorType":{"Enum":[]},"RefreshIndicatorState":{"TickerProviderStateMixin":["RefreshIndicator"],"State":["RefreshIndicator"],"TickerProvider":[],"State.T":"RefreshIndicator"},"TabController":{"ChangeNotifier":[],"Listenable":[]},"UnderlineTabIndicator":{"Decoration":[]},"_UnderlinePainter":{"BoxPainter":[]},"Tab":{"StatelessWidget":[],"PreferredSizeWidget":[],"Widget":[],"DiagnosticableTree":[]},"TabBar":{"StatefulWidget":[],"PreferredSizeWidget":[],"Widget":[],"DiagnosticableTree":[]},"TabAlignment":{"Enum":[]},"TabIndicatorAnimation":{"Enum":[]},"_TabStyle":{"AnimatedWidget":[],"StatefulWidget":[],"Widget":[],"DiagnosticableTree":[]},"_TabLabelBarRenderer":{"RenderFlex":[],"RenderBoxContainerDefaultsMixin":["RenderBox","FlexParentData"],"RenderBox":[],"ContainerRenderObjectMixin":["RenderBox","FlexParentData"],"RenderObject":[],"DiagnosticableTree":[],"HitTestTarget":[],"ContainerRenderObjectMixin.1":"FlexParentData","ContainerRenderObjectMixin.0":"RenderBox","RenderBoxContainerDefaultsMixin.1":"FlexParentData"},"_TabLabelBar":{"MultiChildRenderObjectWidget":[],"RenderObjectWidget":[],"Widget":[],"DiagnosticableTree":[]},"_DividerPainter":{"CustomPainter":[],"Listenable":[]},"_IndicatorPainter":{"CustomPainter":[],"Listenable":[]},"_ChangeAnimation":{"Animation":["double"],"ValueListenable":["double"],"Listenable":[]},"_DragAnimation":{"Animation":["double"],"ValueListenable":["double"],"Listenable":[]},"_TabBarScrollPosition":{"ScrollPosition":[],"ViewportOffset":[],"ChangeNotifier":[],"Listenable":[],"ScrollMetrics":[],"ScrollActivityDelegate":[]},"_TabBarScrollController":{"ScrollController":[],"ChangeNotifier":[],"Listenable":[]},"_TabBarState":{"State":["TabBar"],"State.T":"TabBar"},"_TabsPrimaryDefaultsM3":{"TabBarThemeData":[]}}'));
  var type$ = (function rtii() {
    var findType = B.findType;
    return {
      AlwaysStoppedAnimation_Color: findType("AlwaysStoppedAnimation<Color>"),
      Animatable_double: findType("Animatable<double>"),
      Animatable_nullable_Color: findType("Animatable<Color?>"),
      Animation_double: findType("Animation<double>"),
      Animation_nullable_Color: findType("Animation<Color?>"),
      BuildContext: findType("BuildContext"),
      ClipRectLayer: findType("ClipRectLayer"),
      ColorTween: findType("ColorTween"),
      ContainerLayer: findType("ContainerLayer0"),
      Directionality: findType("Directionality"),
      EdgeInsetsGeometry: findType("EdgeInsetsGeometry"),
      FlexParentData: findType("FlexParentData"),
      GlobalKey_State_StatefulWidget: findType("GlobalKey<State<StatefulWidget>>"),
      HealthDataManager: findType("HealthDataManager"),
      JSArray_Map_String_dynamic: findType("JSArray<Map<String,@>>"),
      JSArray_ScrollPosition: findType("JSArray<ScrollPosition>"),
      JSArray_String: findType("JSArray<String>"),
      JSArray_TweenSequenceItem_double: findType("JSArray<TweenSequenceItem<double>>"),
      JSArray_Widget: findType("JSArray<Widget>"),
      JSArray_double: findType("JSArray<double>"),
      JSArray_of_void_Function_AnimationStatus: findType("JSArray<~(AnimationStatus)>"),
      LabeledGlobalKey_State_StatefulWidget: findType("LabeledGlobalKey<State<StatefulWidget>>"),
      List_EdgeInsetsGeometry: findType("List<EdgeInsetsGeometry>"),
      List_GlobalKey_State_StatefulWidget: findType("List<GlobalKey<State<StatefulWidget>>>"),
      List_double: findType("List<double>"),
      List_dynamic: findType("List<@>"),
      Map_String_dynamic: findType("Map<String,@>"),
      MaterialLocalizations: findType("MaterialLocalizations"),
      MediaQuery: findType("MediaQuery"),
      NotificationListener_OverscrollIndicatorNotification: findType("NotificationListener<OverscrollIndicatorNotification>"),
      NotificationListener_ScrollNotification: findType("NotificationListener<ScrollNotification>"),
      NutritionItem: findType("NutritionItem"),
      ObserverList_of_void_Function_AnimationStatus: findType("ObserverList<~(AnimationStatus)>"),
      OverscrollIndicatorNotification: findType("OverscrollIndicatorNotification"),
      PreferredSizeWidget: findType("PreferredSizeWidget"),
      RefreshIndicator: findType("RefreshIndicator"),
      RefreshProgressIndicator: findType("RefreshProgressIndicator"),
      ScrollNotification: findType("ScrollNotification"),
      Set_WidgetState: findType("Set<WidgetState>"),
      String: findType("String"),
      TabBar: findType("TabBar"),
      TabBarTheme: findType("TabBarTheme"),
      TextPainter: findType("TextPainter"),
      TweenSequenceItem_double: findType("TweenSequenceItem<double>"),
      Tween_double: findType("Tween<double>"),
      ValueNotifier_bool: findType("ValueNotifier<bool>"),
      Widget: findType("Widget"),
      WidgetState: findType("WidgetState"),
      _AsyncCompleter_void: findType("_AsyncCompleter<~>"),
      _DividerPainter: findType("_DividerPainter"),
      _Future_void: findType("_Future<~>"),
      _IndicatorPainter: findType("_IndicatorPainter"),
      _RenderInkFeatures: findType("_RenderInkFeatures"),
      _TabLabelBarRenderer: findType("_TabLabelBarRenderer"),
      _WidgetStatePropertyWith_nullable_Color: findType("_WidgetStatePropertyWith<Color?>"),
      double: findType("double"),
      dynamic: findType("@"),
      nullable_List_double: findType("List<double>?"),
      nullable_MouseCursor: findType("MouseCursor?"),
      nullable_Widget: findType("Widget?"),
      nullable_void_Function: findType("~()?"),
      void: findType("~"),
      void_Function: findType("~()"),
      void_Function_3_List_double_and_TextDirection_and_double: findType("~(List<double>,TextDirection,double)"),
      void_Function_AnimationStatus: findType("~(AnimationStatus)")
    };
  })();
  (function constants() {
    C.EdgeInsetsDirectional_52_0_0_0 = new E.EdgeInsetsDirectional(52, 0, 0, 0);
    C.EdgeInsets_0_13_0_13 = new B.EdgeInsets(0, 13, 0, 13);
    C.EdgeInsets_12_12_12_12 = new B.EdgeInsets(12, 12, 12, 12);
    C.IconData_57563_MaterialIcons_null_false = new E.IconData(57563, "MaterialIcons", null, false);
    C.IconData_58121_MaterialIcons_null_true = new E.IconData(58121, "MaterialIcons", null, true);
    C.IconData_58674_MaterialIcons_null_false = new E.IconData(58674, "MaterialIcons", null, false);
    C.IconData_58727_MaterialIcons_null_false = new E.IconData(58727, "MaterialIcons", null, false);
    C.Icon_8Ci = new E.Icon(C.IconData_58727_MaterialIcons_null_false, null, null, null, null);
    C.OutlineInputBorder_kIs = new Ac.OutlineInputBorder(4, G.BorderRadius_nnp, Ab.BorderSide_ViT);
    C.InputDecoration_dYY = new Q.InputDecoration(null, null, null, null, null, null, null, null, null, null, "\u641c\u7d22\u5173\u952e\u5b57", null, null, null, null, true, null, null, null, null, null, null, null, null, null, C.Icon_8Ci, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, C.OutlineInputBorder_kIs, true, null, null, null);
    C.Interval_Gs3 = new F.Interval(0, 0.6666666666666666, G.C__Linear);
    C.Interval_uxr = new F.Interval(0.1, 0.33, G.C__Linear);
    C.RefreshIndicatorStatus_0 = new A.RefreshIndicatorStatus(0, "drag");
    C.RefreshIndicatorStatus_1 = new A.RefreshIndicatorStatus(1, "armed");
    C.RefreshIndicatorStatus_2 = new A.RefreshIndicatorStatus(2, "snap");
    C.RefreshIndicatorStatus_3 = new A.RefreshIndicatorStatus(3, "refresh");
    C.RefreshIndicatorStatus_4 = new A.RefreshIndicatorStatus(4, "done");
    C.RefreshIndicatorStatus_5 = new A.RefreshIndicatorStatus(5, "canceled");
    C.RefreshIndicatorTriggerMode_1 = new A.RefreshIndicatorTriggerMode(1, "onEdge");
    C.Set_zpZ11 = new B.GeneralConstantSet([G.WidgetState_4], B.findType("GeneralConstantSet<WidgetState>"));
    C.Size_41_41 = new B.Size(41, 41);
    C.Size_EWx = new B.Size(1 / 0, 46);
    C.Text_w6y = new F.Text("\u6ca1\u6709\u8bb0\u5f55", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
    C.Center_YWa = new E.Center(G.Alignment_0_0, null, null, C.Text_w6y, null);
    C.SizedBox_0Q1 = new E.SizedBox(null, 60, C.Center_YWa, null);
    C.Text_SPn = new F.Text("\u6ca1\u6709\u66f4\u591a\u6570\u636e", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
    C.Center_HZI = new E.Center(G.Alignment_0_0, null, null, C.Text_SPn, null);
    C.SizedBox_GFq = new E.SizedBox(null, 60, C.Center_HZI, null);
    C.TabAlignment_0 = new A.TabAlignment(0, "start");
    C.TabAlignment_1 = new A.TabAlignment(1, "startOffset");
    C.TabAlignment_2 = new A.TabAlignment(2, "fill");
    C.TabAlignment_3 = new A.TabAlignment(3, "center");
    C.TabBarIndicatorSize_1 = new A9.TabBarIndicatorSize(1, "label");
    C.TabIndicatorAnimation_0 = new A.TabIndicatorAnimation(0, "linear");
    C.TabIndicatorAnimation_1 = new A.TabIndicatorAnimation(1, "elastic");
    C._IndicatorType_0 = new A._IndicatorType(0, "material");
  })();
  (function lazyInitializers() {
    var _lazyFinal = hunkHelpers.lazyFinal;
    _lazyFinal($, "RefreshIndicatorState__threeQuarterTween", "$get$RefreshIndicatorState__threeQuarterTween", () => E.Tween$(0, 0.75, type$.double));
    _lazyFinal($, "RefreshIndicatorState__kDragSizeFactorLimitTween", "$get$RefreshIndicatorState__kDragSizeFactorLimitTween", () => E.Tween$(0, 1.5, type$.double));
    _lazyFinal($, "RefreshIndicatorState__oneToZeroTween", "$get$RefreshIndicatorState__oneToZeroTween", () => E.Tween$(1, 0, type$.double));
  })();
};
;
((d, h) => {
  d[h] = d.current;
  d.eventLog.push({p: "main.dart.js_221", e: "endPart", h: h});
})($__dart_deferred_initializers__, "xNX5RSsTRt+ISphi+TIdY7giLeE=");
;
//# sourceMappingURL=main.dart.js_221.part.js.map
