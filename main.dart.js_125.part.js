// Generated by dart2js (NullSafetyMode.sound, csp, intern-composite-values), the Dart to JavaScript compiler version: 3.7.2.
((s, d, e) => {
  s[d] = s[d] || {};
  s[d][e] = s[d][e] || [];
  s[d][e].push({p: "main.dart.js_125", e: "beginPart"});
})(self, "$__dart_deferred_initializers__", "eventLog");
$__dart_deferred_initializers__.current = function(hunkHelpers, init, holdersList, $) {
  var C, E, B, I,
  A = {
    TDButton$(height, isBlock, margin, onTap, size, style, text, textStyle, theme, type, width) {
      return new A.TDButton(text, width, height, size, type, theme, style, textStyle, onTap, margin, isBlock, null);
    },
    TDButtonSize: function TDButtonSize(t0, t1) {
      this.index = t0;
      this._name = t1;
    },
    TDButtonType: function TDButtonType(t0, t1) {
      this.index = t0;
      this._name = t1;
    },
    TDButtonShape: function TDButtonShape(t0, t1) {
      this.index = t0;
      this._name = t1;
    },
    TDButtonTheme: function TDButtonTheme(t0, t1) {
      this.index = t0;
      this._name = t1;
    },
    TDButtonStatus: function TDButtonStatus(t0, t1) {
      this.index = t0;
      this._name = t1;
    },
    TDButtonIconPosition: function TDButtonIconPosition(t0, t1) {
      this.index = t0;
      this._name = t1;
    },
    TDButton: function TDButton(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11) {
      var _ = this;
      _.text = t0;
      _.width = t1;
      _.height = t2;
      _.size = t3;
      _.type = t4;
      _.theme = t5;
      _.style = t6;
      _.textStyle = t7;
      _.onTap = t8;
      _.margin = t9;
      _.isBlock = t10;
      _.key = t11;
    },
    _TDButtonState: function _TDButtonState(t0) {
      var _ = this;
      _._buttonStatus = t0;
      _._framework$_element = _._widget = _._iconSize = _._td_button$_textStyle = _._td_button$_alignment = _._margin = _._td_button$_height = _._td_button$_width = _._innerDisableStyle = _._innerActiveStyle = _._innerDefaultStyle = null;
    },
    _TDButtonState_build_closure0: function _TDButtonState_build_closure0(t0) {
      this.$this = t0;
    },
    _TDButtonState_build__closure0: function _TDButtonState_build__closure0(t0) {
      this.$this = t0;
    },
    _TDButtonState_build_closure1: function _TDButtonState_build_closure1(t0) {
      this.$this = t0;
    },
    _TDButtonState_build__closure: function _TDButtonState_build__closure(t0) {
      this.$this = t0;
    },
    _TDButtonState_build___closure: function _TDButtonState_build___closure(t0) {
      this.$this = t0;
    },
    _TDButtonState_build_closure: function _TDButtonState_build_closure(t0) {
      this.$this = t0;
    },
    _TDButtonState_build__closure1: function _TDButtonState_build__closure1(t0) {
      this.$this = t0;
    },
    TDButtonStyle: function TDButtonStyle() {
      var _ = this;
      _.frameWidth = _.textColor = _.frameColor = _.backgroundColor = null;
    },
    TextAlignment: function TextAlignment(t0, t1) {
      this.index = t0;
      this._name = t1;
    },
    TDDivider: function TDDivider(t0, t1, t2, t3, t4) {
      var _ = this;
      _.color = t0;
      _.margin = t1;
      _.width = t2;
      _.height = t3;
      _.key = t4;
    },
    TDColors_get_fontGyColor3(_this) {
      var t1 = _this.__TDThemeData_colorMap_A;
      t1 === $ && C.throwLateFieldNI("colorMap");
      t1 = t1.$index(0, "fontGyColor3");
      return t1 == null ? I.Color_14p : t1;
    },
    TDColors_get_fontWhColor1(_this) {
      var t1 = _this.__TDThemeData_colorMap_A;
      t1 === $ && C.throwLateFieldNI("colorMap");
      t1 = t1.$index(0, "fontWhColor1");
      return t1 == null ? F.Color_wst : t1;
    },
    TDColors_get_fontWhColor4(_this) {
      var t1 = _this.__TDThemeData_colorMap_A;
      t1 === $ && C.throwLateFieldNI("colorMap");
      t1 = t1.$index(0, "fontWhColor4");
      return t1 == null ? D.Color_0jf : t1;
    },
    TDColors_get_whiteColor1(_this) {
      var t1 = _this.__TDThemeData_colorMap_A;
      t1 === $ && C.throwLateFieldNI("colorMap");
      t1 = t1.$index(0, "whiteColor1");
      return t1 == null ? F.Color_wst : t1;
    },
    TDColors_get_grayColor2(_this) {
      var t1 = _this.__TDThemeData_colorMap_A;
      t1 === $ && C.throwLateFieldNI("colorMap");
      t1 = t1.$index(0, "grayColor2");
      return t1 == null ? G.Color_W1W : t1;
    },
    TDColors_get_grayColor3(_this) {
      var t1 = _this.__TDThemeData_colorMap_A;
      t1 === $ && C.throwLateFieldNI("colorMap");
      t1 = t1.$index(0, "grayColor3");
      return t1 == null ? D.Color_QNZ : t1;
    },
    TDColors_get_grayColor4(_this) {
      var t1 = _this.__TDThemeData_colorMap_A;
      t1 === $ && C.throwLateFieldNI("colorMap");
      t1 = t1.$index(0, "grayColor4");
      return t1 == null ? K.Color_v5M : t1;
    },
    TDRadius_get_radiusDefault(_this) {
      var t1 = _this.__TDThemeData_radiusMap_A;
      t1 === $ && C.throwLateFieldNI("radiusMap");
      t1 = t1.$index(0, "radiusDefault");
      return t1 == null ? 6 : t1;
    }
  },
  D, K, L, M, N, G, H, F;
  C = holdersList[0];
  E = holdersList[2];
  B = holdersList[66];
  I = holdersList[179];
  A = hunkHelpers.updateHolder(holdersList[55], A);
  D = holdersList[174];
  K = holdersList[222];
  L = holdersList[131];
  M = holdersList[130];
  N = holdersList[122];
  G = holdersList[145];
  H = holdersList[136];
  F = holdersList[137];
  A.TDButtonSize.prototype = {
    _enumToString$0() {
      return "TDButtonSize." + this._name;
    }
  };
  A.TDButtonType.prototype = {
    _enumToString$0() {
      return "TDButtonType." + this._name;
    }
  };
  A.TDButtonShape.prototype = {
    _enumToString$0() {
      return "TDButtonShape." + this._name;
    }
  };
  A.TDButtonTheme.prototype = {
    _enumToString$0() {
      return "TDButtonTheme." + this._name;
    }
  };
  A.TDButtonStatus.prototype = {
    _enumToString$0() {
      return "TDButtonStatus." + this._name;
    }
  };
  A.TDButtonIconPosition.prototype = {
    _enumToString$0() {
      return "TDButtonIconPosition." + this._name;
    }
  };
  A.TDButton.prototype = {
    createState$0() {
      return new A._TDButtonState(D.TDButtonStatus_0);
    }
  };
  A._TDButtonState.prototype = {
    _updateParams$0() {
      var $async$goto = 0,
        $async$completer = C._makeAsyncAwaitCompleter(type$.dynamic),
        $async$self = this, t2, t3, t1;
      var $async$_updateParams$0 = C._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return C._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self._widget;
              t1.toString;
              $async$self._buttonStatus = D.TDButtonStatus_0;
              $async$self._innerDefaultStyle = t1.style;
              t1 = $async$self._innerDisableStyle = $async$self._innerActiveStyle = null;
              $async$self._td_button$_width = $async$self._getWidth$0();
              $async$self._td_button$_height = $async$self._getHeight$0();
              $async$self._margin = $async$self._getMargin$0();
              t2 = $async$self._widget;
              t3 = t2.isBlock;
              $async$self._td_button$_alignment = t3 ? F.Alignment_0_0 : t1;
              t1 = t2.textStyle;
              $async$self._td_button$_textStyle = t1;
              // implicit return
              return C._asyncReturn(null, $async$completer);
          }
      });
      return C._asyncStartSync($async$_updateParams$0, $async$completer);
    },
    get$style(_) {
      var _this = this;
      switch (_this._buttonStatus.index) {
        case 0:
          return _this.get$_defaultStyle();
        case 1:
          return _this.get$_activeStyle();
        case 2:
          return _this.get$_disableStyle();
      }
    },
    initState$0() {
      this.super$State$initState();
      this._updateParams$0();
    },
    build$1(context) {
      var t8, t9, display, _this = this, _null = null,
        t1 = _this._td_button$_width,
        t2 = _this._td_button$_height,
        t3 = _this._td_button$_alignment,
        t4 = _this._getPadding$0(),
        t5 = _this._margin,
        t6 = _this.get$style(0).backgroundColor,
        t7 = _this._getBorder$1(context);
      _this.get$style(0);
      t8 = H.BorderRadius$all(_this._getRadius$0());
      _this._widget.toString;
      t9 = _this._getChild$0();
      display = H.Container$(t3, t9, E.Clip_0, _null, _null, new H.BoxDecoration(t6, _null, t7, t8, _null, _null, _null, F.BoxShape_0), _null, t2, _null, t5, t4, _null, _null, t1);
      t1 = _this._widget;
      return M.GestureDetector$(_null, display, G.DragStartBehavior_1, false, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, t1.onTap, new A._TDButtonState_build_closure(_this), new A._TDButtonState_build_closure0(_this), new A._TDButtonState_build_closure1(_this), _null, _null, _null, _null, _null);
    },
    _getBorder$1(context) {
      var t1, t2, _this = this;
      if (_this.get$style(0).frameWidth != null && _this.get$style(0).frameWidth !== 0) {
        t1 = _this.get$style(0).frameColor;
        if (t1 == null)
          t1 = A.TDColors_get_grayColor3(B.TDTheme_of(context));
        t2 = _this.get$style(0).frameWidth;
        t2.toString;
        return N.Border_Border$all(t1, t2);
      }
      return null;
    },
    _getChild$0() {
      var children, t1, t2, t3, t4, _this = this, _null = null,
        icon = _this.getIcon$0();
      _this._widget.toString;
      children = C._setArrayType([], type$.JSArray_Widget);
      t1 = icon != null;
      if (t1)
        _this._widget.toString;
      if (t1)
        E.JSArray_methods.add$1(children, icon);
      t2 = _this._widget.text;
      t3 = _this._getTextFont$0();
      t4 = _this.get$style(0).textColor;
      if (t4 == null) {
        t4 = _this._framework$_element;
        t4.toString;
        t4 = B.TDColors_get_fontGyColor1(B.TDTheme_of(t4));
      }
      E.JSArray_methods.add$1(children, B.TDText$(t2, _null, t3, _null, _null, true, false, false, F.Color_wst, _null, _null, _null, _null, _null, _null, _null, _this._td_button$_textStyle, _null, t4, _null, _null, _null, _null));
      if (t1)
        _this._widget.toString;
      if (children.length === 2) {
        _this._widget.toString;
        E.JSArray_methods.insert$2(children, 1, new H.SizedBox(8, _null, _null, _null));
      }
      return L.Row$(children, G.CrossAxisAlignment_2, _null, G.MainAxisAlignment_2, G.MainAxisSize_0, 0, _null, _null, G.VerticalDirection_1);
    },
    getIcon$0() {
      this._widget.toString;
      return null;
    },
    _getTextFont$0() {
      var t1, _this = this,
        _s7_ = "fontMap",
        _s13_ = "fontMarkLarge",
        _s14_ = "fontMarkMedium";
      switch (_this._widget.size.index) {
        case 0:
          t1 = _this._framework$_element;
          t1.toString;
          t1 = B.TDTheme_of(t1).__TDThemeData_fontMap_A;
          t1 === $ && C.throwLateFieldNI(_s7_);
          t1 = t1.$index(0, _s13_);
          return t1 == null ? B.Font$(F.FontWeight_3, 24, 16) : t1;
        case 1:
          t1 = _this._framework$_element;
          t1.toString;
          t1 = B.TDTheme_of(t1).__TDThemeData_fontMap_A;
          t1 === $ && C.throwLateFieldNI(_s7_);
          t1 = t1.$index(0, _s13_);
          return t1 == null ? B.Font$(F.FontWeight_3, 24, 16) : t1;
        case 2:
          t1 = _this._framework$_element;
          t1.toString;
          t1 = B.TDTheme_of(t1).__TDThemeData_fontMap_A;
          t1 === $ && C.throwLateFieldNI(_s7_);
          t1 = t1.$index(0, _s14_);
          return t1 == null ? B.Font$(F.FontWeight_3, 22, 14) : t1;
        case 3:
          t1 = _this._framework$_element;
          t1.toString;
          t1 = B.TDTheme_of(t1).__TDThemeData_fontMap_A;
          t1 === $ && C.throwLateFieldNI(_s7_);
          t1 = t1.$index(0, _s14_);
          return t1 == null ? B.Font$(F.FontWeight_3, 22, 14) : t1;
      }
    },
    _getWidth$0() {
      this._widget.toString;
      return null;
    },
    _getHeight$0() {
      var t1 = this._widget,
        t2 = t1.height;
      if (t2 != null)
        return t2;
      switch (t1.size.index) {
        case 0:
          return 48;
        case 1:
          return 40;
        case 2:
          return 32;
        case 3:
          return 28;
      }
    },
    _getMargin$0() {
      var t1 = this._widget,
        t2 = t1.margin;
      if (t2 != null)
        return t2;
      return t1.isBlock ? G.EdgeInsets_16_0_16_0 : null;
    },
    _getPadding$0() {
      var horizontalPadding, verticalPadding, _this = this,
        t1 = _this._widget;
      switch (t1.size.index) {
        case 0:
          horizontalPadding = 20;
          verticalPadding = 12;
          break;
        case 1:
          horizontalPadding = 16;
          verticalPadding = 8;
          break;
        case 2:
          horizontalPadding = 12;
          verticalPadding = 5;
          break;
        case 3:
          horizontalPadding = 8;
          verticalPadding = 3;
          break;
        default:
          horizontalPadding = null;
          verticalPadding = null;
      }
      if (_this.get$style(0).frameWidth != null && _this.get$style(0).frameWidth !== 0) {
        t1 = _this.get$style(0).frameWidth;
        t1.toString;
        if (typeof horizontalPadding !== "number")
          return horizontalPadding.$sub();
        horizontalPadding -= t1;
        t1 = _this.get$style(0).frameWidth;
        t1.toString;
        if (typeof verticalPadding !== "number")
          return verticalPadding.$sub();
        verticalPadding -= t1;
        if (horizontalPadding < 0)
          horizontalPadding = 0;
        if (verticalPadding < 0)
          verticalPadding = 0;
      }
      return new C.EdgeInsets(horizontalPadding, verticalPadding, horizontalPadding, verticalPadding);
    },
    didUpdateWidget$1(oldWidget) {
      this.super$State$didUpdateWidget(type$.TDButton._as(oldWidget));
      this._updateParams$0();
    },
    _generateInnerStyle$0() {
      var t2, t3, _this = this,
        t1 = _this._widget;
      switch (t1.type.index) {
        case 0:
          t2 = _this._framework$_element;
          t2.toString;
          t3 = new A.TDButtonStyle();
          t3.TDButtonStyle$generateFillStyleByTheme$3(t2, t1.theme, _this._buttonStatus);
          return t3;
        case 1:
          t2 = _this._framework$_element;
          t2.toString;
          t3 = new A.TDButtonStyle();
          t3.TDButtonStyle$generateOutlineStyleByTheme$3(t2, t1.theme, _this._buttonStatus);
          return t3;
        case 2:
          t2 = _this._framework$_element;
          t2.toString;
          t3 = new A.TDButtonStyle();
          t3.TDButtonStyle$generateTextStyleByTheme$3(t2, t1.theme, _this._buttonStatus);
          return t3;
        case 3:
          t2 = _this._framework$_element;
          t2.toString;
          t3 = new A.TDButtonStyle();
          t3.TDButtonStyle$generateGhostStyleByTheme$3(t2, t1.theme, _this._buttonStatus);
          return t3;
      }
    },
    _getRadius$0() {
      this._widget.toString;
      switch (0) {
        case 0:
        case 2:
          var t1 = this._framework$_element;
          t1.toString;
          t1 = A.TDRadius_get_radiusDefault(B.TDTheme_of(t1));
          return new C.Radius(t1, t1);
      }
    },
    get$_defaultStyle() {
      var _this = this,
        t1 = _this._innerDefaultStyle;
      if (t1 != null)
        return t1;
      _this._widget.toString;
      t1 = _this._generateInnerStyle$0();
      return _this._innerDefaultStyle = t1;
    },
    get$_activeStyle() {
      var _this = this,
        t1 = _this._innerActiveStyle;
      if (t1 != null)
        return t1;
      _this._widget.toString;
      t1 = _this._generateInnerStyle$0();
      return _this._innerActiveStyle = t1;
    },
    get$_disableStyle() {
      var _this = this,
        t1 = _this._innerDisableStyle;
      if (t1 != null)
        return t1;
      _this._widget.toString;
      t1 = _this._generateInnerStyle$0();
      return _this._innerDisableStyle = t1;
    }
  };
  A.TDButtonStyle.prototype = {
    TDButtonStyle$generateFillStyleByTheme$3(context, theme, $status) {
      var t1, _this = this;
      switch (theme.index) {
        case 1:
          _this.textColor = A.TDColors_get_fontWhColor1(B.TDTheme_of(context));
          t1 = _this.backgroundColor = _this._getBrandColor$2(context, $status);
          break;
        case 2:
          _this.textColor = A.TDColors_get_fontWhColor1(B.TDTheme_of(context));
          t1 = _this.backgroundColor = _this._getErrorColor$2(context, $status);
          break;
        case 3:
          _this.textColor = _this._getBrandColor$2(context, $status);
          t1 = _this.backgroundColor = _this._getLightColor$2(context, $status);
          break;
        case 0:
        default:
          _this.textColor = _this._getDefaultTextColor$2(context, $status);
          t1 = _this.backgroundColor = _this._getDefaultBgColor$2(context, $status);
      }
      _this.frameColor = t1;
    },
    TDButtonStyle$generateOutlineStyleByTheme$3(context, theme, $status) {
      var _this = this;
      switch (theme.index) {
        case 1:
          _this.textColor = _this._getBrandColor$2(context, $status);
          _this.backgroundColor = $status === D.TDButtonStatus_1 ? A.TDColors_get_grayColor3(B.TDTheme_of(context)) : A.TDColors_get_whiteColor1(B.TDTheme_of(context));
          _this.frameColor = _this.textColor;
          break;
        case 2:
          _this.textColor = _this._getErrorColor$2(context, $status);
          _this.backgroundColor = $status === D.TDButtonStatus_1 ? A.TDColors_get_grayColor3(B.TDTheme_of(context)) : A.TDColors_get_whiteColor1(B.TDTheme_of(context));
          _this.frameColor = _this.textColor;
          break;
        case 3:
          _this.textColor = _this._getBrandColor$2(context, $status);
          _this.backgroundColor = _this._getLightColor$2(context, $status);
          _this.frameColor = _this.textColor;
          break;
        case 0:
        default:
          _this.textColor = _this._getDefaultTextColor$2(context, $status);
          _this.backgroundColor = _this._getOutlineDefaultBgColor$2(context, $status);
          _this.frameColor = A.TDColors_get_grayColor4(B.TDTheme_of(context));
      }
      _this.frameWidth = 1;
    },
    TDButtonStyle$generateTextStyleByTheme$3(context, theme, $status) {
      var t1, _this = this;
      switch (theme.index) {
        case 1:
          _this.textColor = _this._getBrandColor$2(context, $status);
          t1 = _this.backgroundColor = $status === D.TDButtonStatus_1 ? A.TDColors_get_grayColor3(B.TDTheme_of(context)) : E.Color_Edl;
          break;
        case 2:
          _this.textColor = _this._getErrorColor$2(context, $status);
          t1 = _this.backgroundColor = $status === D.TDButtonStatus_1 ? A.TDColors_get_grayColor3(B.TDTheme_of(context)) : E.Color_Edl;
          break;
        case 3:
          _this.textColor = _this._getBrandColor$2(context, $status);
          t1 = _this.backgroundColor = $status === D.TDButtonStatus_1 ? A.TDColors_get_grayColor3(B.TDTheme_of(context)) : E.Color_Edl;
          break;
        case 0:
        default:
          _this.textColor = _this._getDefaultTextColor$2(context, $status);
          t1 = _this.backgroundColor = $status === D.TDButtonStatus_1 ? A.TDColors_get_grayColor3(B.TDTheme_of(context)) : E.Color_Edl;
      }
      _this.frameColor = t1;
    },
    TDButtonStyle$generateGhostStyleByTheme$3(context, theme, $status) {
      var t1, _this = this;
      switch (theme.index) {
        case 1:
          t1 = _this.textColor = $status === D.TDButtonStatus_2 ? A.TDColors_get_fontWhColor4(B.TDTheme_of(context)) : _this._getBrandColor$2(context, $status);
          break;
        case 2:
          t1 = _this.textColor = $status === D.TDButtonStatus_2 ? A.TDColors_get_fontWhColor4(B.TDTheme_of(context)) : _this._getErrorColor$2(context, $status);
          break;
        case 3:
          t1 = _this.textColor = $status === D.TDButtonStatus_2 ? A.TDColors_get_fontWhColor4(B.TDTheme_of(context)) : _this._getBrandColor$2(context, $status);
          break;
        case 0:
        default:
          switch ($status.index) {
            case 1:
              t1 = B.TDTheme_of(context).__TDThemeData_colorMap_A;
              t1 === $ && C.throwLateFieldNI("colorMap");
              t1 = t1.$index(0, "fontWhColor2");
              if (t1 == null)
                t1 = D.Color_1T5;
              _this.textColor = t1;
              break;
            case 2:
              t1 = A.TDColors_get_fontWhColor4(B.TDTheme_of(context));
              _this.textColor = t1;
              break;
            default:
              t1 = A.TDColors_get_fontWhColor1(B.TDTheme_of(context));
              _this.textColor = t1;
          }
      }
      _this.backgroundColor = E.Color_Edl;
      _this.frameColor = t1;
      _this.frameWidth = 1;
    },
    _getBrandColor$2(context, $status) {
      switch ($status.index) {
        case 0:
          return B.TDColors_get_brandNormalColor(B.TDTheme_of(context));
        case 1:
          return B.TDColors_get_brandClickColor(B.TDTheme_of(context));
        case 2:
          return B.TDColors_get_brandDisabledColor(B.TDTheme_of(context));
      }
    },
    _getLightColor$2(context, $status) {
      var t1, t2,
        _s8_ = "colorMap";
      switch ($status.index) {
        case 0:
        case 2:
          t1 = B.TDTheme_of(context).__TDThemeData_colorMap_A;
          t1 === $ && C.throwLateFieldNI(_s8_);
          t2 = t1.$index(0, "brandLightColor");
          if (t2 == null) {
            t1 = t1.$index(0, "brandColor1");
            if (t1 == null)
              t1 = D.Color_6mf;
          } else
            t1 = t2;
          return t1;
        case 1:
          t1 = B.TDTheme_of(context).__TDThemeData_colorMap_A;
          t1 === $ && C.throwLateFieldNI(_s8_);
          t2 = t1.$index(0, "brandFocusColor");
          if (t2 == null) {
            t1 = t1.$index(0, "brandColor2");
            if (t1 == null)
              t1 = D.Color_LS3;
          } else
            t1 = t2;
          return t1;
      }
    },
    _getErrorColor$2(context, $status) {
      var t1, t2,
        _s8_ = "colorMap";
      switch ($status.index) {
        case 0:
          t1 = B.TDTheme_of(context);
          t2 = t1.__TDThemeData_colorMap_A;
          t2 === $ && C.throwLateFieldNI(_s8_);
          t2 = t2.$index(0, "errorNormalColor");
          return t2 == null ? B.TDColors_get_errorColor6(t1) : t2;
        case 1:
          t1 = B.TDTheme_of(context);
          t2 = t1.__TDThemeData_colorMap_A;
          t2 === $ && C.throwLateFieldNI(_s8_);
          t2 = t2.$index(0, "errorClickColor");
          return t2 == null ? B.TDColors_get_errorColor7(t1) : t2;
        case 2:
          return B.TDColors_get_errorDisabledColor(B.TDTheme_of(context));
      }
    },
    _getDefaultBgColor$2(context, $status) {
      var t1;
      switch ($status.index) {
        case 0:
          return A.TDColors_get_grayColor3(B.TDTheme_of(context));
        case 1:
          t1 = B.TDTheme_of(context).__TDThemeData_colorMap_A;
          t1 === $ && C.throwLateFieldNI("colorMap");
          t1 = t1.$index(0, "grayColor5");
          return t1 == null ? D.Color_tGz : t1;
        case 2:
          return A.TDColors_get_grayColor2(B.TDTheme_of(context));
      }
    },
    _getDefaultTextColor$2(context, $status) {
      switch ($status.index) {
        case 0:
        case 1:
          return B.TDColors_get_fontGyColor1(B.TDTheme_of(context));
        case 2:
          return B.TDColors_get_fontGyColor4(B.TDTheme_of(context));
      }
    },
    _getOutlineDefaultBgColor$2(context, $status) {
      switch ($status.index) {
        case 0:
          return A.TDColors_get_whiteColor1(B.TDTheme_of(context));
        case 1:
          return A.TDColors_get_grayColor3(B.TDTheme_of(context));
        case 2:
          return A.TDColors_get_grayColor2(B.TDTheme_of(context));
      }
    }
  };
  A.TextAlignment.prototype = {
    _enumToString$0() {
      return "TextAlignment." + this._name;
    }
  };
  A.TDDivider.prototype = {
    build$1(context) {
      var _this = this,
        t1 = _this._buildLine$5$color$height$margin$width(context, _this.color, _this.height, _this.margin, _this.width);
      return t1;
    },
    _buildLine$5$color$height$margin$width(context, color, height, margin, width) {
      var _null = null,
        t1 = height == null ? 0.5 : height;
      return H.Container$(_null, _null, E.Clip_0, color == null ? A.TDColors_get_grayColor3(B.TDTheme_of(context)) : color, _null, _null, _null, t1, _null, margin, _null, _null, _null, width);
    }
  };
  var typesOffset = hunkHelpers.updateTypes(["~(TapDownDetails)", "~(TapUpDetails)"]);
  A._TDButtonState_build_closure0.prototype = {
    call$1(details) {
      var t1 = this.$this;
      t1._widget.toString;
      t1.setState$1(new A._TDButtonState_build__closure0(t1));
    },
    $signature: typesOffset + 0
  };
  A._TDButtonState_build__closure0.prototype = {
    call$0() {
      this.$this._buttonStatus = D.TDButtonStatus_1;
    },
    $signature: 0
  };
  A._TDButtonState_build_closure1.prototype = {
    call$1(details) {
      C.Future_Future$delayed(E.Duration_100000, new A._TDButtonState_build__closure(this.$this), type$.Null);
    },
    $signature: typesOffset + 1
  };
  A._TDButtonState_build__closure.prototype = {
    call$0() {
      var t1 = this.$this,
        t2 = t1._framework$_element != null;
      if (t2)
        t1._widget.toString;
      if (t2)
        t1.setState$1(new A._TDButtonState_build___closure(t1));
    },
    $signature: 3
  };
  A._TDButtonState_build___closure.prototype = {
    call$0() {
      this.$this._buttonStatus = D.TDButtonStatus_0;
    },
    $signature: 0
  };
  A._TDButtonState_build_closure.prototype = {
    call$0() {
      var t1 = this.$this;
      t1._widget.toString;
      t1.setState$1(new A._TDButtonState_build__closure1(t1));
    },
    $signature: 0
  };
  A._TDButtonState_build__closure1.prototype = {
    call$0() {
      this.$this._buttonStatus = D.TDButtonStatus_0;
    },
    $signature: 0
  };
  (function inheritance() {
    var _inheritMany = hunkHelpers.inheritMany,
      _inherit = hunkHelpers.inherit;
    _inheritMany(C._Enum, [A.TDButtonSize, A.TDButtonType, A.TDButtonShape, A.TDButtonTheme, A.TDButtonStatus, A.TDButtonIconPosition, A.TextAlignment]);
    _inherit(A.TDButton, C.StatefulWidget);
    _inherit(A._TDButtonState, C.State);
    _inheritMany(C.Closure, [A._TDButtonState_build_closure0, A._TDButtonState_build_closure1]);
    _inheritMany(C.Closure0Args, [A._TDButtonState_build__closure0, A._TDButtonState_build__closure, A._TDButtonState_build___closure, A._TDButtonState_build_closure, A._TDButtonState_build__closure1]);
    _inherit(A.TDButtonStyle, C.Object);
    _inherit(A.TDDivider, C.StatelessWidget);
  })();
  C._Universe_addRules(init.typeUniverse, JSON.parse('{"TDButton":{"StatefulWidget":[],"Widget":[],"DiagnosticableTree":[]},"TDButtonSize":{"Enum":[]},"TDButtonType":{"Enum":[]},"TDButtonShape":{"Enum":[]},"TDButtonTheme":{"Enum":[]},"TDButtonStatus":{"Enum":[]},"TDButtonIconPosition":{"Enum":[]},"_TDButtonState":{"State":["TDButton"],"State.T":"TDButton"},"TextAlignment":{"Enum":[]},"TDDivider":{"StatelessWidget":[],"Widget":[],"DiagnosticableTree":[]}}'));
  var type$ = {
    JSArray_Widget: C.findType("JSArray<Widget>"),
    Null: C.findType("Null"),
    TDButton: C.findType("TDButton"),
    dynamic: C.findType("@")
  };
  (function constants() {
    D.Color_0jf = new C.Color(0.2196078431372549, 1, 1, 1, E.ColorSpace_0);
    D.Color_1T5 = new C.Color(0.5490196078431373, 1, 1, 1, E.ColorSpace_0);
    D.Color_6mf = new C.Color(1, 0.9490196078431372, 0.9529411764705882, 1, E.ColorSpace_0);
    D.Color_LS3 = new C.Color(1, 0.8509803921568627, 0.8823529411764706, 1, E.ColorSpace_0);
    D.Color_QNZ = new C.Color(1, 0.9058823529411765, 0.9058823529411765, 0.9058823529411765, E.ColorSpace_0);
    D.Color_tGz = new C.Color(1, 0.7725490196078432, 0.7725490196078432, 0.7725490196078432, E.ColorSpace_0);
    D.TDButtonIconPosition_0 = new A.TDButtonIconPosition(0, "left");
    D.TDButtonShape_0 = new A.TDButtonShape(0, "rectangle");
    D.TDButtonSize_0 = new A.TDButtonSize(0, "large");
    D.TDButtonSize_1 = new A.TDButtonSize(1, "medium");
    D.TDButtonStatus_0 = new A.TDButtonStatus(0, "defaultState");
    D.TDButtonStatus_1 = new A.TDButtonStatus(1, "active");
    D.TDButtonStatus_2 = new A.TDButtonStatus(2, "disable");
    D.TDButtonTheme_1 = new A.TDButtonTheme(1, "primary");
    D.TDButtonTheme_3 = new A.TDButtonTheme(3, "light");
    D.TDButtonType_0 = new A.TDButtonType(0, "fill");
    D.TextAlignment_1 = new A.TextAlignment(1, "center");
  })();
};
;
((d, h) => {
  d[h] = d.current;
  d.eventLog.push({p: "main.dart.js_125", e: "endPart", h: h});
})($__dart_deferred_initializers__, "+kJVG0QU9vNGE8ZBWbpOzG6MCVY=");
;
//# sourceMappingURL=main.dart.js_125.part.js.map
