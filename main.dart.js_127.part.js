// Generated by dart2js (NullSafetyMode.sound, csp, intern-composite-values), the Dart to JavaScript compiler version: 3.7.2.
((s, d, e) => {
  s[d] = s[d] || {};
  s[d][e] = s[d][e] || [];
  s[d][e].push({p: "main.dart.js_127", e: "beginPart"});
})(self, "$__dart_deferred_initializers__", "eventLog");
$__dart_deferred_initializers__.current = function(hunkHelpers, init, holdersList, $) {
  var B, D,
  A = {CupertinoScrollbar: function CupertinoScrollbar(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14) {
      var _ = this;
      _.thicknessWhileDragging = t0;
      _.radiusWhileDragging = t1;
      _.child = t2;
      _.controller = t3;
      _.thumbVisibility = t4;
      _.radius = t5;
      _.thickness = t6;
      _.trackVisibility = t7;
      _.fadeDuration = t8;
      _.timeToFade = t9;
      _.notificationPredicate = t10;
      _.interactive = t11;
      _.scrollbarOrientation = t12;
      _.mainAxisMargin = t13;
      _.key = t14;
    }, _CupertinoScrollbarState: function _CupertinoScrollbarState(t0, t1, t2, t3) {
      var _ = this;
      _.___CupertinoScrollbarState__thicknessAnimationController_A = $;
      _._pressStartAxisPosition = 0;
      _._fadeoutTimer = _._cachedController = _._startDragThumbOffset = _._lastDragUpdateOffset = _._startDragScrollbarAxisOffset = null;
      _.__RawScrollbarState__fadeoutOpacityAnimation_A = _.__RawScrollbarState__fadeoutAnimationController_A = $;
      _._scrollbarPainterKey = t0;
      _._hoverIsActive = false;
      _._thumbDrag = null;
      _._maxScrollExtentPermitsScrolling = false;
      _._axis = _._thumbHold = null;
      _._scrollbar$_gestureDetectorKey = t1;
      _.__RawScrollbarState_scrollbarPainter_F = $;
      _.TickerProviderStateMixin__tickers = t2;
      _.TickerProviderStateMixin__tickerModeNotifier = t3;
      _._framework$_element = _._widget = null;
    }, _CupertinoScrollbarState_initState_closure: function _CupertinoScrollbarState_initState_closure(t0) {
      this.$this = t0;
    }, _CupertinoScrollbarState_handleThumbPress_closure: function _CupertinoScrollbarState_handleThumbPress_closure() {
    },
    Scrollbar$(child, controller) {
      return new A.Scrollbar(child, controller, null);
    },
    Scrollbar: function Scrollbar(t0, t1, t2) {
      this.child = t0;
      this.controller = t1;
      this.key = t2;
    },
    _MaterialScrollbar: function _MaterialScrollbar(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12) {
      var _ = this;
      _.child = t0;
      _.controller = t1;
      _.thumbVisibility = t2;
      _.radius = t3;
      _.thickness = t4;
      _.trackVisibility = t5;
      _.fadeDuration = t6;
      _.timeToFade = t7;
      _.notificationPredicate = t8;
      _.interactive = t9;
      _.scrollbarOrientation = t10;
      _.mainAxisMargin = t11;
      _.key = t12;
    },
    _MaterialScrollbarState: function _MaterialScrollbarState(t0, t1, t2, t3) {
      var _ = this;
      _.___MaterialScrollbarState__hoverAnimationController_A = $;
      _._scrollbar0$_hoverIsActive = _._dragIsActive = false;
      _.___MaterialScrollbarState__useAndroidScrollbar_A = _.___MaterialScrollbarState__scrollbarTheme_A = _.___MaterialScrollbarState__colorScheme_A = $;
      _._fadeoutTimer = _._cachedController = _._startDragThumbOffset = _._lastDragUpdateOffset = _._startDragScrollbarAxisOffset = null;
      _.__RawScrollbarState__fadeoutOpacityAnimation_A = _.__RawScrollbarState__fadeoutAnimationController_A = $;
      _._scrollbarPainterKey = t0;
      _._hoverIsActive = false;
      _._thumbDrag = null;
      _._maxScrollExtentPermitsScrolling = false;
      _._axis = _._thumbHold = null;
      _._scrollbar$_gestureDetectorKey = t1;
      _.__RawScrollbarState_scrollbarPainter_F = $;
      _.TickerProviderStateMixin__tickers = t2;
      _.TickerProviderStateMixin__tickerModeNotifier = t3;
      _._framework$_element = _._widget = null;
    },
    _MaterialScrollbarState__trackVisibility_closure: function _MaterialScrollbarState__trackVisibility_closure(t0) {
      this.$this = t0;
    },
    _MaterialScrollbarState__thumbColor_closure: function _MaterialScrollbarState__thumbColor_closure(t0, t1, t2, t3) {
      var _ = this;
      _.$this = t0;
      _.dragColor = t1;
      _.hoverColor = t2;
      _.idleColor = t3;
    },
    _MaterialScrollbarState__trackColor_closure: function _MaterialScrollbarState__trackColor_closure(t0, t1, t2) {
      this.$this = t0;
      this.brightness = t1;
      this.onSurface = t2;
    },
    _MaterialScrollbarState__trackBorderColor_closure: function _MaterialScrollbarState__trackBorderColor_closure(t0, t1, t2) {
      this.$this = t0;
      this.brightness = t1;
      this.onSurface = t2;
    },
    _MaterialScrollbarState__thickness_closure: function _MaterialScrollbarState__thickness_closure(t0) {
      this.$this = t0;
    },
    _MaterialScrollbarState_initState_closure: function _MaterialScrollbarState_initState_closure(t0) {
      this.$this = t0;
    },
    _MaterialScrollbarState_handleThumbPressStart_closure: function _MaterialScrollbarState_handleThumbPressStart_closure(t0) {
      this.$this = t0;
    },
    _MaterialScrollbarState_handleThumbPressEnd_closure: function _MaterialScrollbarState_handleThumbPressEnd_closure(t0) {
      this.$this = t0;
    },
    _MaterialScrollbarState_handleHover_closure: function _MaterialScrollbarState_handleHover_closure(t0) {
      this.$this = t0;
    },
    _MaterialScrollbarState_handleHover_closure0: function _MaterialScrollbarState_handleHover_closure0(t0) {
      this.$this = t0;
    },
    _MaterialScrollbarState_handleHoverExit_closure: function _MaterialScrollbarState_handleHoverExit_closure(t0) {
      this.$this = t0;
    },
    HapticFeedback_mediumImpact() {
      var $async$goto = 0,
        $async$completer = B._makeAsyncAwaitCompleter(type$.void);
      var $async$HapticFeedback_mediumImpact = B._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return B._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return B._asyncAwait(D.OptionalMethodChannel_ZFR.invokeMethod$1$2("HapticFeedback.vibrate", "HapticFeedbackType.mediumImpact", type$.void), $async$HapticFeedback_mediumImpact);
            case 2:
              // returning from await.
              // implicit return
              return B._asyncReturn(null, $async$completer);
          }
      });
      return B._asyncStartSync($async$HapticFeedback_mediumImpact, $async$completer);
    }
  },
  C, I, F, L, M, N, E, H, G, O, K, P;
  B = holdersList[0];
  D = holdersList[2];
  A = hunkHelpers.updateHolder(holdersList[72], A);
  C = holdersList[235];
  I = holdersList[149];
  F = holdersList[130];
  L = holdersList[141];
  M = holdersList[127];
  N = holdersList[150];
  E = holdersList[135];
  H = holdersList[136];
  G = holdersList[117];
  O = holdersList[168];
  K = holdersList[196];
  P = holdersList[137];
  A.CupertinoScrollbar.prototype = {
    createState$0() {
      var _null = null;
      return new A._CupertinoScrollbarState(new E.LabeledGlobalKey(_null, type$.LabeledGlobalKey_State_StatefulWidget), new E.LabeledGlobalKey(_null, type$.LabeledGlobalKey_RawGestureDetectorState), _null, _null);
    }
  };
  A._CupertinoScrollbarState.prototype = {
    initState$0() {
      var t1, t2, _this = this;
      _this.super$RawScrollbarState$initState();
      t1 = _this.___CupertinoScrollbarState__thicknessAnimationController_A = H.AnimationController$(null, D.Duration_100000, null, null, _this);
      t2 = type$.void_Function._as(new A._CupertinoScrollbarState_initState_closure(_this));
      t1.didRegisterListener$0();
      t1.AnimationLocalListenersMixin__listeners.add$1(0, t2);
    },
    updateScrollbarPainter$0() {
      var t2, t3, t4, _this = this,
        t1 = _this.__RawScrollbarState_scrollbarPainter_F;
      t1 === $ && B.throwLateFieldNI("scrollbarPainter");
      t2 = _this._framework$_element;
      t2.toString;
      t2 = C.CupertinoDynamicColor_7gJ.resolveFrom$1(t2);
      t1.set$color(0, t2);
      t1.set$textDirection(_this._framework$_element.dependOnInheritedWidgetOfExactType$1$0(type$.Directionality).textDirection);
      t2 = _this._widget;
      t3 = t2.thickness;
      t3.toString;
      t4 = _this.___CupertinoScrollbarState__thicknessAnimationController_A;
      t4 === $ && B.throwLateFieldNI("_thicknessAnimationController");
      t4 = t4.__AnimationController__value_A;
      t4 === $ && B.throwLateFieldNI("_value");
      t1.set$thickness(t3 + t4 * (t2.thicknessWhileDragging - t3));
      t1.set$mainAxisMargin(_this._widget.mainAxisMargin);
      t1.set$crossAxisMargin(3);
      t3 = _this._widget;
      t2 = t3.radius;
      t3 = t3.radiusWhileDragging;
      t4 = _this.___CupertinoScrollbarState__thicknessAnimationController_A.__AnimationController__value_A;
      t4 === $ && B.throwLateFieldNI("_value");
      t4 = H.Radius_lerp(t2, t3, t4);
      t4.toString;
      t1.set$radius(t4);
      t4 = _this._framework$_element;
      t4.toString;
      t1.set$padding(0, B.InheritedModel_inheritFrom(t4, D._MediaQueryAspect_6, type$.MediaQuery).data.padding);
      t1.set$minLength(0, 36);
      t1.set$minOverscrollLength(8);
      t1.set$scrollbarOrientation(_this._widget.scrollbarOrientation);
    },
    handleThumbPressStart$1(localPosition) {
      var direction, t1;
      this.super$RawScrollbarState$handleThumbPressStart(localPosition);
      direction = this._axis;
      if (direction == null)
        return;
      switch (direction.index) {
        case 1:
          t1 = localPosition._dy;
          break;
        case 0:
          t1 = localPosition._dx;
          break;
        default:
          t1 = null;
      }
      this.set$_pressStartAxisPosition(t1);
    },
    handleThumbPress$0() {
      if (this._axis == null)
        return;
      this.super$RawScrollbarState$handleThumbPress();
      var t1 = this.___CupertinoScrollbarState__thicknessAnimationController_A;
      t1 === $ && B.throwLateFieldNI("_thicknessAnimationController");
      t1.forward$0(0).then$1$1(0, new A._CupertinoScrollbarState_handleThumbPress_closure(), type$.void);
    },
    handleThumbPressEnd$2(localPosition, velocity) {
      var t1, _0_1, axisVelocity, _0_2, axisPosition, _this = this,
        direction = _this._axis;
      if (direction == null)
        return;
      t1 = _this.___CupertinoScrollbarState__thicknessAnimationController_A;
      t1 === $ && B.throwLateFieldNI("_thicknessAnimationController");
      t1.reverse$0(0);
      _this.super$RawScrollbarState$handleThumbPressEnd(localPosition, velocity);
      switch (direction.index) {
        case 0:
          t1 = new B._Record_2(localPosition._dx, velocity.pixelsPerSecond._dx);
          break;
        case 1:
          t1 = new B._Record_2(localPosition._dy, velocity.pixelsPerSecond._dy);
          break;
        default:
          t1 = null;
      }
      _0_1 = t1._0;
      axisVelocity = null;
      _0_2 = t1._1;
      axisVelocity = _0_2;
      axisPosition = _0_1;
      if (axisPosition !== _this._pressStartAxisPosition) {
        if (typeof axisVelocity !== "number")
          return axisVelocity.abs$0();
        t1 = Math.abs(axisVelocity) < 10;
      } else
        t1 = false;
      if (t1)
        A.HapticFeedback_mediumImpact();
    },
    handleTrackTapDown$1(details) {
      var t1, t2;
      type$.TapDownDetails._as(details);
      t1 = this._framework$_element;
      t1.toString;
      t1 = F.ScrollConfiguration_of(t1);
      t2 = this._framework$_element;
      t2.toString;
      if (t1.getPlatform$1(t2) !== D.TargetPlatform_2)
        this.super$RawScrollbarState$handleTrackTapDown(details);
    },
    dispose$0() {
      var t1 = this.___CupertinoScrollbarState__thicknessAnimationController_A;
      t1 === $ && B.throwLateFieldNI("_thicknessAnimationController");
      t1.dispose$0();
      this.super$RawScrollbarState$dispose();
    },
    set$_pressStartAxisPosition(_pressStartAxisPosition) {
      this._pressStartAxisPosition = B._asDouble(_pressStartAxisPosition);
    }
  };
  A.Scrollbar.prototype = {
    build$1(context) {
      var _this = this, _null = null;
      if (E.Theme_of(context).platform === D.TargetPlatform_2)
        return new A.CupertinoScrollbar(8, P.Radius_4_4, _this.child, _this.controller, false, C.Radius_rid, 3, _null, O.Duration_250000, C.Duration_1200000, F.scroll_notification__defaultScrollNotificationPredicate$closure(), _null, _null, 3, _null);
      return new A._MaterialScrollbar(_this.child, _this.controller, _null, _null, _null, _null, D.Duration_300000, N.Duration_600000, F.scroll_notification__defaultScrollNotificationPredicate$closure(), _null, _null, 0, _null);
    }
  };
  A._MaterialScrollbar.prototype = {
    createState$0() {
      var _null = null;
      return new A._MaterialScrollbarState(new E.LabeledGlobalKey(_null, type$.LabeledGlobalKey_State_StatefulWidget), new E.LabeledGlobalKey(_null, type$.LabeledGlobalKey_RawGestureDetectorState), _null, _null);
    }
  };
  A._MaterialScrollbarState.prototype = {
    get$showScrollbar() {
      var t1 = this._widget.thumbVisibility;
      if (t1 == null) {
        t1 = this.___MaterialScrollbarState__scrollbarTheme_A;
        t1 === $ && B.throwLateFieldNI("_scrollbarTheme");
        t1 = t1.thumbVisibility;
        t1 = t1 == null ? null : t1.resolve$1(this.get$_states());
      }
      return t1 === true;
    },
    get$enableGestures() {
      this._widget.toString;
      var t1 = this.___MaterialScrollbarState__scrollbarTheme_A;
      t1 === $ && B.throwLateFieldNI("_scrollbarTheme");
      t1 = t1.interactive;
      if (t1 == null) {
        t1 = this.___MaterialScrollbarState__useAndroidScrollbar_A;
        t1 === $ && B.throwLateFieldNI("_useAndroidScrollbar");
        t1 = !t1;
      }
      return t1;
    },
    get$_trackVisibility() {
      return new G._WidgetStatePropertyWith(new A._MaterialScrollbarState__trackVisibility_closure(this), type$._WidgetStatePropertyWith_bool);
    },
    get$_states() {
      var t1 = B.LinkedHashSet_LinkedHashSet$_empty(type$.WidgetState);
      if (this._dragIsActive)
        t1.add$1(0, K.WidgetState_3);
      if (this._scrollbar0$_hoverIsActive)
        t1.add$1(0, I.WidgetState_0);
      return t1;
    },
    get$_thumbColor() {
      var onSurface, dragColor, hoverColor, idleColor, _this = this,
        _s20_ = "_useAndroidScrollbar",
        t1 = _this.___MaterialScrollbarState__colorScheme_A;
      t1 === $ && B.throwLateFieldNI("_colorScheme");
      onSurface = t1.onSurface;
      dragColor = B._Cell$named("dragColor");
      hoverColor = B._Cell$named("hoverColor");
      idleColor = B._Cell$named("idleColor");
      switch (t1.brightness.index) {
        case 1:
          dragColor._value = B.Color$fromARGB(153, onSurface.toARGB32$0() >>> 16 & 255, onSurface.toARGB32$0() >>> 8 & 255, onSurface.toARGB32$0() & 255);
          hoverColor._value = B.Color$fromARGB(D.JSNumber_methods.round$0(127.5), onSurface.toARGB32$0() >>> 16 & 255, onSurface.toARGB32$0() >>> 8 & 255, onSurface.toARGB32$0() & 255);
          t1 = _this.___MaterialScrollbarState__useAndroidScrollbar_A;
          t1 === $ && B.throwLateFieldNI(_s20_);
          if (t1) {
            t1 = _this._framework$_element;
            t1.toString;
            t1 = E.Theme_of(t1).highlightColor;
            t1 = B.Color$fromARGB(255, t1.toARGB32$0() >>> 16 & 255, t1.toARGB32$0() >>> 8 & 255, t1.toARGB32$0() & 255);
          } else
            t1 = B.Color$fromARGB(D.JSNumber_methods.round$0(25.5), onSurface.toARGB32$0() >>> 16 & 255, onSurface.toARGB32$0() >>> 8 & 255, onSurface.toARGB32$0() & 255);
          idleColor._value = t1;
          break;
        case 0:
          dragColor._value = B.Color$fromARGB(191, onSurface.toARGB32$0() >>> 16 & 255, onSurface.toARGB32$0() >>> 8 & 255, onSurface.toARGB32$0() & 255);
          hoverColor._value = B.Color$fromARGB(166, onSurface.toARGB32$0() >>> 16 & 255, onSurface.toARGB32$0() >>> 8 & 255, onSurface.toARGB32$0() & 255);
          t1 = _this.___MaterialScrollbarState__useAndroidScrollbar_A;
          t1 === $ && B.throwLateFieldNI(_s20_);
          if (t1) {
            t1 = _this._framework$_element;
            t1.toString;
            t1 = E.Theme_of(t1).highlightColor;
            t1 = B.Color$fromARGB(255, t1.toARGB32$0() >>> 16 & 255, t1.toARGB32$0() >>> 8 & 255, t1.toARGB32$0() & 255);
          } else
            t1 = B.Color$fromARGB(D.JSNumber_methods.round$0(76.5), onSurface.toARGB32$0() >>> 16 & 255, onSurface.toARGB32$0() >>> 8 & 255, onSurface.toARGB32$0() & 255);
          idleColor._value = t1;
          break;
      }
      return new G._WidgetStatePropertyWith(new A._MaterialScrollbarState__thumbColor_closure(_this, dragColor, hoverColor, idleColor), type$._WidgetStatePropertyWith_Color);
    },
    get$_scrollbar0$_trackColor() {
      var t1 = this.___MaterialScrollbarState__colorScheme_A;
      t1 === $ && B.throwLateFieldNI("_colorScheme");
      return new G._WidgetStatePropertyWith(new A._MaterialScrollbarState__trackColor_closure(this, t1.brightness, t1.onSurface), type$._WidgetStatePropertyWith_Color);
    },
    get$_scrollbar0$_trackBorderColor() {
      var t1 = this.___MaterialScrollbarState__colorScheme_A;
      t1 === $ && B.throwLateFieldNI("_colorScheme");
      return new G._WidgetStatePropertyWith(new A._MaterialScrollbarState__trackBorderColor_closure(this, t1.brightness, t1.onSurface), type$._WidgetStatePropertyWith_Color);
    },
    get$_scrollbar0$_thickness() {
      return new G._WidgetStatePropertyWith(new A._MaterialScrollbarState__thickness_closure(this), type$._WidgetStatePropertyWith_double);
    },
    initState$0() {
      var t1, t2, _this = this;
      _this.super$RawScrollbarState$initState();
      t1 = _this.___MaterialScrollbarState__hoverAnimationController_A = H.AnimationController$(null, D.Duration_200000, null, null, _this);
      t2 = type$.void_Function._as(new A._MaterialScrollbarState_initState_closure(_this));
      t1.didRegisterListener$0();
      t1.AnimationLocalListenersMixin__listeners.add$1(0, t2);
    },
    didChangeDependencies$0() {
      var theme, _this = this,
        t1 = _this._framework$_element;
      t1.toString;
      theme = E.Theme_of(t1);
      _this.___MaterialScrollbarState__colorScheme_A = theme.colorScheme;
      t1 = _this._framework$_element;
      t1.dependOnInheritedWidgetOfExactType$1$0(type$.ScrollbarTheme);
      t1 = E.Theme_of(t1);
      _this.___MaterialScrollbarState__scrollbarTheme_A = t1.scrollbarTheme;
      switch (theme.platform.index) {
        case 0:
          _this.___MaterialScrollbarState__useAndroidScrollbar_A = true;
          break;
        case 2:
        case 3:
        case 1:
        case 4:
        case 5:
          _this.___MaterialScrollbarState__useAndroidScrollbar_A = false;
          break;
      }
      _this.super$RawScrollbarState$didChangeDependencies();
    },
    updateScrollbarPainter$0() {
      var t2, _this = this,
        _s15_ = "_scrollbarTheme",
        _s20_ = "_useAndroidScrollbar",
        t1 = _this.__RawScrollbarState_scrollbarPainter_F;
      t1 === $ && B.throwLateFieldNI("scrollbarPainter");
      t2 = type$.Set_WidgetState;
      t1.set$color(0, _this.get$_thumbColor()._resolve.call$1(t2._as(_this.get$_states())));
      t1.set$trackColor(_this.get$_scrollbar0$_trackColor()._resolve.call$1(t2._as(_this.get$_states())));
      t1.set$trackBorderColor(_this.get$_scrollbar0$_trackBorderColor()._resolve.call$1(t2._as(_this.get$_states())));
      t1.set$textDirection(_this._framework$_element.dependOnInheritedWidgetOfExactType$1$0(type$.Directionality).textDirection);
      t1.set$thickness(_this.get$_scrollbar0$_thickness()._resolve.call$1(t2._as(_this.get$_states())));
      t2 = _this._widget.radius;
      if (t2 == null) {
        t2 = _this.___MaterialScrollbarState__scrollbarTheme_A;
        t2 === $ && B.throwLateFieldNI(_s15_);
        t2 = t2.radius;
      }
      if (t2 == null) {
        t2 = _this.___MaterialScrollbarState__useAndroidScrollbar_A;
        t2 === $ && B.throwLateFieldNI(_s20_);
        t2 = t2 ? null : L.Radius_8_8;
      }
      t1.set$radius(t2);
      t2 = _this.___MaterialScrollbarState__scrollbarTheme_A;
      t2 === $ && B.throwLateFieldNI(_s15_);
      t2 = t2.crossAxisMargin;
      if (t2 == null) {
        t2 = _this.___MaterialScrollbarState__useAndroidScrollbar_A;
        t2 === $ && B.throwLateFieldNI(_s20_);
        t2 = t2 ? 0 : 2;
      }
      t1.set$crossAxisMargin(t2);
      t2 = _this.___MaterialScrollbarState__scrollbarTheme_A.mainAxisMargin;
      t1.set$mainAxisMargin(t2 == null ? 0 : t2);
      t2 = _this.___MaterialScrollbarState__scrollbarTheme_A.minThumbLength;
      t1.set$minLength(0, t2 == null ? 48 : t2);
      t2 = _this._framework$_element;
      t2.toString;
      t1.set$padding(0, B.InheritedModel_inheritFrom(t2, D._MediaQueryAspect_6, type$.MediaQuery).data.padding);
      t1.set$scrollbarOrientation(_this._widget.scrollbarOrientation);
      t1.set$ignorePointer(!_this.get$enableGestures());
    },
    handleThumbPressStart$1(localPosition) {
      this.super$RawScrollbarState$handleThumbPressStart(localPosition);
      this.setState$1(new A._MaterialScrollbarState_handleThumbPressStart_closure(this));
    },
    handleThumbPressEnd$2(localPosition, velocity) {
      this.super$RawScrollbarState$handleThumbPressEnd(localPosition, velocity);
      this.setState$1(new A._MaterialScrollbarState_handleThumbPressEnd_closure(this));
    },
    handleHover$1($event) {
      var t1, _this = this,
        _s25_ = "_hoverAnimationController";
      _this.super$RawScrollbarState$handleHover($event);
      if (_this.isPointerOverScrollbar$3$forHover($event.get$position($event), $event.get$kind($event), true)) {
        _this.setState$1(new A._MaterialScrollbarState_handleHover_closure(_this));
        t1 = _this.___MaterialScrollbarState__hoverAnimationController_A;
        t1 === $ && B.throwLateFieldNI(_s25_);
        t1.forward$0(0);
      } else if (_this._scrollbar0$_hoverIsActive) {
        _this.setState$1(new A._MaterialScrollbarState_handleHover_closure0(_this));
        t1 = _this.___MaterialScrollbarState__hoverAnimationController_A;
        t1 === $ && B.throwLateFieldNI(_s25_);
        t1.reverse$0(0);
      }
    },
    handleHoverExit$1($event) {
      var t1, _this = this;
      _this.super$RawScrollbarState$handleHoverExit($event);
      _this.setState$1(new A._MaterialScrollbarState_handleHoverExit_closure(_this));
      t1 = _this.___MaterialScrollbarState__hoverAnimationController_A;
      t1 === $ && B.throwLateFieldNI("_hoverAnimationController");
      t1.reverse$0(0);
    },
    dispose$0() {
      var t1 = this.___MaterialScrollbarState__hoverAnimationController_A;
      t1 === $ && B.throwLateFieldNI("_hoverAnimationController");
      t1.dispose$0();
      this.super$RawScrollbarState$dispose();
    }
  };
  var typesOffset = hunkHelpers.updateTypes(["Color(Set<WidgetState>)", "~(TapDownDetails)", "bool(Set<WidgetState>)", "double(Set<WidgetState>)"]);
  A._CupertinoScrollbarState_initState_closure.prototype = {
    call$0() {
      this.$this.updateScrollbarPainter$0();
    },
    $signature: 0
  };
  A._CupertinoScrollbarState_handleThumbPress_closure.prototype = {
    call$1(__wc0_formal) {
      return A.HapticFeedback_mediumImpact();
    },
    $signature: 380
  };
  A._MaterialScrollbarState__trackVisibility_closure.prototype = {
    call$1(states) {
      var t1, t2;
      type$.Set_WidgetState._as(states);
      t1 = this.$this;
      t2 = t1._widget.trackVisibility;
      t1 = t1.___MaterialScrollbarState__scrollbarTheme_A;
      t1 === $ && B.throwLateFieldNI("_scrollbarTheme");
      t1 = t1.trackVisibility;
      t1 = t1 == null ? null : t1.resolve$1(states);
      return t1 === true;
    },
    $signature: typesOffset + 2
  };
  A._MaterialScrollbarState__thumbColor_closure.prototype = {
    call$1(states) {
      var t1, t2, t3, _this = this, _null = null,
        _s15_ = "_scrollbarTheme";
      type$.Set_WidgetState._as(states);
      if (states.contains$1(0, K.WidgetState_3)) {
        t1 = _this.$this.___MaterialScrollbarState__scrollbarTheme_A;
        t1 === $ && B.throwLateFieldNI(_s15_);
        t1 = t1.thumbColor;
        t1 = t1 == null ? _null : t1.resolve$1(states);
        return t1 == null ? _this.dragColor._readLocal$0() : t1;
      }
      t1 = _this.$this;
      if (B.boolConversionCheck(t1.get$_trackVisibility()._resolve.call$1(states))) {
        t1 = t1.___MaterialScrollbarState__scrollbarTheme_A;
        t1 === $ && B.throwLateFieldNI(_s15_);
        t1 = t1.thumbColor;
        t1 = t1 == null ? _null : t1.resolve$1(states);
        return t1 == null ? _this.hoverColor._readLocal$0() : t1;
      }
      t2 = t1.___MaterialScrollbarState__scrollbarTheme_A;
      t2 === $ && B.throwLateFieldNI(_s15_);
      t2 = t2.thumbColor;
      t2 = t2 == null ? _null : t2.resolve$1(states);
      if (t2 == null)
        t2 = _this.idleColor._readLocal$0();
      t3 = t1.___MaterialScrollbarState__scrollbarTheme_A.thumbColor;
      t3 = t3 == null ? _null : t3.resolve$1(states);
      if (t3 == null)
        t3 = _this.hoverColor._readLocal$0();
      t1 = t1.___MaterialScrollbarState__hoverAnimationController_A;
      t1 === $ && B.throwLateFieldNI("_hoverAnimationController");
      t1 = t1.__AnimationController__value_A;
      t1 === $ && B.throwLateFieldNI("_value");
      t1 = H.Color_lerp(t2, t3, t1);
      t1.toString;
      return t1;
    },
    $signature: typesOffset + 0
  };
  A._MaterialScrollbarState__trackColor_closure.prototype = {
    call$1(states) {
      var t1, _this = this;
      type$.Set_WidgetState._as(states);
      t1 = _this.$this;
      if (t1.get$showScrollbar() && B.boolConversionCheck(t1.get$_trackVisibility()._resolve.call$1(states))) {
        t1 = t1.___MaterialScrollbarState__scrollbarTheme_A;
        t1 === $ && B.throwLateFieldNI("_scrollbarTheme");
        t1 = t1.trackColor;
        t1 = t1 == null ? null : t1.resolve$1(states);
        if (t1 == null)
          switch (_this.brightness.index) {
            case 1:
              t1 = _this.onSurface;
              t1 = B.Color$fromARGB(8, t1.toARGB32$0() >>> 16 & 255, t1.toARGB32$0() >>> 8 & 255, t1.toARGB32$0() & 255);
              break;
            case 0:
              t1 = _this.onSurface;
              t1 = B.Color$fromARGB(13, t1.toARGB32$0() >>> 16 & 255, t1.toARGB32$0() >>> 8 & 255, t1.toARGB32$0() & 255);
              break;
            default:
              t1 = null;
          }
        return t1;
      }
      return D.Color_Edl;
    },
    $signature: typesOffset + 0
  };
  A._MaterialScrollbarState__trackBorderColor_closure.prototype = {
    call$1(states) {
      var t1, _this = this;
      type$.Set_WidgetState._as(states);
      t1 = _this.$this;
      if (t1.get$showScrollbar() && B.boolConversionCheck(t1.get$_trackVisibility()._resolve.call$1(states))) {
        t1 = t1.___MaterialScrollbarState__scrollbarTheme_A;
        t1 === $ && B.throwLateFieldNI("_scrollbarTheme");
        t1 = t1.trackBorderColor;
        t1 = t1 == null ? null : t1.resolve$1(states);
        if (t1 == null)
          switch (_this.brightness.index) {
            case 1:
              t1 = _this.onSurface;
              t1 = B.Color$fromARGB(D.JSNumber_methods.round$0(25.5), t1.toARGB32$0() >>> 16 & 255, t1.toARGB32$0() >>> 8 & 255, t1.toARGB32$0() & 255);
              break;
            case 0:
              t1 = _this.onSurface;
              t1 = B.Color$fromARGB(64, t1.toARGB32$0() >>> 16 & 255, t1.toARGB32$0() >>> 8 & 255, t1.toARGB32$0() & 255);
              break;
            default:
              t1 = null;
          }
        return t1;
      }
      return D.Color_Edl;
    },
    $signature: typesOffset + 0
  };
  A._MaterialScrollbarState__thickness_closure.prototype = {
    call$1(states) {
      var t1, t2,
        _s15_ = "_scrollbarTheme";
      type$.Set_WidgetState._as(states);
      if (states.contains$1(0, I.WidgetState_0) && B.boolConversionCheck(this.$this.get$_trackVisibility()._resolve.call$1(states))) {
        t1 = this.$this;
        t2 = t1._widget.thickness;
        if (t2 == null) {
          t1 = t1.___MaterialScrollbarState__scrollbarTheme_A;
          t1 === $ && B.throwLateFieldNI(_s15_);
          t1 = t1.thickness;
          t1 = t1 == null ? null : t1.resolve$1(states);
        } else
          t1 = t2;
        return t1 == null ? 12 : t1;
      }
      t1 = this.$this;
      t2 = t1._widget.thickness;
      if (t2 == null) {
        t2 = t1.___MaterialScrollbarState__scrollbarTheme_A;
        t2 === $ && B.throwLateFieldNI(_s15_);
        t2 = t2.thickness;
        t2 = t2 == null ? null : t2.resolve$1(states);
      }
      if (t2 == null) {
        t1 = t1.___MaterialScrollbarState__useAndroidScrollbar_A;
        t1 === $ && B.throwLateFieldNI("_useAndroidScrollbar");
        t2 = 8 / (t1 ? 2 : 1);
        t1 = t2;
      } else
        t1 = t2;
      return t1;
    },
    $signature: typesOffset + 3
  };
  A._MaterialScrollbarState_initState_closure.prototype = {
    call$0() {
      this.$this.updateScrollbarPainter$0();
    },
    $signature: 0
  };
  A._MaterialScrollbarState_handleThumbPressStart_closure.prototype = {
    call$0() {
      this.$this._dragIsActive = true;
    },
    $signature: 0
  };
  A._MaterialScrollbarState_handleThumbPressEnd_closure.prototype = {
    call$0() {
      this.$this._dragIsActive = false;
    },
    $signature: 0
  };
  A._MaterialScrollbarState_handleHover_closure.prototype = {
    call$0() {
      this.$this._scrollbar0$_hoverIsActive = true;
    },
    $signature: 0
  };
  A._MaterialScrollbarState_handleHover_closure0.prototype = {
    call$0() {
      this.$this._scrollbar0$_hoverIsActive = false;
    },
    $signature: 0
  };
  A._MaterialScrollbarState_handleHoverExit_closure.prototype = {
    call$0() {
      this.$this._scrollbar0$_hoverIsActive = false;
    },
    $signature: 0
  };
  (function installTearOffs() {
    var _instance_1_u = hunkHelpers._instance_1u;
    _instance_1_u(A._CupertinoScrollbarState.prototype, "get$handleTrackTapDown", "handleTrackTapDown$1", 1);
  })();
  (function inheritance() {
    var _inheritMany = hunkHelpers.inheritMany,
      _inherit = hunkHelpers.inherit;
    _inheritMany(F.RawScrollbar, [A.CupertinoScrollbar, A._MaterialScrollbar]);
    _inheritMany(F.RawScrollbarState, [A._CupertinoScrollbarState, A._MaterialScrollbarState]);
    _inheritMany(B.Closure0Args, [A._CupertinoScrollbarState_initState_closure, A._MaterialScrollbarState_initState_closure, A._MaterialScrollbarState_handleThumbPressStart_closure, A._MaterialScrollbarState_handleThumbPressEnd_closure, A._MaterialScrollbarState_handleHover_closure, A._MaterialScrollbarState_handleHover_closure0, A._MaterialScrollbarState_handleHoverExit_closure]);
    _inheritMany(B.Closure, [A._CupertinoScrollbarState_handleThumbPress_closure, A._MaterialScrollbarState__trackVisibility_closure, A._MaterialScrollbarState__thumbColor_closure, A._MaterialScrollbarState__trackColor_closure, A._MaterialScrollbarState__trackBorderColor_closure, A._MaterialScrollbarState__thickness_closure]);
    _inherit(A.Scrollbar, B.StatelessWidget);
  })();
  B._Universe_addRules(init.typeUniverse, JSON.parse('{"CupertinoScrollbar":{"RawScrollbar":[],"StatefulWidget":[],"Widget":[],"DiagnosticableTree":[]},"_CupertinoScrollbarState":{"RawScrollbarState":["CupertinoScrollbar"],"TickerProviderStateMixin":["CupertinoScrollbar"],"State":["CupertinoScrollbar"],"TickerProvider":[],"State.T":"CupertinoScrollbar","RawScrollbarState.T":"CupertinoScrollbar"},"_MaterialScrollbar":{"RawScrollbar":[],"StatefulWidget":[],"Widget":[],"DiagnosticableTree":[]},"Scrollbar":{"StatelessWidget":[],"Widget":[],"DiagnosticableTree":[]},"_MaterialScrollbarState":{"RawScrollbarState":["_MaterialScrollbar"],"TickerProviderStateMixin":["_MaterialScrollbar"],"State":["_MaterialScrollbar"],"TickerProvider":[],"State.T":"_MaterialScrollbar","RawScrollbarState.T":"_MaterialScrollbar"},"ScrollbarTheme":{"InheritedTheme":[],"InheritedWidget":[],"ProxyWidget":[],"Widget":[],"DiagnosticableTree":[]}}'));
  var type$ = (function rtii() {
    var findType = B.findType;
    return {
      Directionality: findType("Directionality"),
      LabeledGlobalKey_RawGestureDetectorState: findType("LabeledGlobalKey<RawGestureDetectorState>"),
      LabeledGlobalKey_State_StatefulWidget: findType("LabeledGlobalKey<State<StatefulWidget>>"),
      MediaQuery: findType("MediaQuery"),
      ScrollbarTheme: findType("ScrollbarTheme"),
      Set_WidgetState: findType("Set<WidgetState>"),
      TapDownDetails: findType("TapDownDetails"),
      WidgetState: findType("WidgetState"),
      _WidgetStatePropertyWith_Color: findType("_WidgetStatePropertyWith<Color>"),
      _WidgetStatePropertyWith_bool: findType("_WidgetStatePropertyWith<bool>"),
      _WidgetStatePropertyWith_double: findType("_WidgetStatePropertyWith<double>"),
      void: findType("~"),
      void_Function: findType("~()")
    };
  })();
  (function constants() {
    C.Color_PZx = new B.Color(0.34901960784313724, 0, 0, 0, D.ColorSpace_0);
    C.Color_90Q = new B.Color(0.5019607843137255, 1, 1, 1, D.ColorSpace_0);
    C.CupertinoDynamicColor_7gJ = new M.CupertinoDynamicColor(C.Color_PZx, null, null, C.Color_PZx, C.Color_90Q, C.Color_PZx, C.Color_90Q, C.Color_PZx, C.Color_90Q, C.Color_PZx, C.Color_90Q);
    C.Duration_1200000 = new B.Duration(1200000);
    C.Radius_rid = new B.Radius(1.5, 1.5);
  })();
};
;
((d, h) => {
  d[h] = d.current;
  d.eventLog.push({p: "main.dart.js_127", e: "endPart", h: h});
})($__dart_deferred_initializers__, "vyUgdbLWEE8NrcmpwPCBPHpBYl4=");
;
//# sourceMappingURL=main.dart.js_127.part.js.map
