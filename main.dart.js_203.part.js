// Generated by dart2js (NullSafetyMode.sound, csp, intern-composite-values), the Dart to JavaScript compiler version: 3.7.2.
((s, d, e) => {
  s[d] = s[d] || {};
  s[d][e] = s[d][e] || [];
  s[d][e].push({p: "main.dart.js_203", e: "beginPart"});
})(self, "$__dart_deferred_initializers__", "eventLog");
$__dart_deferred_initializers__.current = function(hunkHelpers, init, holdersList, $) {
  var J, B, C, G, A9, A_, Ah, K, V, Ai, X, Aa, A0, Aj, Ak, O, L,
  A = {
    QuestionnairePage$(questionnaire, sessionId) {
      return new A.QuestionnairePage(questionnaire, null);
    },
    QuestionnairePage: function QuestionnairePage(t0, t1) {
      this.questionnaire = t0;
      this.key = t1;
    },
    _QuestionnairePageState: function _QuestionnairePageState(t0, t1) {
      var _ = this;
      _._fC = t0;
      _._questionnaire_page$_controller = t1;
      _._framework$_element = _._widget = null;
    },
    _QuestionnairePageState_initState_closure: function _QuestionnairePageState_initState_closure() {
    },
    _QuestionnairePageState__onReset_closure: function _QuestionnairePageState__onReset_closure() {
    },
    _QuestionnairePageState__onChanged_closure: function _QuestionnairePageState__onChanged_closure(t0) {
      this.qid = t0;
    },
    _QuestionnairePageState_build_closure: function _QuestionnairePageState_build_closure(t0, t1) {
      this.$this = t0;
      this.context = t1;
    },
    _QuestionnairePageState_build__closure: function _QuestionnairePageState_build__closure() {
    },
    _QuestionnairePageState__checkbox_closure: function _QuestionnairePageState__checkbox_closure(t0, t1, t2) {
      this.$this = t0;
      this.qid = t1;
      this.options = t2;
    },
    _QuestionnairePageState__checkbox__closure: function _QuestionnairePageState__checkbox__closure() {
    },
    _QuestionnairePageState__checkbox__closure0: function _QuestionnairePageState__checkbox__closure0(t0, t1) {
      this.$this = t0;
      this.qid = t1;
    },
    _QuestionnairePageState__radio_closure: function _QuestionnairePageState__radio_closure(t0, t1, t2) {
      this.$this = t0;
      this.qid = t1;
      this.options = t2;
    },
    _QuestionnairePageState__radio__closure: function _QuestionnairePageState__radio__closure() {
    },
    _QuestionnairePageState__radio__closure0: function _QuestionnairePageState__radio__closure0(t0, t1) {
      this.$this = t0;
      this.qid = t1;
    },
    _QuestionnairePageState__slider_closure: function _QuestionnairePageState__slider_closure(t0, t1) {
      this.$this = t0;
      this.qid = t1;
    },
    _QuestionnairePageState__input_closure: function _QuestionnairePageState__input_closure(t0, t1) {
      this.$this = t0;
      this.qid = t1;
    },
    SliderController: function SliderController(t0, t1) {
      var _ = this;
      _._change_notifier$_value = t0;
      _.ChangeNotifier__count = 0;
      _.ChangeNotifier__listeners = t1;
      _.ChangeNotifier__reentrantlyRemovedListeners = _.ChangeNotifier__notificationCallStackDepth = 0;
    },
    Slider: function Slider(t0, t1, t2, t3) {
      var _ = this;
      _.options = t0;
      _.controller = t1;
      _.onChanged = t2;
      _.key = t3;
    },
    _SliderState: function _SliderState() {
      this._framework$_element = this._widget = null;
    },
    _SliderState_toggleRange_closure: function _SliderState_toggleRange_closure(t0, t1, t2) {
      this.$this = t0;
      this.min = t1;
      this.max = t2;
    },
    _SliderState_build_closure: function _SliderState_build_closure() {
    },
    _SliderState_build_closure0: function _SliderState_build_closure0() {
    },
    _SliderState_build_closure1: function _SliderState_build_closure1(t0, t1, t2, t3) {
      var _ = this;
      _.$this = t0;
      _.min = t1;
      _.max = t2;
      _.sTD = t3;
    },
    _SliderState_build__closure: function _SliderState_build__closure(t0, t1, t2) {
      this.$this = t0;
      this.min = t1;
      this.max = t2;
    },
    _SliderState_build__closure0: function _SliderState_build__closure0(t0) {
      this.$this = t0;
    },
    _SliderState_build__closure1: function _SliderState_build__closure1(t0) {
      this.$this = t0;
    },
    _RenderRangeSlider$(divisions, gestureSettings, hovering, labels, onChangeEnd, onChangeStart, onChanged, platform, screenSize, semanticFormatterCallback, sliderTheme, state, textDirection, textScaleFactor, theme, values) {
      var _null = null,
        t1 = new A._RenderRangeSlider(state, F.TextPainter$(_null, _null, _null, _null, _null, C.TextAlign_4, _null, _null, C._LinearTextScaler_1, H.TextWidthBasis_0), F.TextPainter$(_null, _null, _null, _null, _null, C.TextAlign_4, _null, _null, C._LinearTextScaler_1, H.TextWidthBasis_0), C.Offset_0_0, C.Offset_0_0, values, platform, semanticFormatterCallback, divisions, labels, sliderTheme, theme, textScaleFactor, screenSize, onChanged, onChangeStart, onChangeEnd, textDirection, hovering, false, new B._LayoutCacheStorage(), B.LayerHandle$(type$.ContainerLayer));
      t1.RenderObject$0();
      t1._RenderRangeSlider$16$divisions$gestureSettings$hovering$labels$onChangeEnd$onChangeStart$onChanged$platform$screenSize$semanticFormatterCallback$sliderTheme$state$textDirection$textScaleFactor$theme$values(divisions, gestureSettings, hovering, labels, onChangeEnd, onChangeStart, onChanged, platform, screenSize, semanticFormatterCallback, sliderTheme, state, textDirection, textScaleFactor, theme, values);
      return t1;
    },
    RangeSlider: function RangeSlider(t0, t1, t2, t3, t4, t5, t6, t7) {
      var _ = this;
      _.values = t0;
      _.onChanged = t1;
      _.onChangeStart = t2;
      _.onChangeEnd = t3;
      _.min = t4;
      _.max = t5;
      _.divisions = t6;
      _.key = t7;
    },
    _RangeSliderState: function _RangeSliderState(t0, t1, t2) {
      var _ = this;
      _.___RangeSliderState_endPositionController_A = _.___RangeSliderState_startPositionController_A = _.___RangeSliderState_enableController_A = _.___RangeSliderState_valueIndicatorController_A = _.___RangeSliderState_overlayController_A = $;
      _.paintBottomValueIndicator = _.paintTopValueIndicator = _.interactionTimer = null;
      _._range_slider$_hovering = _._range_slider$_dragging = false;
      _._range_slider$_layerLink = t0;
      _.overlayEntry = null;
      _.TickerProviderStateMixin__tickers = t1;
      _.TickerProviderStateMixin__tickerModeNotifier = t2;
      _._framework$_element = _._widget = null;
    },
    _RangeSliderState__handleHoverChanged_closure: function _RangeSliderState__handleHoverChanged_closure(t0, t1) {
      this.$this = t0;
      this.hovering = t1;
    },
    _RangeSliderState_build_effectiveOverlayColor: function _RangeSliderState_build_effectiveOverlayColor(t0, t1, t2, t3) {
      var _ = this;
      _._box_0 = t0;
      _.$this = t1;
      _.states = t2;
      _.theme = t3;
    },
    _RangeSliderState_build_screenSize: function _RangeSliderState_build_screenSize(t0) {
      this.context = t0;
    },
    _RangeSliderState_showValueIndicator_closure: function _RangeSliderState_showValueIndicator_closure(t0) {
      this.$this = t0;
    },
    _RangeSliderRenderObjectWidget: function _RangeSliderRenderObjectWidget(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12) {
      var _ = this;
      _.values = t0;
      _.divisions = t1;
      _.labels = t2;
      _.sliderTheme = t3;
      _.textScaleFactor = t4;
      _.screenSize = t5;
      _.onChanged = t6;
      _.onChangeStart = t7;
      _.onChangeEnd = t8;
      _.semanticFormatterCallback = t9;
      _.state = t10;
      _.hovering = t11;
      _.key = t12;
    },
    _RenderRangeSlider: function _RenderRangeSlider(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, t21) {
      var _ = this;
      _._lastThumbSelection = null;
      _._range_slider$_state = t0;
      _.___RenderRangeSlider__enableAnimation_A = _.___RenderRangeSlider__valueIndicatorAnimation_A = _.___RenderRangeSlider__overlayAnimation_A = $;
      _._startLabelPainter = t1;
      _._endLabelPainter = t2;
      _.___RenderRangeSlider__tap_A = _.___RenderRangeSlider__drag_A = $;
      _._range_slider$_active = false;
      _.___RenderRangeSlider__newValues_A = $;
      _._startThumbCenter = t3;
      _._endThumbCenter = t4;
      _.overlayEndRect = _.overlayStartRect = null;
      _._range_slider$_values = t5;
      _._range_slider$_platform = t6;
      _._range_slider$_semanticFormatterCallback = t7;
      _._range_slider$_divisions = t8;
      _._labels = t9;
      _._range_slider$_sliderTheme = t10;
      _._range_slider$_theme = t11;
      _._range_slider$_textScaleFactor = t12;
      _._range_slider$_screenSize = t13;
      _._range_slider$_onChanged = t14;
      _.onChangeStart = t15;
      _.onChangeEnd = t16;
      _._range_slider$_textDirection = t17;
      _._range_slider$_hovering = t18;
      _._hoveringEndThumb = _._hoveringStartThumb = false;
      _._endSemanticsNode = _._startSemanticsNode = null;
      _.RelayoutWhenSystemFontsChangeMixin__hasPendingSystemFontsDidChangeCallBack = t19;
      _._layoutCacheStorage = t20;
      _.parentData = _._box$_size = null;
      _._depth = 0;
      _._object$_owner = _._object$_parent = null;
      _._needsLayout = true;
      _._relayoutBoundary = null;
      _._doingThisLayoutWithCallback = false;
      _._constraints = null;
      _.__RenderObject__wasRepaintBoundary_A = $;
      _._layerHandle = t21;
      _._needsCompositingBitsUpdate = false;
      _.__RenderObject__needsCompositing_A = $;
      _._needsPaint = true;
      _._needsCompositedLayerUpdate = false;
      _._cachedSemanticsConfiguration = null;
      _._needsSemanticsUpdate = true;
      _._semantics = null;
    },
    _RenderRangeSlider_closure: function _RenderRangeSlider_closure(t0) {
      this.$this = t0;
    },
    _RenderRangeSlider__maxSliderPartWidth_closure: function _RenderRangeSlider__maxSliderPartWidth_closure() {
    },
    _RenderRangeSlider__maxSliderPartHeight_closure: function _RenderRangeSlider__maxSliderPartHeight_closure() {
    },
    _RenderRangeSlider__startInteraction_closure: function _RenderRangeSlider__startInteraction_closure(t0) {
      this.$this = t0;
    },
    _ValueIndicatorRenderObjectWidget0: function _ValueIndicatorRenderObjectWidget0(t0, t1) {
      this.state = t0;
      this.key = t1;
    },
    _RenderValueIndicator0: function _RenderValueIndicator0(t0, t1, t2, t3) {
      var _ = this;
      _._range_slider$___RenderValueIndicator__valueIndicatorAnimation_A = $;
      _.___RenderValueIndicator__state_A = t0;
      _.RelayoutWhenSystemFontsChangeMixin__hasPendingSystemFontsDidChangeCallBack = t1;
      _._layoutCacheStorage = t2;
      _.parentData = _._box$_size = null;
      _._depth = 0;
      _._object$_owner = _._object$_parent = null;
      _._needsLayout = true;
      _._relayoutBoundary = null;
      _._doingThisLayoutWithCallback = false;
      _._constraints = null;
      _.__RenderObject__wasRepaintBoundary_A = $;
      _._layerHandle = t3;
      _._needsCompositingBitsUpdate = false;
      _.__RenderObject__needsCompositing_A = $;
      _._needsPaint = true;
      _._needsCompositedLayerUpdate = false;
      _._cachedSemanticsConfiguration = null;
      _._needsSemanticsUpdate = true;
      _._semantics = null;
    },
    __RangeSliderState_State_TickerProviderStateMixin: function __RangeSliderState_State_TickerProviderStateMixin() {
    },
    __RenderRangeSlider_RenderBox_RelayoutWhenSystemFontsChangeMixin: function __RenderRangeSlider_RenderBox_RelayoutWhenSystemFontsChangeMixin() {
    },
    __RenderValueIndicator_RenderBox_RelayoutWhenSystemFontsChangeMixin: function __RenderValueIndicator_RenderBox_RelayoutWhenSystemFontsChangeMixin() {
    },
    _RenderSlider$(allowedInteraction, divisions, gestureSettings, hasFocus, hovering, label, onChangeEnd, onChangeStart, onChanged, platform, screenSize, secondaryTrackValue, semanticFormatterCallback, sliderTheme, state, textDirection, textScaleFactor, value) {
      var _null = null,
        t1 = new A._RenderSlider(state, F.TextPainter$(_null, _null, _null, _null, _null, C.TextAlign_4, _null, _null, C._LinearTextScaler_1, H.TextWidthBasis_0), value, secondaryTrackValue, platform, semanticFormatterCallback, divisions, label, sliderTheme, textScaleFactor, screenSize, onChanged, onChangeStart, onChangeEnd, textDirection, hasFocus, hovering, allowedInteraction, false, new B._LayoutCacheStorage(), B.LayerHandle$(type$.ContainerLayer));
      t1.RenderObject$0();
      t1._RenderSlider$18$allowedInteraction$divisions$gestureSettings$hasFocus$hovering$label$onChangeEnd$onChangeStart$onChanged$platform$screenSize$secondaryTrackValue$semanticFormatterCallback$sliderTheme$state$textDirection$textScaleFactor$value(allowedInteraction, divisions, gestureSettings, hasFocus, hovering, label, onChangeEnd, onChangeStart, onChanged, platform, screenSize, secondaryTrackValue, semanticFormatterCallback, sliderTheme, state, textDirection, textScaleFactor, value);
      return t1;
    },
    _SliderType: function _SliderType(t0, t1) {
      this.index = t0;
      this._name = t1;
    },
    SliderInteraction: function SliderInteraction(t0, t1) {
      this.index = t0;
      this._name = t1;
    },
    Slider0: function Slider0(t0, t1, t2, t3, t4, t5, t6, t7) {
      var _ = this;
      _.value = t0;
      _.onChanged = t1;
      _.onChangeStart = t2;
      _.onChangeEnd = t3;
      _.min = t4;
      _.max = t5;
      _.divisions = t6;
      _.key = t7;
    },
    _SliderState0: function _SliderState0(t0, t1, t2, t3) {
      var _ = this;
      _.___SliderState_positionController_A = _.___SliderState_enableController_A = _.___SliderState_valueIndicatorController_A = _.___SliderState_overlayController_A = $;
      _.interactionTimer = null;
      _._renderObjectKey = t0;
      _.___SliderState__actionMap_A = $;
      _.paintValueIndicator = null;
      _._dragging = false;
      _._slider$_focusNode = _._currentChangedValue = null;
      _._slider$_hovering = _._slider$_focused = false;
      _._layerLink = t1;
      _.overlayEntry = null;
      _.TickerProviderStateMixin__tickers = t2;
      _.TickerProviderStateMixin__tickerModeNotifier = t3;
      _._framework$_element = _._widget = null;
    },
    _SliderState__handleFocusHighlightChanged_closure: function _SliderState__handleFocusHighlightChanged_closure(t0, t1) {
      this.$this = t0;
      this.focused = t1;
    },
    _SliderState__handleHoverChanged_closure: function _SliderState__handleHoverChanged_closure(t0, t1) {
      this.$this = t0;
      this.hovering = t1;
    },
    _SliderState__buildMaterialSlider_effectiveOverlayColor: function _SliderState__buildMaterialSlider_effectiveOverlayColor(t0, t1, t2, t3) {
      var _ = this;
      _._box_0 = t0;
      _.$this = t1;
      _.states = t2;
      _.defaults = t3;
    },
    _SliderState__buildMaterialSlider_screenSize: function _SliderState__buildMaterialSlider_screenSize(t0) {
      this.context = t0;
    },
    _SliderState__buildMaterialSlider_closure: function _SliderState__buildMaterialSlider_closure(t0) {
      this.$this = t0;
    },
    _SliderState_showValueIndicator_closure: function _SliderState_showValueIndicator_closure(t0) {
      this.$this = t0;
    },
    _SliderRenderObjectWidget: function _SliderRenderObjectWidget(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15) {
      var _ = this;
      _.value = t0;
      _.secondaryTrackValue = t1;
      _.divisions = t2;
      _.label = t3;
      _.sliderTheme = t4;
      _.textScaleFactor = t5;
      _.screenSize = t6;
      _.onChanged = t7;
      _.onChangeStart = t8;
      _.onChangeEnd = t9;
      _.semanticFormatterCallback = t10;
      _.state = t11;
      _.hasFocus = t12;
      _.hovering = t13;
      _.allowedInteraction = t14;
      _.key = t15;
    },
    _RenderSlider: function _RenderSlider(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20) {
      var _ = this;
      _._slider$_state = t0;
      _.___RenderSlider__enableAnimation_A = _.___RenderSlider__valueIndicatorAnimation_A = _.___RenderSlider__overlayAnimation_A = $;
      _._labelPainter = t1;
      _.___RenderSlider__tap_A = _.___RenderSlider__drag_A = $;
      _._slider$_active = false;
      _._currentDragValue = 0;
      _.overlayRect = null;
      _._slider$_value = t2;
      _._secondaryTrackValue = t3;
      _._platform = t4;
      _._semanticFormatterCallback = t5;
      _._divisions = t6;
      _._label = t7;
      _._sliderTheme = t8;
      _._textScaleFactor = t9;
      _._screenSize = t10;
      _._slider$_onChanged = t11;
      _.onChangeStart = t12;
      _.onChangeEnd = t13;
      _._slider$_textDirection = t14;
      _._slider$_hasFocus = t15;
      _._slider$_hovering = t16;
      _._hoveringThumb = false;
      _._allowedInteraction = t17;
      _.RelayoutWhenSystemFontsChangeMixin__hasPendingSystemFontsDidChangeCallBack = t18;
      _._layoutCacheStorage = t19;
      _.parentData = _._box$_size = null;
      _._depth = 0;
      _._object$_owner = _._object$_parent = null;
      _._needsLayout = true;
      _._relayoutBoundary = null;
      _._doingThisLayoutWithCallback = false;
      _._constraints = null;
      _.__RenderObject__wasRepaintBoundary_A = $;
      _._layerHandle = t20;
      _._needsCompositingBitsUpdate = false;
      _.__RenderObject__needsCompositing_A = $;
      _._needsPaint = true;
      _._needsCompositedLayerUpdate = false;
      _._cachedSemanticsConfiguration = null;
      _._needsSemanticsUpdate = true;
      _._semantics = null;
    },
    _RenderSlider_closure: function _RenderSlider_closure(t0) {
      this.$this = t0;
    },
    _RenderSlider__maxSliderPartWidth_closure: function _RenderSlider__maxSliderPartWidth_closure() {
    },
    _RenderSlider__maxSliderPartHeight_closure: function _RenderSlider__maxSliderPartHeight_closure() {
    },
    _RenderSlider__startInteraction_closure: function _RenderSlider__startInteraction_closure(t0) {
      this.$this = t0;
    },
    _AdjustSliderIntent: function _AdjustSliderIntent(t0) {
      this.type = t0;
    },
    _SliderAdjustmentType: function _SliderAdjustmentType(t0, t1) {
      this.index = t0;
      this._name = t1;
    },
    _ValueIndicatorRenderObjectWidget: function _ValueIndicatorRenderObjectWidget(t0, t1) {
      this.state = t0;
      this.key = t1;
    },
    _RenderValueIndicator: function _RenderValueIndicator(t0, t1, t2, t3) {
      var _ = this;
      _.___RenderValueIndicator__valueIndicatorAnimation_A = $;
      _._slider$_state = t0;
      _.RelayoutWhenSystemFontsChangeMixin__hasPendingSystemFontsDidChangeCallBack = t1;
      _._layoutCacheStorage = t2;
      _.parentData = _._box$_size = null;
      _._depth = 0;
      _._object$_owner = _._object$_parent = null;
      _._needsLayout = true;
      _._relayoutBoundary = null;
      _._doingThisLayoutWithCallback = false;
      _._constraints = null;
      _.__RenderObject__wasRepaintBoundary_A = $;
      _._layerHandle = t3;
      _._needsCompositingBitsUpdate = false;
      _.__RenderObject__needsCompositing_A = $;
      _._needsPaint = true;
      _._needsCompositedLayerUpdate = false;
      _._cachedSemanticsConfiguration = null;
      _._needsSemanticsUpdate = true;
      _._semantics = null;
    },
    _SliderDefaultsM2: function _SliderDefaultsM2(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t30, t31, t32, t33, t34, t35, t36) {
      var _ = this;
      _.context = t0;
      _.___SliderDefaultsM2_sliderTheme_FI = _.___SliderDefaultsM2__colors_FI = $;
      _.trackHeight = t1;
      _.activeTrackColor = t2;
      _.inactiveTrackColor = t3;
      _.secondaryActiveTrackColor = t4;
      _.disabledActiveTrackColor = t5;
      _.disabledSecondaryActiveTrackColor = t6;
      _.disabledInactiveTrackColor = t7;
      _.activeTickMarkColor = t8;
      _.inactiveTickMarkColor = t9;
      _.disabledActiveTickMarkColor = t10;
      _.disabledInactiveTickMarkColor = t11;
      _.thumbColor = t12;
      _.overlappingShapeStrokeColor = t13;
      _.disabledThumbColor = t14;
      _.overlayColor = t15;
      _.valueIndicatorColor = t16;
      _.valueIndicatorStrokeColor = t17;
      _.overlayShape = t18;
      _.tickMarkShape = t19;
      _.thumbShape = t20;
      _.trackShape = t21;
      _.valueIndicatorShape = t22;
      _.rangeTickMarkShape = t23;
      _.rangeThumbShape = t24;
      _.rangeTrackShape = t25;
      _.rangeValueIndicatorShape = t26;
      _.showValueIndicator = t27;
      _.valueIndicatorTextStyle = t28;
      _.minThumbSeparation = t29;
      _.thumbSelector = t30;
      _.mouseCursor = t31;
      _.allowedInteraction = t32;
      _.padding = t33;
      _.thumbSize = t34;
      _.trackGap = t35;
      _.year2023 = t36;
    },
    _SliderDefaultsM3Year2023: function _SliderDefaultsM3Year2023(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t30, t31, t32, t33, t34, t35, t36) {
      var _ = this;
      _.context = t0;
      _.___SliderDefaultsM3Year2023__colors_FI = $;
      _.trackHeight = t1;
      _.activeTrackColor = t2;
      _.inactiveTrackColor = t3;
      _.secondaryActiveTrackColor = t4;
      _.disabledActiveTrackColor = t5;
      _.disabledSecondaryActiveTrackColor = t6;
      _.disabledInactiveTrackColor = t7;
      _.activeTickMarkColor = t8;
      _.inactiveTickMarkColor = t9;
      _.disabledActiveTickMarkColor = t10;
      _.disabledInactiveTickMarkColor = t11;
      _.thumbColor = t12;
      _.overlappingShapeStrokeColor = t13;
      _.disabledThumbColor = t14;
      _.overlayColor = t15;
      _.valueIndicatorColor = t16;
      _.valueIndicatorStrokeColor = t17;
      _.overlayShape = t18;
      _.tickMarkShape = t19;
      _.thumbShape = t20;
      _.trackShape = t21;
      _.valueIndicatorShape = t22;
      _.rangeTickMarkShape = t23;
      _.rangeThumbShape = t24;
      _.rangeTrackShape = t25;
      _.rangeValueIndicatorShape = t26;
      _.showValueIndicator = t27;
      _.valueIndicatorTextStyle = t28;
      _.minThumbSeparation = t29;
      _.thumbSelector = t30;
      _.mouseCursor = t31;
      _.allowedInteraction = t32;
      _.padding = t33;
      _.thumbSize = t34;
      _.trackGap = t35;
      _.year2023 = t36;
    },
    _SliderDefaultsM3Year2023_overlayColor_closure: function _SliderDefaultsM3Year2023_overlayColor_closure(t0) {
      this.$this = t0;
    },
    __RenderSlider_RenderBox_RelayoutWhenSystemFontsChangeMixin: function __RenderSlider_RenderBox_RelayoutWhenSystemFontsChangeMixin() {
    },
    __RenderValueIndicator_RenderBox_RelayoutWhenSystemFontsChangeMixin0: function __RenderValueIndicator_RenderBox_RelayoutWhenSystemFontsChangeMixin0() {
    },
    __SliderState_State_TickerProviderStateMixin: function __SliderState_State_TickerProviderStateMixin() {
    },
    SliderTheme$(child, data) {
      return new A.SliderTheme(data, child, null);
    },
    SliderTheme_of(context) {
      var inheritedTheme = context.dependOnInheritedWidgetOfExactType$1$0(type$.SliderTheme);
      return inheritedTheme != null ? inheritedTheme.data : I.Theme_of(context).sliderTheme;
    },
    SliderTheme: function SliderTheme(t0, t1, t2) {
      this.data = t0;
      this.child = t1;
      this.key = t2;
    },
    ShowValueIndicator: function ShowValueIndicator(t0, t1) {
      this.index = t0;
      this._name = t1;
    },
    Thumb: function Thumb(t0, t1) {
      this.index = t0;
      this._name = t1;
    },
    SliderComponentShape: function SliderComponentShape() {
    },
    SliderTickMarkShape: function SliderTickMarkShape() {
    },
    SliderTrackShape: function SliderTrackShape() {
    },
    RangeSliderThumbShape: function RangeSliderThumbShape() {
    },
    RangeSliderValueIndicatorShape: function RangeSliderValueIndicatorShape() {
    },
    RangeSliderTickMarkShape: function RangeSliderTickMarkShape() {
    },
    RangeSliderTrackShape: function RangeSliderTrackShape() {
    },
    BaseSliderTrackShape: function BaseSliderTrackShape() {
    },
    RoundedRectSliderTrackShape: function RoundedRectSliderTrackShape() {
    },
    BaseRangeSliderTrackShape: function BaseRangeSliderTrackShape() {
    },
    RoundedRectRangeSliderTrackShape: function RoundedRectRangeSliderTrackShape() {
    },
    RoundSliderTickMarkShape: function RoundSliderTickMarkShape(t0) {
      this.tickMarkRadius = t0;
    },
    RoundRangeSliderTickMarkShape: function RoundRangeSliderTickMarkShape() {
    },
    RoundSliderThumbShape: function RoundSliderThumbShape() {
    },
    RoundRangeSliderThumbShape: function RoundRangeSliderThumbShape() {
    },
    RoundSliderOverlayShape: function RoundSliderOverlayShape() {
    },
    RectangularSliderValueIndicatorShape: function RectangularSliderValueIndicatorShape() {
    },
    RectangularRangeSliderValueIndicatorShape: function RectangularRangeSliderValueIndicatorShape() {
    },
    RangeValues: function RangeValues(t0, t1) {
      this.start = t0;
      this.end = t1;
    },
    DropSliderValueIndicatorShape: function DropSliderValueIndicatorShape() {
    },
    RoundedRectSliderValueIndicatorShape: function RoundedRectSliderValueIndicatorShape() {
    },
    _RoundedRectRangeSliderTrackShape_RangeSliderTrackShape_BaseRangeSliderTrackShape: function _RoundedRectRangeSliderTrackShape_RangeSliderTrackShape_BaseRangeSliderTrackShape() {
    },
    _RoundedRectSliderTrackShape_SliderTrackShape_BaseSliderTrackShape: function _RoundedRectSliderTrackShape_SliderTrackShape_BaseSliderTrackShape() {
    },
    TDCheckbox$(backgroundColor, cardMode, checkBoxLeftSpace, contentDirection, customContentBuilder, customIconBuilder, customSpace, disableColor, enable, id, insetSpacing, key, selectColor, showDivider, size, spacing, style, subTitle, subTitleColor, subTitleFont, subTitleMaxLine, title, titleColor, titleFont, titleMaxLine) {
      return new A.TDCheckbox(id, title, titleFont, subTitle, subTitleFont, true, titleMaxLine, subTitleMaxLine, insetSpacing, spacing, style, size, false, showDivider, contentDirection, customIconBuilder, customContentBuilder, backgroundColor, selectColor, disableColor, titleColor, subTitleColor, checkBoxLeftSpace, customSpace, key);
    },
    TDCheckboxStyle: function TDCheckboxStyle(t0, t1) {
      this.index = t0;
      this._name = t1;
    },
    TDContentDirection: function TDContentDirection(t0, t1) {
      this.index = t0;
      this._name = t1;
    },
    TDCheckBoxSize: function TDCheckBoxSize(t0, t1) {
      this.index = t0;
      this._name = t1;
    },
    TDCheckbox: function TDCheckbox(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, t21, t22, t23, t24) {
      var _ = this;
      _.id = t0;
      _.title = t1;
      _.titleFont = t2;
      _.subTitle = t3;
      _.subTitleFont = t4;
      _.enable = t5;
      _.titleMaxLine = t6;
      _.subTitleMaxLine = t7;
      _.insetSpacing = t8;
      _.spacing = t9;
      _.style = t10;
      _.size = t11;
      _.cardMode = t12;
      _.showDivider = t13;
      _.contentDirection = t14;
      _.customIconBuilder = t15;
      _.customContentBuilder = t16;
      _.backgroundColor = t17;
      _.selectColor = t18;
      _.disableColor = t19;
      _.titleColor = t20;
      _.subTitleColor = t21;
      _.checkBoxLeftSpace = t22;
      _.customSpace = t23;
      _.key = t24;
    },
    TDCheckboxState: function TDCheckboxState() {
      var _ = this;
      _.canNotCancel = _._pressed = _.checked = false;
      _._framework$_element = _._widget = null;
    },
    TDCheckboxState_build_closure1: function TDCheckboxState_build_closure1(t0) {
      this.$this = t0;
    },
    TDCheckboxState_build_closure2: function TDCheckboxState_build_closure2(t0) {
      this.$this = t0;
    },
    TDCheckboxState_build_closure0: function TDCheckboxState_build_closure0(t0) {
      this.$this = t0;
    },
    TDCheckboxState_build_closure: function TDCheckboxState_build_closure(t0, t1, t2) {
      this.$this = t0;
      this.id = t1;
      this.groupState = t2;
    },
    TDCheckboxState__pressState_closure: function TDCheckboxState__pressState_closure() {
    },
    TDCheckboxState_onValueChange_closure: function TDCheckboxState_onValueChange_closure(t0, t1, t2, t3) {
      var _ = this;
      _.$this = t0;
      _.value = t1;
      _.groupState = t2;
      _.id = t3;
    },
    RadioCornerIcon: function RadioCornerIcon(t0, t1, t2, t3) {
      var _ = this;
      _.length = t0;
      _.radius = t1;
      _.selectColor = t2;
      _.key = t3;
    },
    RadioCorner: function RadioCorner(t0, t1, t2, t3) {
      var _ = this;
      _.length = t0;
      _.radius = t1;
      _.fillColor = t2;
      _._repaint = t3;
    },
    TDCheckboxGroupContainer$(direction, directionalTdCheckboxes, onCheckBoxGroupChange, selectIds) {
      var t2, t3, t4, t5, t6, _null = null, t1 = {};
      t1.selectIds = selectIds;
      t2 = C.Clip_0;
      t3 = _null;
      t4 = _null;
      if (direction === C.Axis_1)
        t5 = Aa.ListView$separated(new A.TDCheckboxGroupContainer_closure(false, directionalTdCheckboxes), directionalTdCheckboxes.length, C.EdgeInsets_0_0_0_0, Ab.NeverScrollableScrollPhysics_null, C.Axis_1, new A.TDCheckboxGroupContainer_closure0(false), true);
      else {
        t5 = B._arrayInstanceType(directionalTdCheckboxes);
        t6 = t5._eval$1("MappedListIterable<1,Expanded>");
        t6 = O.Row$(B.List_List$of(new B.MappedListIterable(directionalTdCheckboxes, t5._eval$1("Expanded(1)")._as(new A.TDCheckboxGroupContainer_closure1()), t6), true, t6._eval$1("ListIterable.E")), E.CrossAxisAlignment_2, _null, E.MainAxisAlignment_0, E.MainAxisSize_0, 0, _null, _null, E.VerticalDirection_1);
        t5 = F.Container$(_null, t6, C.Clip_0, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null);
      }
      return new A.TDCheckboxGroupContainer(F.Container$(_null, t5, t2, _null, _null, t3, _null, _null, _null, t4, _null, _null, _null, _null), new A.TDCheckboxGroupContainer_closure2(t1, onCheckBoxGroupChange), _null, _null, selectIds, _null, _null, _null, _null, _null, _null, _null, _null);
    },
    TDCheckboxGroup: function TDCheckboxGroup() {
    },
    TDCheckboxGroupState: function TDCheckboxGroupState(t0) {
      this.checkBoxStates = t0;
      this._framework$_element = this._widget = null;
    },
    TDCheckboxGroupState__syncCheckState_closure: function TDCheckboxGroupState__syncCheckState_closure(t0) {
      this.$this = t0;
    },
    TDCheckboxGroupState_toggle_closure: function TDCheckboxGroupState_toggle_closure() {
    },
    TDCheckboxGroupState_toggle_closure0: function TDCheckboxGroupState_toggle_closure0() {
    },
    TDCheckboxGroupState__notifyChange_closure: function TDCheckboxGroupState__notifyChange_closure() {
    },
    TDCheckboxGroupInherited: function TDCheckboxGroupInherited(t0, t1, t2) {
      this.state = t0;
      this.child = t1;
      this.key = t2;
    },
    TDCheckboxGroupContainer: function TDCheckboxGroupContainer(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12) {
      var _ = this;
      _.child = t0;
      _.onChangeGroup = t1;
      _.controller = t2;
      _.maxChecked = t3;
      _.checkedIds = t4;
      _.onOverloadChecked = t5;
      _.titleMaxLine = t6;
      _.customContentBuilder = t7;
      _.spacing = t8;
      _.style = t9;
      _.contentDirection = t10;
      _.customIconBuilder = t11;
      _.key = t12;
    },
    TDCheckboxGroupContainer_closure: function TDCheckboxGroupContainer_closure(t0, t1) {
      this.cardMode = t0;
      this.directionalTdCheckboxes = t1;
    },
    TDCheckboxGroupContainer_closure0: function TDCheckboxGroupContainer_closure0(t0) {
      this.cardMode = t0;
    },
    TDCheckboxGroupContainer_closure1: function TDCheckboxGroupContainer_closure1() {
    },
    TDCheckboxGroupContainer_closure2: function TDCheckboxGroupContainer_closure2(t0, t1) {
      this._box_0 = t0;
      this.onCheckBoxGroupChange = t1;
    },
    TDCheckboxGroupContainerState: function TDCheckboxGroupContainerState(t0) {
      this.checkBoxStates = t0;
      this._framework$_element = this._widget = null;
    },
    TDForm: function TDForm(t0, t1, t2, t3, t4, t5, t6, t7, t8) {
      var _ = this;
      _.items = t0;
      _.data = t1;
      _.isHorizontal = t2;
      _.labelWidth = t3;
      _.rules = t4;
      _.onSubmit = t5;
      _.btnGroup = t6;
      _.formController = t7;
      _.key = t8;
    },
    _TDFormState: function _TDFormState(t0, t1) {
      var _ = this;
      _._formItems = t0;
      _._formData = t1;
      _._isReset = _._isValidate = false;
      _._upDataCount = 1;
      _._framework$_element = _._widget = null;
    },
    _TDFormState_initState_closure: function _TDFormState_initState_closure(t0) {
      this.$this = t0;
    },
    _TDFormState_onReset_closure: function _TDFormState_onReset_closure(t0) {
      this.$this = t0;
    },
    _TDFormState_onSubmit_closure: function _TDFormState_onSubmit_closure(t0, t1) {
      this._box_0 = t0;
      this.$this = t1;
    },
    _TDFormState_onSubmit_closure0: function _TDFormState_onSubmit_closure0(t0) {
      this.$this = t0;
    },
    _TDFormState_build_closure: function _TDFormState_build_closure() {
    },
    _TDFormState_build_closure0: function _TDFormState_build_closure0(t0) {
      this.$this = t0;
    },
    _TDFormState_build_closure1: function _TDFormState_build_closure1(t0) {
      this.$this = t0;
    },
    FormController: function FormController(t0, t1) {
      var _ = this;
      _.eventType = "";
      _.formData = t0;
      _.ChangeNotifier__count = 0;
      _.ChangeNotifier__listeners = t1;
      _.ChangeNotifier__reentrantlyRemovedListeners = _.ChangeNotifier__notificationCallStackDepth = 0;
    },
    _FormController_Object_ChangeNotifier: function _FormController_Object_ChangeNotifier() {
    },
    TDFormInherited: function TDFormInherited(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12) {
      var _ = this;
      _.formData = t0;
      _.labelWidth = t1;
      _.isHorizontal = t2;
      _.isValidate = t3;
      _.rules = t4;
      _.formShowErrorMessage = t5;
      _.requiredMark = t6;
      _.formContentAlign = t7;
      _.onFormDataChange = t8;
      _.isReset = t9;
      _.updataCount = t10;
      _.child = t11;
      _.key = t12;
    },
    TDFormItem$(child, hintText, label, type) {
      return new A.TDFormItem(label, type, child, hintText, null);
    },
    TDFormItemType: function TDFormItemType(t0, t1) {
      this.index = t0;
      this._name = t1;
    },
    TDFormItem: function TDFormItem(t0, t1, t2, t3, t4) {
      var _ = this;
      _.label = t0;
      _.type = t1;
      _.child = t2;
      _.hintText = t3;
      _.key = t4;
    },
    _TDFormItemState: function _TDFormItemState() {
      this._framework$_element = this._widget = this.errorMessage = null;
    },
    _TDFormItemState_startValidation_closure: function _TDFormItemState_startValidation_closure(t0) {
      this.$this = t0;
    },
    _TDFormItemState__buildSelectRow_closure: function _TDFormItemState__buildSelectRow_closure(t0, t1) {
      this.$this = t0;
      this.context = t1;
    },
    TDInputView$(autofocus, contentPadding, controller, cursorColor, focusNode, hintText, hintTextStyle, inputAction, inputDecoration, inputFormatters, inputType, isCollapsed, maxLength, maxLines, obscureText, onChanged, onEditingComplete, onSubmitted, onTapOutside, readOnly, textAlign, textInputBackgroundColor, textStyle) {
      return new A.TDInputView(false, hintText, inputType, onChanged, inputFormatters, controller, maxLines, maxLength, focusNode, false, false, onEditingComplete, onSubmitted, inputDecoration, textStyle, hintTextStyle, textInputBackgroundColor, cursorColor, contentPadding, isCollapsed, textAlign, inputAction, onTapOutside, null);
    },
    TDInputView: function TDInputView(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, t21, t22, t23) {
      var _ = this;
      _.readOnly = t0;
      _.hintText = t1;
      _.inputType = t2;
      _.onChanged = t3;
      _.inputFormatters = t4;
      _.controller = t5;
      _.maxLines = t6;
      _.maxLength = t7;
      _.focusNode = t8;
      _.autofocus = t9;
      _.obscureText = t10;
      _.onEditingComplete = t11;
      _.onSubmitted = t12;
      _.inputDecoration = t13;
      _.textStyle = t14;
      _.hintTextStyle = t15;
      _.textInputBackgroundColor = t16;
      _.cursorColor = t17;
      _.contentPadding = t18;
      _.isCollapsed = t19;
      _.textAlign = t20;
      _.inputAction = t21;
      _.onTapOutside = t22;
      _.key = t23;
    },
    TDInputType: function TDInputType(t0, t1) {
      this.index = t0;
      this._name = t1;
    },
    TDInputSize: function TDInputSize(t0, t1) {
      this.index = t0;
      this._name = t1;
    },
    TDInput: function TDInput(t0, t1, t2, t3, t4) {
      var _ = this;
      _.onChanged = t0;
      _.controller = t1;
      _.inputDecoration = t2;
      _.spacer = t3;
      _._leftLabelWidth = 0;
      _.key = t4;
    },
    TDInput_buildNormalInput_closure: function TDInput_buildNormalInput_closure(t0) {
      this.$this = t0;
    },
    TDInputSpacer: function TDInputSpacer() {
      var _ = this;
      _.additionInfoSpace = _.rightSpace = _.inputRightSpace = _.labelInputSpace = _.iconLabelSpace = null;
    },
    TDRadio$(id, showDivider, subTitle, title) {
      var _null = null;
      return new A.TDRadio(id, title, _null, subTitle, _null, true, 1, 1, _null, _null, _null, D.TDCheckBoxSize_1, false, false, D.TDContentDirection_1, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null);
    },
    TDRadioGroup$(direction, directionalTdRadios, onRadioGroupChange, selectId) {
      var t4, t5, _null = null,
        t1 = C.Clip_0,
        t2 = _null,
        t3 = _null;
      if (direction === C.Axis_1)
        t4 = Aa.ListView$separated(new A.TDRadioGroup_closure(false, directionalTdRadios), directionalTdRadios.length, C.EdgeInsets_0_0_0_0, Ab.NeverScrollableScrollPhysics_null, C.Axis_1, new A.TDRadioGroup_closure0(false), true);
      else {
        t4 = B._arrayInstanceType(directionalTdRadios);
        t5 = t4._eval$1("MappedListIterable<1,Expanded>");
        t5 = B._setArrayType([O.Row$(B.List_List$of(new B.MappedListIterable(directionalTdRadios, t4._eval$1("Expanded(1)")._as(new A.TDRadioGroup_closure1()), t5), true, t5._eval$1("ListIterable.E")), E.CrossAxisAlignment_0, _null, E.MainAxisAlignment_0, E.MainAxisSize_0, 0, _null, _null, E.VerticalDirection_1)], type$.JSArray_Widget);
        t4 = P.Column$(t5, E.CrossAxisAlignment_2, _null, E.MainAxisAlignment_0, E.MainAxisSize_1, 0, _null, _null, E.VerticalDirection_1);
        t4 = F.Container$(_null, t4, C.Clip_0, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null);
      }
      t3 = F.Container$(_null, t4, t1, _null, _null, t2, _null, _null, _null, t3, _null, _null, _null, _null);
      t1 = selectId != null ? B._setArrayType([selectId], type$.JSArray_String) : _null;
      return new A.TDRadioGroup(t3, new A.TDRadioGroup_closure2(onRadioGroupChange), _null, 1, t1, _null, _null, _null, _null, _null, _null, _null, _null);
    },
    TDRadioStyle: function TDRadioStyle(t0, t1) {
      this.index = t0;
      this._name = t1;
    },
    TDRadio: function TDRadio(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, t21, t22, t23, t24) {
      var _ = this;
      _.id = t0;
      _.title = t1;
      _.titleFont = t2;
      _.subTitle = t3;
      _.subTitleFont = t4;
      _.enable = t5;
      _.titleMaxLine = t6;
      _.subTitleMaxLine = t7;
      _.insetSpacing = t8;
      _.spacing = t9;
      _.style = t10;
      _.size = t11;
      _.cardMode = t12;
      _.showDivider = t13;
      _.contentDirection = t14;
      _.customIconBuilder = t15;
      _.customContentBuilder = t16;
      _.backgroundColor = t17;
      _.selectColor = t18;
      _.disableColor = t19;
      _.titleColor = t20;
      _.subTitleColor = t21;
      _.checkBoxLeftSpace = t22;
      _.customSpace = t23;
      _.key = t24;
    },
    TDRadioState: function TDRadioState() {
      var _ = this;
      _.canNotCancel = _._pressed = _.checked = false;
      _._framework$_element = _._widget = null;
    },
    TDRadioGroup: function TDRadioGroup(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12) {
      var _ = this;
      _.child = t0;
      _.onChangeGroup = t1;
      _.controller = t2;
      _.maxChecked = t3;
      _.checkedIds = t4;
      _.onOverloadChecked = t5;
      _.titleMaxLine = t6;
      _.customContentBuilder = t7;
      _.spacing = t8;
      _.style = t9;
      _.contentDirection = t10;
      _.customIconBuilder = t11;
      _.key = t12;
    },
    TDRadioGroup_closure: function TDRadioGroup_closure(t0, t1) {
      this.cardMode = t0;
      this.directionalTdRadios = t1;
    },
    TDRadioGroup_closure0: function TDRadioGroup_closure0(t0) {
      this.cardMode = t0;
    },
    TDRadioGroup_closure1: function TDRadioGroup_closure1() {
    },
    TDRadioGroup_closure2: function TDRadioGroup_closure2(t0) {
      this.onRadioGroupChange = t0;
    },
    TDRadioGroupState: function TDRadioGroupState(t0) {
      this.checkBoxStates = t0;
      this._framework$_element = this._widget = null;
    },
    TDRadioGroupState_toggle_closure: function TDRadioGroupState_toggle_closure(t0) {
      this.$this = t0;
    },
    TDSlider: function TDSlider(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.value = t0;
      _.leftLabel = t1;
      _.rightLabel = t2;
      _.onChanged = t3;
      _.sliderThemeData = t4;
      _.key = t5;
    },
    TDSliderState: function TDSliderState(t0) {
      var _ = this;
      _._sliderKey = t0;
      _.value = 0;
      _._framework$_element = _._widget = null;
    },
    TDSliderState_build_closure1: function TDSliderState_build_closure1(t0, t1) {
      this.$this = t0;
      this.tdSliderThemeData = t1;
    },
    TDSliderState_build_closure0: function TDSliderState_build_closure0(t0) {
      this.$this = t0;
    },
    TDSliderState_build_closure: function TDSliderState_build_closure(t0) {
      this.$this = t0;
    },
    TDSliderState_build__closure: function TDSliderState_build__closure(t0, t1) {
      this.$this = t0;
      this.slideValue = t1;
    },
    TDRangeSlider: function TDRangeSlider(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.value = t0;
      _.leftLabel = t1;
      _.rightLabel = t2;
      _.onChanged = t3;
      _.sliderThemeData = t4;
      _.key = t5;
    },
    _TDRangeSliderState: function _TDRangeSliderState(t0, t1) {
      var _ = this;
      _.rangeValues = t0;
      _._sliderRangeKey = t1;
      _._framework$_element = _._widget = null;
    },
    _TDRangeSliderState_build_closure1: function _TDRangeSliderState_build_closure1(t0, t1) {
      this.$this = t0;
      this.tdSliderThemeData = t1;
    },
    _TDRangeSliderState_build_closure0: function _TDRangeSliderState_build_closure0(t0, t1) {
      this.$this = t0;
      this.context = t1;
    },
    _TDRangeSliderState_build_closure: function _TDRangeSliderState_build_closure(t0) {
      this.$this = t0;
    },
    _TDRangeSliderState_build__closure: function _TDRangeSliderState_build__closure(t0, t1) {
      this.$this = t0;
      this.slideValue = t1;
    },
    TDSliderThemeData$(divisions, max, min, scaleFormatter, showScaleValue, showThumbValue) {
      var _null = null,
        t1 = F.TextStyle$(_null, _null, G.TDColors_get_fontGyColor1(G.TDTheme_of(_null)), _null, _null, _null, _null, _null, _null, _null, _null, 14, _null, _null, _null, _null, _null, true, _null, _null, _null, _null, _null, _null, _null, _null),
        t2 = F.TextStyle$(_null, _null, G.TDColors_get_fontGyColor4(G.TDTheme_of(_null)), _null, _null, _null, _null, _null, _null, _null, _null, 14, _null, _null, _null, _null, _null, true, _null, _null, _null, _null, _null, _null, _null, _null),
        t3 = F.TextStyle$(_null, _null, G.TDColors_get_fontGyColor1(G.TDTheme_of(_null)), _null, _null, _null, _null, _null, _null, _null, _null, 14, _null, _null, _null, _null, _null, true, _null, _null, _null, _null, _null, _null, _null, _null),
        t4 = F.TextStyle$(_null, _null, G.TDColors_get_fontGyColor4(G.TDTheme_of(_null)), _null, _null, _null, _null, _null, _null, _null, _null, 14, _null, _null, _null, _null, _null, true, _null, _null, _null, _null, _null, _null, _null, _null);
      return new A.TDSliderThemeData(showThumbValue, t3, t4, showScaleValue, scaleFormatter, t1, t2, divisions, min, max, new A.SliderMeasureData());
    },
    TDSliderThemeData: function TDSliderThemeData(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10) {
      var _ = this;
      _.showThumbValue = t0;
      _.thumbTextStyle = t1;
      _.disabledThumbTextStyle = t2;
      _.showScaleValue = t3;
      _.scaleFormatter = t4;
      _.scaleTextStyle = t5;
      _.disabledScaleTextStyle = t6;
      _.divisions = t7;
      _.min = t8;
      _.max = t9;
      _.sliderMeasureData = t10;
      _._sliderThemeData = null;
    },
    SliderMeasureData: function SliderMeasureData() {
      var _ = this;
      _.endRangeThumbTextRect = _.startRangeThumbTextRect = _.thumbTextRect = _.trackerRect = null;
    },
    TDRoundedRectSliderTrackShape: function TDRoundedRectSliderTrackShape(t0) {
      this.themeData = t0;
    },
    TDRoundSliderThumbShape: function TDRoundSliderThumbShape(t0) {
      this.themeData = t0;
    },
    TDNoOverlayShape: function TDNoOverlayShape() {
    },
    TDRoundSliderTickMarkShape: function TDRoundSliderTickMarkShape(t0) {
      this.themeData = t0;
    },
    TDBaseRangeSliderTrackShape: function TDBaseRangeSliderTrackShape() {
    },
    TDRoundedRectRangeSliderTrackShape: function TDRoundedRectRangeSliderTrackShape(t0) {
      this.themeData = t0;
    },
    TDRoundRangeSliderThumbShape: function TDRoundRangeSliderThumbShape(t0) {
      this.themeData = t0;
    },
    TDRoundRangeSliderTickMarkShape: function TDRoundRangeSliderTickMarkShape(t0) {
      this.themeData = t0;
    },
    _TDRoundedRectRangeSliderTrackShape_RangeSliderTrackShape_TDBaseRangeSliderTrackShape: function _TDRoundedRectRangeSliderTrackShape_RangeSliderTrackShape_TDBaseRangeSliderTrackShape() {
    },
    _TDRoundedRectSliderTrackShape_SliderTrackShape_BaseSliderTrackShape: function _TDRoundedRectSliderTrackShape_SliderTrackShape_BaseSliderTrackShape() {
    },
    MapExt_count(_this, test, $K, $V) {
      var t1 = {};
      t1.count = 0;
      _this.forEach$1(0, new A.MapExt_count_closure(t1, test, $K, $V));
      return t1.count;
    },
    MapExt_where(_this, test, $K, $V) {
      var r = B.LinkedHashMap_LinkedHashMap$_empty($K, $V);
      _this.forEach$1(0, new A.MapExt_where_closure(test, r, $K, $V));
      return r;
    },
    MapExt_count_closure: function MapExt_count_closure(t0, t1, t2, t3) {
      var _ = this;
      _._box_0 = t0;
      _.test = t1;
      _.K = t2;
      _.V = t3;
    },
    MapExt_where_closure: function MapExt_where_closure(t0, t1, t2, t3) {
      var _ = this;
      _.test = t0;
      _.r = t1;
      _.K = t2;
      _.V = t3;
    },
    TDDivider$(margin) {
      var _null = null;
      return new K.TDDivider(_null, margin, _null, _null, _null);
    }
  },
  D, A2, Ab, Al, W, Am, Q, Y, S, Ac, Ad, T, M, A3, An, Z, U, A4, N, I, Ae, E, Ao, A5, Ap, F, Aq, A6, A1, Ar, As, A7, H, P, R, A8, Af, At, Ag;
  J = holdersList[1];
  B = holdersList[0];
  C = holdersList[2];
  G = holdersList[66];
  A9 = holdersList[87];
  A_ = holdersList[179];
  Ah = holdersList[62];
  K = holdersList[55];
  V = holdersList[174];
  Ai = holdersList[105];
  X = holdersList[132];
  Aa = holdersList[45];
  A0 = holdersList[201];
  Aj = holdersList[68];
  Ak = holdersList[33];
  O = holdersList[131];
  L = holdersList[27];
  A = hunkHelpers.updateHolder(holdersList[10], A);
  D = holdersList[195];
  A2 = holdersList[22];
  Ab = holdersList[170];
  Al = holdersList[30];
  W = holdersList[154];
  Am = holdersList[52];
  Q = holdersList[120];
  Y = holdersList[128];
  S = holdersList[149];
  Ac = holdersList[116];
  Ad = holdersList[198];
  T = holdersList[184];
  M = holdersList[130];
  A3 = holdersList[141];
  An = holdersList[200];
  Z = holdersList[150];
  U = holdersList[123];
  A4 = holdersList[199];
  N = holdersList[144];
  I = holdersList[135];
  Ae = holdersList[61];
  E = holdersList[145];
  Ao = holdersList[111];
  A5 = holdersList[114];
  Ap = holdersList[97];
  F = holdersList[136];
  Aq = holdersList[77];
  A6 = holdersList[91];
  A1 = holdersList[197];
  Ar = holdersList[117];
  As = holdersList[102];
  A7 = holdersList[196];
  H = holdersList[137];
  P = holdersList[121];
  R = holdersList[106];
  A8 = holdersList[193];
  Af = holdersList[115];
  At = holdersList[25];
  Ag = holdersList[188];
  A.QuestionnairePage.prototype = {
    createState$0() {
      var t1 = type$.String,
        t2 = type$.dynamic;
      return new A._QuestionnairePageState(new A.FormController(B.LinkedHashMap_LinkedHashMap$_empty(t1, t2), $.$get$ChangeNotifier__emptyListeners()), B.LinkedHashMap_LinkedHashMap$_empty(t1, t2));
    }
  };
  A._QuestionnairePageState.prototype = {
    initState$0() {
      var t1, t2, t3, t4, t5, t6, t7, _i, q, t8, t9, t10;
      this.super$State$initState();
      for (t1 = this._widget.questionnaire.questions, t2 = t1.length, t3 = this._questionnaire_page$_controller, t4 = type$.List_dynamic, t5 = type$.JSArray_String, t6 = type$.Iterable_dynamic, t7 = type$.String, _i = 0; _i < t1.length; t1.length === t2 || (0, B.throwConcurrentModificationError)(t1), ++_i) {
        q = t1[_i];
        t8 = q.id;
        switch (q.type) {
          case "text":
            t9 = q.answer;
            t9 = B._asStringQ(t9 == null ? "" : t9);
            t3.$indexSet(0, t8, new R.TextEditingController(new B.TextEditingValue(t9, C.TextSelection_kab, C.TextRange_m1_m1), $.$get$ChangeNotifier__emptyListeners()));
            break;
          case "single":
            t9 = q.answer;
            t3.$indexSet(0, t8, t9 == null ? "" : t9);
            break;
          case "multi":
            t9 = q.answer;
            t3.$indexSet(0, t8, t9 != null ? B.List_List$from(t6._as(J.map$1$ax(t9, new A._QuestionnairePageState_initState_closure())), true, t7) : B._setArrayType([], t5));
            break;
          case "number":
            t9 = q.answer;
            if (t9 == null) {
              t9 = q.options;
              t9 = t9.length !== 0 ? B.double_parse(C.JSArray_methods.get$first(t9)) : 0;
              t9 = new A.SliderController(t9, $.$get$ChangeNotifier__emptyListeners());
              t3.$indexSet(0, t8, t9);
            } else {
              t10 = J.getInterceptor$(t9);
              t9 = t4._is(t9) ? new A.RangeValues(B._asDouble(t10.$index(t9, 0)), B._asDouble(J.$index$asx(q.answer, 1))) : B.double_parse(t10.toString$0(t9));
              t9 = new A.SliderController(t9, $.$get$ChangeNotifier__emptyListeners());
            }
            t3.$indexSet(0, t8, t9);
            break;
          default:
            t3.$indexSet(0, t8, "");
            break;
        }
      }
    },
    _onSubmit$2(data, isValid) {
      return this._onSubmit$body$_QuestionnairePageState(type$.Map_String_dynamic._as(data), isValid);
    },
    _onSubmit$body$_QuestionnairePageState(data, isValid) {
      var $async$goto = 0,
        $async$completer = B._makeAsyncAwaitCompleter(type$.void),
        $async$self = this, t1, t2, exception;
      var $async$_onSubmit$2 = B._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return B._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              try {
                t1 = $async$self._framework$_element;
                if (t1 != null) {
                  t2 = A2.CustomMessage$("user", null, null, null, null, new Al.Uuid().v4$0(), B.LinkedHashMap_LinkedHashMap$_literal(["event", "questionnaire", "data", $async$self._widget.questionnaire.toJson$0()], type$.String, type$.dynamic), null, null, null, null, null, null, null);
                  As.Navigator_of(t1, false).pop$1$1(t2, type$.CustomMessage);
                }
              } catch (exception) {
                t1 = $async$self._framework$_element;
                if (t1 != null)
                  Ah.showError(t1, "\u63d0\u4ea4\u5931\u8d25\uff0c\u8bf7\u7a0d\u540e\u518d\u8bd5");
              }
              // implicit return
              return B._asyncReturn(null, $async$completer);
          }
      });
      return B._asyncStartSync($async$_onSubmit$2, $async$completer);
    },
    _onReset$0() {
      var t2, t3, t4, _i, q, t5, t6, _this = this,
        t1 = _this._fC;
      t1.set$formData(0, type$.Map_String_dynamic._as(B.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic)));
      t1.eventType = "reset";
      t1.notifyListeners$0();
      for (t1 = _this._widget.questionnaire.questions, t2 = t1.length, t3 = _this._questionnaire_page$_controller, t4 = type$.JSArray_String, _i = 0; _i < t1.length; t1.length === t2 || (0, B.throwConcurrentModificationError)(t1), ++_i) {
        q = t1[_i];
        t5 = q.id;
        switch (q.type) {
          case "text":
            t5 = t3.$index(0, t5);
            if (t5 != null)
              J.clear$0$ax(t5);
            break;
          case "single":
            t3.$indexSet(0, t5, "");
            break;
          case "multi":
            t3.$indexSet(0, t5, B._setArrayType([], t4));
            break;
          case "number":
            t5 = t3.$index(0, t5);
            if (t5 != null) {
              t6 = q.options;
              J.clear$1$ax(t5, t6.length !== 0 ? B.double_parse(C.JSArray_methods.get$first(t6)) : 0);
            }
            break;
          default:
            t3.$indexSet(0, t5, "");
            break;
        }
      }
      _this.setState$1(new A._QuestionnairePageState__onReset_closure());
    },
    _onChanged$2(qid, value) {
      this._fC.formData.$indexSet(0, qid, value);
      C.JSArray_methods.firstWhere$1(this._widget.questionnaire.questions, new A._QuestionnairePageState__onChanged_closure(qid)).answer = value;
    },
    build$1(context) {
      var _this = this, _null = null,
        t1 = Aj.AppBar$(_null, _null, X.Text$(_this._widget.questionnaire.title, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null)),
        t2 = type$.MediaQuery,
        t3 = B.InheritedModel_inheritFrom(context, _null, t2).data,
        t4 = _this._fC,
        t5 = t4.formData,
        t6 = _this._widget.questionnaire.questions,
        t7 = B._arrayInstanceType(t6),
        t8 = t7._eval$1("MappedListIterable<1,TDFormItem>");
      t8 = B.List_List$of(new B.MappedListIterable(t6, t7._eval$1("TDFormItem(1)")._as(new A._QuestionnairePageState_build_closure(_this, context)), t8), true, t8._eval$1("ListIterable.E"));
      t7 = type$.JSArray_Widget;
      t7 = B._setArrayType([At.StyledWidget_toContainer(A9.StyledList_toRow(B._setArrayType([Q.Expanded$(K.TDButton$(_null, false, _null, _this.get$_onReset(), V.TDButtonSize_0, _null, "\u91cd\u7f6e", _null, V.TDButtonTheme_3, V.TDButtonType_0, _null), 1, _null), D.SizedBox_20_null_null_null, Q.Expanded$(K.TDButton$(_null, false, _null, t4.get$submit(t4), V.TDButtonSize_0, _null, "\u63d0\u4ea4", _null, V.TDButtonTheme_1, V.TDButtonType_0, _null), 1, _null)], t7), E.CrossAxisAlignment_2, E.MainAxisAlignment_0, E.MainAxisSize_1, _null), _null, E.EdgeInsets_16_0_16_0)], t7);
      return Aq.Scaffold$(t1, Ai.SingleChildScrollView$(A2.StyledWidget_toMaterial(new F.SizedBox(Math.min(400, B.InheritedModel_inheritFrom(context, _null, t2).data.size._dx * 0.9), _null, new A.TDForm(t8, t5, false, t3.size._dx * 0.9, D.Map_empty8, _this.get$_onSubmit(), t7, t4, _null), _null)), _null, E.DragStartBehavior_1, T.EdgeInsets_16_16_16_16, _null, C.Axis_1), _null);
    },
    _checkbox$3(context, options, qid) {
      return new Af.LayoutBuilder(new A._QuestionnairePageState__checkbox_closure(this, qid, options), null);
    },
    _radio$3(context, options, qid) {
      return new Af.LayoutBuilder(new A._QuestionnairePageState__radio_closure(this, qid, options), null);
    },
    _slider$3(context, options, qid) {
      return new A.Slider(type$.List_double._as(options), type$.SliderController._as(this._questionnaire_page$_controller.$index(0, qid)), new A._QuestionnairePageState__slider_closure(this, qid), null);
    },
    _questionnaire_page$_input$3(context, hint, qid) {
      var _null = null,
        t1 = type$.nullable_TextEditingController._as(this._questionnaire_page$_controller.$index(0, qid)),
        t2 = A6.InputDecoration$(_null, _null, _null, _null, _null, _null, _null, _null, true, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, hint, _null, _null, _null, _null, _null, _null, _null, _null, _null, true, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null),
        t3 = new A.TDInputSpacer();
      t3.iconLabelSpace = 4;
      t3.additionInfoSpace = t3.rightSpace = t3.inputRightSpace = t3.labelInputSpace = 16;
      return new A.TDInput(new A._QuestionnairePageState__input_closure(this, qid), t1, t2, t3, _null);
    }
  };
  A.SliderController.prototype = {
    clear$1(_, min) {
      this.set$value(0, min);
      return min;
    }
  };
  A.Slider.prototype = {
    createState$0() {
      return new A._SliderState();
    },
    onChanged$1(arg0) {
      return this.onChanged.call$1(arg0);
    }
  };
  A._SliderState.prototype = {
    toggleRange$2(min, max) {
      return this.setState$1(new A._SliderState_toggleRange_closure(this, min, max));
    },
    build$1(context) {
      var min, max, divisions, sTD,
        t1 = this._widget.options,
        t2 = t1.length;
      if (0 >= t2)
        return B.ioore(t1, 0);
      min = t1[0];
      if (1 >= t2)
        return B.ioore(t1, 1);
      max = t1[1];
      if (t2 === 3) {
        if (2 >= t2)
          return B.ioore(t1, 2);
        divisions = C.JSNumber_methods.round$0(t1[2]);
      } else
        divisions = null;
      sTD = divisions == null ? A.TDSliderThemeData$(null, max, min, new A._SliderState_build_closure(), false, true) : A.TDSliderThemeData$(divisions, max, min, new A._SliderState_build_closure0(), true, false);
      return Ak.ValueListenableBuilder$(new A._SliderState_build_closure1(this, min, max, sTD), this._widget.controller, type$.dynamic);
    }
  };
  A.RangeSlider.prototype = {
    createState$0() {
      return new A._RangeSliderState(new R.LayerLink(), null, null);
    }
  };
  A._RangeSliderState.prototype = {
    _range_slider$_handleHoverChanged$1(hovering) {
      if (hovering !== this._range_slider$_hovering)
        this.setState$1(new A._RangeSliderState__handleHoverChanged_closure(this, hovering));
    },
    initState$0() {
      var _this = this, _null = null;
      _this.super$State$initState();
      _this.___RangeSliderState_overlayController_A = F.AnimationController$(_null, C.Duration_100000, _null, _null, _this);
      _this.___RangeSliderState_valueIndicatorController_A = F.AnimationController$(_null, C.Duration_100000, _null, _null, _this);
      _this.___RangeSliderState_enableController_A = F.AnimationController$(_null, E.Duration_75000, _null, _this._widget.onChanged != null ? 1 : 0, _this);
      _this.___RangeSliderState_startPositionController_A = F.AnimationController$(_null, C.Duration_0, _null, _this._unlerp$1(_this._widget.values.start), _this);
      _this.___RangeSliderState_endPositionController_A = F.AnimationController$(_null, C.Duration_0, _null, _this._unlerp$1(_this._widget.values.end), _this);
    },
    didUpdateWidget$1(oldWidget) {
      var t1, isEnabled, _this = this,
        _s16_ = "enableController";
      type$.RangeSlider._as(oldWidget);
      _this.super$State$didUpdateWidget(oldWidget);
      t1 = oldWidget.onChanged;
      if (J.$eq$(t1, _this._widget.onChanged))
        return;
      isEnabled = _this._widget.onChanged != null;
      if (t1 != null !== isEnabled) {
        t1 = _this.___RangeSliderState_enableController_A;
        if (isEnabled) {
          t1 === $ && B.throwLateFieldNI(_s16_);
          t1.forward$0(0);
        } else {
          t1 === $ && B.throwLateFieldNI(_s16_);
          t1.reverse$0(0);
        }
      }
    },
    dispose$0() {
      var _this = this,
        t1 = _this.interactionTimer;
      if (t1 != null)
        t1.cancel$0(0);
      t1 = _this.___RangeSliderState_overlayController_A;
      t1 === $ && B.throwLateFieldNI("overlayController");
      t1.dispose$0();
      t1 = _this.___RangeSliderState_valueIndicatorController_A;
      t1 === $ && B.throwLateFieldNI("valueIndicatorController");
      t1.dispose$0();
      t1 = _this.___RangeSliderState_enableController_A;
      t1 === $ && B.throwLateFieldNI("enableController");
      t1.dispose$0();
      t1 = _this.___RangeSliderState_startPositionController_A;
      t1 === $ && B.throwLateFieldNI("startPositionController");
      t1.dispose$0();
      t1 = _this.___RangeSliderState_endPositionController_A;
      t1 === $ && B.throwLateFieldNI("endPositionController");
      t1.dispose$0();
      t1 = _this.overlayEntry;
      if (t1 != null)
        t1.remove$0(0);
      t1 = _this.overlayEntry;
      if (t1 != null)
        t1.dispose$0();
      _this.overlayEntry = null;
      _this.super$__RangeSliderState_State_TickerProviderStateMixin$dispose();
    },
    _range_slider$_handleChanged$1(values) {
      var lerpValues = this._lerpRangeValues$1(type$.RangeValues._as(values));
      if (!lerpValues.$eq(0, this._widget.values))
        this._widget.onChanged.call$1(lerpValues);
    },
    _lerpRangeValues$1(values) {
      var t3,
        t1 = this._widget,
        t2 = t1.min;
      t1 = t1.max;
      t3 = F.lerpDouble(t2, t1, values.start);
      t3.toString;
      t1 = F.lerpDouble(t2, t1, values.end);
      t1.toString;
      return new A.RangeValues(t3, t1);
    },
    _unlerp$1(value) {
      var t1 = this._widget,
        t2 = t1.max;
      t1 = t1.min;
      return t2 > t1 ? (value - t1) / (t2 - t1) : 0;
    },
    _defaultRangeThumbSelector$6(textDirection, values, tapValue, thumbSize, trackSize, dx) {
      var t1, touchRadius, t2, inStartTouchTarget, t3, inEndTouchTarget, _0_1, towardsEnd, _0_2, towardsStart, _null = null;
      type$.TextDirection._as(textDirection);
      type$.RangeValues._as(values);
      B._asDouble(tapValue);
      t1 = type$.Size;
      t1._as(thumbSize);
      t1._as(trackSize);
      B._asDouble(dx);
      touchRadius = Math.max(thumbSize._dx, 48) / 2;
      t1 = values.start;
      t2 = trackSize._dx;
      inStartTouchTarget = Math.abs(tapValue - t1) * t2 < touchRadius;
      t3 = values.end;
      inEndTouchTarget = Math.abs(tapValue - t3) * t2 < touchRadius;
      if (inStartTouchTarget && inEndTouchTarget) {
        switch (textDirection.index) {
          case 1:
            t1 = new B._Record_2(dx < 0, dx > 0);
            break;
          case 0:
            t1 = new B._Record_2(dx > 0, dx < 0);
            break;
          default:
            t1 = _null;
        }
        _0_1 = t1._0;
        towardsEnd = _null;
        _0_2 = t1._1;
        towardsEnd = _0_2;
        towardsStart = _0_1;
        if (B.boolConversionCheck(towardsStart))
          return D.Thumb_0;
        if (B.boolConversionCheck(towardsEnd))
          return D.Thumb_1;
      } else {
        if (tapValue < t1 || inStartTouchTarget)
          return D.Thumb_0;
        if (tapValue > t3 || inEndTouchTarget)
          return D.Thumb_1;
      }
      return _null;
    },
    build$1(context) {
      var valueIndicatorShape, valueIndicatorColor, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, t21, t22, t23, effectiveMouseCursor, fontSize, fontSizeToScale, _this = this, _null = null, t1 = {},
        theme = I.Theme_of(context),
        sliderTheme = t1.sliderTheme = A.SliderTheme_of(context),
        t2 = B.LinkedHashSet_LinkedHashSet$_empty(type$.WidgetState);
      if (_this._widget.onChanged == null)
        t2.add$1(0, S.WidgetState_6);
      if (_this._range_slider$_hovering)
        t2.add$1(0, S.WidgetState_0);
      if (_this._range_slider$_dragging)
        t2.add$1(0, A7.WidgetState_3);
      valueIndicatorShape = sliderTheme.rangeValueIndicatorShape;
      if (valueIndicatorShape == null)
        valueIndicatorShape = D.C_RectangularRangeSliderValueIndicatorShape;
      valueIndicatorColor = sliderTheme.valueIndicatorColor;
      if (valueIndicatorColor == null) {
        t3 = theme.colorScheme;
        t4 = t3.onSurface;
        t3 = t3.surface;
        valueIndicatorColor = Y.Color_alphaBlend(B.Color$fromARGB(153, t4.toARGB32$0() >>> 16 & 255, t4.toARGB32$0() >>> 8 & 255, t4.toARGB32$0() & 255), B.Color$fromARGB(C.JSNumber_methods.round$0(229.5), t3.toARGB32$0() >>> 16 & 255, t3.toARGB32$0() >>> 8 & 255, t3.toARGB32$0() & 255));
      }
      t3 = sliderTheme.trackHeight;
      if (t3 == null)
        t3 = 4;
      _this._widget.toString;
      t4 = sliderTheme.activeTrackColor;
      if (t4 == null)
        t4 = theme.colorScheme.primary;
      t5 = sliderTheme.inactiveTrackColor;
      if (t5 == null)
        t5 = theme.colorScheme.primary.withOpacity$1(0.24);
      t6 = t1.sliderTheme.disabledActiveTrackColor;
      if (t6 == null) {
        t6 = theme.colorScheme.onSurface;
        t6 = B.Color$fromARGB(82, t6.toARGB32$0() >>> 16 & 255, t6.toARGB32$0() >>> 8 & 255, t6.toARGB32$0() & 255);
      }
      t7 = t1.sliderTheme.disabledInactiveTrackColor;
      if (t7 == null) {
        t7 = theme.colorScheme.onSurface;
        t7 = B.Color$fromARGB(31, t7.toARGB32$0() >>> 16 & 255, t7.toARGB32$0() >>> 8 & 255, t7.toARGB32$0() & 255);
      }
      _this._widget.toString;
      t8 = t1.sliderTheme.activeTickMarkColor;
      if (t8 == null)
        t8 = theme.colorScheme.onPrimary.withOpacity$1(0.54);
      _this._widget.toString;
      t9 = t1.sliderTheme.inactiveTickMarkColor;
      if (t9 == null)
        t9 = theme.colorScheme.primary.withOpacity$1(0.54);
      t10 = t1.sliderTheme.disabledActiveTickMarkColor;
      if (t10 == null)
        t10 = theme.colorScheme.onPrimary.withOpacity$1(0.12);
      t11 = t1.sliderTheme.disabledInactiveTickMarkColor;
      if (t11 == null) {
        t11 = theme.colorScheme.onSurface;
        t11 = B.Color$fromARGB(31, t11.toARGB32$0() >>> 16 & 255, t11.toARGB32$0() >>> 8 & 255, t11.toARGB32$0() & 255);
      }
      _this._widget.toString;
      t12 = t1.sliderTheme;
      t13 = t12.thumbColor;
      if (t13 == null)
        t13 = theme.colorScheme.primary;
      t14 = t12.overlappingShapeStrokeColor;
      if (t14 == null)
        t14 = theme.colorScheme.surface;
      t12 = t12.disabledThumbColor;
      if (t12 == null) {
        t12 = theme.colorScheme;
        t15 = t12.onSurface;
        t12 = Y.Color_alphaBlend(B.Color$fromARGB(97, t15.toARGB32$0() >>> 16 & 255, t15.toARGB32$0() >>> 8 & 255, t15.toARGB32$0() & 255), t12.surface);
      }
      t15 = new A._RangeSliderState_build_effectiveOverlayColor(t1, _this, t2, theme).call$0();
      t16 = t1.sliderTheme;
      t17 = t16.rangeTrackShape;
      if (t17 == null)
        t17 = D.C_RoundedRectRangeSliderTrackShape;
      t18 = t16.rangeTickMarkShape;
      if (t18 == null)
        t18 = D.C_RoundRangeSliderTickMarkShape;
      t19 = t16.rangeThumbShape;
      if (t19 == null)
        t19 = D.C_RoundRangeSliderThumbShape;
      t20 = t16.overlayShape;
      if (t20 == null)
        t20 = D.C_RoundSliderOverlayShape;
      t21 = t16.showValueIndicator;
      if (t21 == null)
        t21 = D.ShowValueIndicator_0;
      t16 = t16.valueIndicatorTextStyle;
      if (t16 == null)
        t16 = theme.textTheme.bodyLarge.copyWith$1$color(theme.colorScheme.onPrimary);
      t22 = t1.sliderTheme;
      t23 = t22.minThumbSeparation;
      if (t23 == null)
        t23 = 8;
      t22 = t22.thumbSelector;
      t1.sliderTheme = sliderTheme.copyWith$23$activeTickMarkColor$activeTrackColor$disabledActiveTickMarkColor$disabledActiveTrackColor$disabledInactiveTickMarkColor$disabledInactiveTrackColor$disabledThumbColor$inactiveTickMarkColor$inactiveTrackColor$minThumbSeparation$overlappingShapeStrokeColor$overlayColor$overlayShape$rangeThumbShape$rangeTickMarkShape$rangeTrackShape$rangeValueIndicatorShape$showValueIndicator$thumbColor$thumbSelector$trackHeight$valueIndicatorColor$valueIndicatorTextStyle(t8, t4, t10, t6, t11, t7, t12, t9, t5, t23, t14, t15, t20, t19, t18, t17, valueIndicatorShape, t21, t13, t22 == null ? _this.get$_defaultRangeThumbSelector() : t22, t3, valueIndicatorColor, t16);
      _this._widget.toString;
      effectiveMouseCursor = U.WidgetStateMouseCursor__clickable(type$.Set_WidgetState._as(t2));
      effectiveMouseCursor = effectiveMouseCursor;
      t2 = t1.sliderTheme.valueIndicatorTextStyle;
      fontSize = t2 == null ? _null : t2.fontSize;
      if (fontSize == null)
        fontSize = 14;
      fontSizeToScale = fontSize === 0 ? 14 : fontSize;
      t2 = B.MediaQuery__maybeOf(context, C._MediaQueryAspect_4);
      t2 = t2 == null ? _null : t2.get$textScaler();
      if (t2 == null)
        t2 = C._LinearTextScaler_1;
      t3 = _this._widget;
      t4 = t3.onChanged;
      t3 = t3.values;
      t5 = _this._unlerp$1(t3.start);
      t3 = _this._unlerp$1(t3.end);
      t6 = _this._widget.divisions;
      t1 = t1.sliderTheme;
      t7 = new A._RangeSliderState_build_screenSize(context).call$0();
      t8 = _this._widget;
      t8 = t8.onChanged != null && t8.max > t8.min ? _this.get$_range_slider$_handleChanged() : _null;
      return A5.FocusableActionDetector$(_null, false, new R.CompositedTransformTarget(_this._range_slider$_layerLink, new A._RangeSliderRenderObjectWidget(new A.RangeValues(t5, t3), t6, _null, t1, fontSizeToScale * t2.textScaleFactor / fontSizeToScale, t7, t8, _null, _null, _null, _this, _this._range_slider$_hovering, _null), _null), t4 != null, _null, false, effectiveMouseCursor, _null, _null, _this.get$_range_slider$_handleHoverChanged(), _null);
    },
    showValueIndicator$0() {
      var t1, t2, _this = this;
      if (_this.overlayEntry == null) {
        _this.overlayEntry = M.OverlayEntry$(new A._RangeSliderState_showValueIndicator_closure(_this), false, false);
        t1 = _this._framework$_element;
        t1.toString;
        _this._widget.toString;
        t1 = Ac.LookupBoundary_findAncestorStateOfType(t1, type$.OverlayState);
        t1.toString;
        t2 = _this.overlayEntry;
        t2.toString;
        t1.insert$1(0, t2);
      }
    },
    $isTickerProvider: 1
  };
  A._RangeSliderRenderObjectWidget.prototype = {
    createRenderObject$1(context) {
      var _this = this,
        t1 = I.Theme_of(context),
        t2 = context.dependOnInheritedWidgetOfExactType$1$0(type$.Directionality).textDirection,
        t3 = I.Theme_of(context);
      return A._RenderRangeSlider$(_this.divisions, B.InheritedModel_inheritFrom(context, C._MediaQueryAspect_18, type$.MediaQuery).data.gestureSettings, _this.hovering, _this.labels, _this.onChangeEnd, _this.onChangeStart, _this.onChanged, t3.platform, _this.screenSize, _this.semanticFormatterCallback, _this.sliderTheme, _this.state, t2, _this.textScaleFactor, t1, _this.values);
    },
    updateRenderObject$2(context, renderObject) {
      var t1, t2, _this = this;
      type$._RenderRangeSlider._as(renderObject);
      renderObject.set$divisions(_this.divisions);
      renderObject.set$values(0, _this.values);
      renderObject.set$labels(0, _this.labels);
      renderObject.set$sliderTheme(_this.sliderTheme);
      renderObject.set$theme(I.Theme_of(context));
      renderObject.set$textScaleFactor(_this.textScaleFactor);
      renderObject.set$screenSize(_this.screenSize);
      renderObject.set$onChanged(_this.onChanged);
      renderObject.set$onChangeStart(_this.onChangeStart);
      renderObject.set$onChangeEnd(_this.onChangeEnd);
      renderObject.set$textDirection(context.dependOnInheritedWidgetOfExactType$1$0(type$.Directionality).textDirection);
      renderObject.set$semanticFormatterCallback(_this.semanticFormatterCallback);
      renderObject.set$platform(0, I.Theme_of(context).platform);
      renderObject.set$hovering(_this.hovering);
      t1 = B.InheritedModel_inheritFrom(context, C._MediaQueryAspect_18, type$.MediaQuery).data.gestureSettings;
      t2 = renderObject.___RenderRangeSlider__drag_A;
      t2 === $ && B.throwLateFieldNI("_drag");
      t2.gestureSettings = t1;
      t2 = renderObject.___RenderRangeSlider__tap_A;
      t2 === $ && B.throwLateFieldNI("_tap");
      t2.gestureSettings = t1;
    }
  };
  A._RenderRangeSlider.prototype = {
    _RenderRangeSlider$16$divisions$gestureSettings$hovering$labels$onChangeEnd$onChangeStart$onChanged$platform$screenSize$semanticFormatterCallback$sliderTheme$state$textDirection$textScaleFactor$theme$values(divisions, gestureSettings, hovering, labels, onChangeEnd, onChangeStart, onChanged, platform, screenSize, semanticFormatterCallback, sliderTheme, state, textDirection, textScaleFactor, theme, values) {
      var team, t1, t2, _this = this, _null = null;
      _this._range_slider$_updateLabelPainter$1(D.Thumb_0);
      _this._range_slider$_updateLabelPainter$1(D.Thumb_1);
      team = new Ae.GestureArenaTeam(B.LinkedHashMap_LinkedHashMap$_empty(type$.int, type$._CombiningGestureArenaMember));
      t1 = I.HorizontalDragGestureRecognizer$(_null, _null);
      t1._team = team;
      t1.set$onStart(0, _this.get$_range_slider$_handleDragStart());
      t1.set$onUpdate(_this.get$_range_slider$_handleDragUpdate());
      t1.set$onEnd(0, _this.get$_range_slider$_handleDragEnd());
      t1.set$onCancel(0, _this.get$_range_slider$_handleDragCancel());
      t1.gestureSettings = gestureSettings;
      _this.___RenderRangeSlider__drag_A = t1;
      t1 = M.TapGestureRecognizer$(_null, _null);
      t1._team = team;
      t1.set$onTapDown(_this.get$_range_slider$_handleTapDown());
      t1.set$onTapUp(_this.get$_range_slider$_handleTapUp());
      t1.gestureSettings = gestureSettings;
      _this.___RenderRangeSlider__tap_A = t1;
      t1 = _this._range_slider$_state;
      t2 = t1.___RangeSliderState_overlayController_A;
      t2 === $ && B.throwLateFieldNI("overlayController");
      _this.___RenderRangeSlider__overlayAnimation_A = F.CurvedAnimation$(E.Cubic_Dkk, t2, _null);
      t2 = t1.___RangeSliderState_valueIndicatorController_A;
      t2 === $ && B.throwLateFieldNI("valueIndicatorController");
      t2 = F.CurvedAnimation$(E.Cubic_Dkk, t2, _null);
      t2.parent.addStatusListener$1(type$.void_Function_AnimationStatus._as(new A._RenderRangeSlider_closure(_this)));
      _this.___RenderRangeSlider__valueIndicatorAnimation_A = t2;
      t1 = t1.___RangeSliderState_enableController_A;
      t1 === $ && B.throwLateFieldNI("enableController");
      _this.___RenderRangeSlider__enableAnimation_A = F.CurvedAnimation$(Z.Cubic_fC5, t1, _null);
    },
    get$_maxSliderPartWidth() {
      var t1 = this.get$_sliderPartSizes(),
        t2 = B._arrayInstanceType(t1);
      return new B.MappedListIterable(t1, t2._eval$1("double(1)")._as(new A._RenderRangeSlider__maxSliderPartWidth_closure()), t2._eval$1("MappedListIterable<1,double>")).reduce$1(0, A1.CONSTANT1);
    },
    get$_maxSliderPartHeight() {
      var t1 = this.get$_sliderPartSizes(),
        t2 = B._arrayInstanceType(t1);
      return new B.MappedListIterable(t1, t2._eval$1("double(1)")._as(new A._RenderRangeSlider__maxSliderPartHeight_closure()), t2._eval$1("MappedListIterable<1,double>")).reduce$1(0, A1.CONSTANT1);
    },
    get$_sliderPartSizes() {
      var t2, t3, t4, _this = this,
        t1 = _this._range_slider$_sliderTheme.overlayShape;
      t1.toString;
      t2 = _this._range_slider$_onChanged;
      t3 = _this._range_slider$_divisions;
      t3 = t3 != null && t3 > 0;
      t3 = t1.getPreferredSize$2(t2 != null, t3);
      t2 = _this._range_slider$_sliderTheme.rangeThumbShape;
      t2.toString;
      t1 = _this._range_slider$_onChanged;
      t4 = _this._range_slider$_divisions;
      t4 = t4 != null && t4 > 0;
      t4 = t2.getPreferredSize$2(t1 != null, t4);
      t1 = _this._range_slider$_sliderTheme;
      return B._setArrayType([t3, t4, t1.rangeTickMarkShape.getPreferredSize$2$isEnabled$sliderTheme(_this._range_slider$_onChanged != null, t1)], type$.JSArray_Size);
    },
    get$_range_slider$_trackRect() {
      var t1 = this._range_slider$_sliderTheme;
      return t1.rangeTrackShape.getPreferredRect$3$isDiscrete$parentBox$sliderTheme(false, this, t1);
    },
    get$_minThumbSeparationValue() {
      var t2,
        t1 = this._range_slider$_divisions;
      if (t1 != null && t1 > 0)
        t1 = 0;
      else {
        t1 = this._range_slider$_sliderTheme.minThumbSeparation;
        t1.toString;
        t2 = this.get$_range_slider$_trackRect();
        t2 = t1 / (t2.right - t2.left);
        t1 = t2;
      }
      return t1;
    },
    set$values(_, newValues) {
      var t2, t3, t4, startDistance, endDistance, _this = this,
        _s23_ = "startPositionController",
        _s21_ = "endPositionController",
        t1 = _this._range_slider$_divisions,
        convertedValues = t1 != null && t1 > 0 ? _this._discretizeRangeValues$1(newValues) : newValues;
      if (convertedValues.$eq(0, _this._range_slider$_values))
        return;
      _this._range_slider$_values = convertedValues;
      t1 = _this._range_slider$_divisions;
      t1 = t1 != null && t1 > 0;
      t2 = _this._range_slider$_state;
      t3 = convertedValues.start;
      t4 = t2.___RangeSliderState_startPositionController_A;
      if (t1) {
        t4 === $ && B.throwLateFieldNI(_s23_);
        t1 = t4.__AnimationController__value_A;
        t1 === $ && B.throwLateFieldNI("_value");
        startDistance = Math.abs(t3 - t1);
        t4.duration = startDistance !== 0 ? new B.Duration(C.JSNumber_methods.round$0(75000 * (1 / startDistance))) : C.Duration_0;
        t4._direction = H._AnimationDirection_0;
        t4._animateToInternal$3$curve$duration(t3, Z.Cubic_fC5, null);
        t1 = _this._range_slider$_values.end;
        t2 = t2.___RangeSliderState_endPositionController_A;
        t2 === $ && B.throwLateFieldNI(_s21_);
        t3 = t2.__AnimationController__value_A;
        t3 === $ && B.throwLateFieldNI("_value");
        endDistance = Math.abs(t1 - t3);
        t2.duration = endDistance !== 0 ? new B.Duration(C.JSNumber_methods.round$0(75000 * (1 / endDistance))) : C.Duration_0;
        t2._direction = H._AnimationDirection_0;
        t2._animateToInternal$3$curve$duration(t1, Z.Cubic_fC5, null);
      } else {
        t4 === $ && B.throwLateFieldNI(_s23_);
        t4.set$value(0, t3);
        t1 = t2.___RangeSliderState_endPositionController_A;
        t1 === $ && B.throwLateFieldNI(_s21_);
        t1.set$value(0, convertedValues.end);
      }
      _this.markNeedsSemanticsUpdate$0();
    },
    set$platform(_, value) {
      if (this._range_slider$_platform === value)
        return;
      this._range_slider$_platform = value;
      this.markNeedsSemanticsUpdate$0();
    },
    set$semanticFormatterCallback(value) {
      return;
    },
    set$divisions(value) {
      if (value == this._range_slider$_divisions)
        return;
      this._range_slider$_divisions = value;
      this.markNeedsPaint$0();
    },
    set$labels(_, labels) {
      return;
    },
    set$sliderTheme(value) {
      if (value.$eq(0, this._range_slider$_sliderTheme))
        return;
      this._range_slider$_sliderTheme = value;
      this.markNeedsPaint$0();
    },
    set$theme(value) {
      if (value.$eq(0, this._range_slider$_theme))
        return;
      this._range_slider$_theme = value;
      this.markNeedsPaint$0();
    },
    set$textScaleFactor(value) {
      var _this = this;
      if (value === _this._range_slider$_textScaleFactor)
        return;
      _this._range_slider$_textScaleFactor = value;
      _this._range_slider$_updateLabelPainter$1(D.Thumb_0);
      _this._range_slider$_updateLabelPainter$1(D.Thumb_1);
    },
    set$screenSize(value) {
      if (value.$eq(0, this._range_slider$_screenSize))
        return;
      this._range_slider$_screenSize = value;
      this.markNeedsPaint$0();
    },
    set$onChanged(value) {
      var t1, _this = this;
      type$.nullable_void_Function_RangeValues._as(value);
      if (J.$eq$(value, _this._range_slider$_onChanged))
        return;
      t1 = _this._range_slider$_onChanged;
      _this.set$_range_slider$_onChanged(value);
      if (t1 != null !== (_this._range_slider$_onChanged != null)) {
        _this.markNeedsPaint$0();
        _this.markNeedsSemanticsUpdate$0();
      }
    },
    set$textDirection(value) {
      var _this = this;
      if (value === _this._range_slider$_textDirection)
        return;
      _this._range_slider$_textDirection = value;
      _this._range_slider$_updateLabelPainter$1(D.Thumb_0);
      _this._range_slider$_updateLabelPainter$1(D.Thumb_1);
    },
    set$hovering(value) {
      if (value === this._range_slider$_hovering)
        return;
      this._range_slider$_hovering = value;
      this._range_slider$_updateForHover$1(value);
    },
    set$hoveringStartThumb(value) {
      var _this = this;
      if (value === _this._hoveringStartThumb)
        return;
      _this._hoveringStartThumb = value;
      _this._range_slider$_updateForHover$1(_this._range_slider$_hovering);
    },
    set$hoveringEndThumb(value) {
      var _this = this;
      if (value === _this._hoveringEndThumb)
        return;
      _this._hoveringEndThumb = value;
      _this._range_slider$_updateForHover$1(_this._range_slider$_hovering);
    },
    _range_slider$_updateForHover$1(hovered) {
      var t1, t2,
        _s17_ = "overlayController";
      if (hovered)
        t1 = this._hoveringStartThumb || this._hoveringEndThumb;
      else
        t1 = false;
      t2 = this._range_slider$_state.___RangeSliderState_overlayController_A;
      if (t1) {
        t2 === $ && B.throwLateFieldNI(_s17_);
        t2.forward$0(0);
      } else {
        t2 === $ && B.throwLateFieldNI(_s17_);
        t2.reverse$0(0);
      }
    },
    get$showValueIndicator() {
      switch (this._range_slider$_sliderTheme.showValueIndicator.index) {
        case 0:
          var t1 = this._range_slider$_divisions;
          t1 = t1 != null && t1 > 0;
          break;
        case 1:
          t1 = this._range_slider$_divisions;
          t1 = !(t1 != null && t1 > 0);
          break;
        case 2:
          t1 = true;
          break;
        case 3:
          t1 = false;
          break;
        default:
          t1 = null;
      }
      return t1;
    },
    get$_thumbSize() {
      var t2, t3,
        t1 = this._range_slider$_sliderTheme.rangeThumbShape;
      t1.toString;
      t2 = this._range_slider$_onChanged;
      t3 = this._range_slider$_divisions;
      t3 = t3 != null && t3 > 0;
      return t1.getPreferredSize$2(t2 != null, t3);
    },
    get$_range_slider$_adjustmentUnit() {
      switch (this._range_slider$_platform.index) {
        case 2:
          return 0.1;
        case 0:
        case 1:
        case 3:
        case 4:
        case 5:
          return 0.05;
      }
    },
    _range_slider$_updateLabelPainter$1(thumb) {
      return;
    },
    systemFontsDidChange$0() {
      var _this = this;
      _this.super$RelayoutWhenSystemFontsChangeMixin$systemFontsDidChange();
      _this._startLabelPainter.markNeedsLayout$0();
      _this._endLabelPainter.markNeedsLayout$0();
      _this._range_slider$_updateLabelPainter$1(D.Thumb_0);
      _this._range_slider$_updateLabelPainter$1(D.Thumb_1);
    },
    attach$1(owner) {
      var t1, t2, t3, _this = this;
      _this.super$__RenderRangeSlider_RenderBox_RelayoutWhenSystemFontsChangeMixin$attach(owner);
      t1 = _this.___RenderRangeSlider__overlayAnimation_A;
      t1 === $ && B.throwLateFieldNI("_overlayAnimation");
      t2 = type$.void_Function._as(_this.get$markNeedsPaint());
      t1.parent.addListener$1(0, t2);
      t1 = _this.___RenderRangeSlider__valueIndicatorAnimation_A;
      t1 === $ && B.throwLateFieldNI("_valueIndicatorAnimation");
      t1.parent.addListener$1(0, t2);
      t1 = _this.___RenderRangeSlider__enableAnimation_A;
      t1 === $ && B.throwLateFieldNI("_enableAnimation");
      t1.parent.addListener$1(0, t2);
      t1 = _this._range_slider$_state;
      t3 = t1.___RangeSliderState_startPositionController_A;
      t3 === $ && B.throwLateFieldNI("startPositionController");
      t3.didRegisterListener$0();
      t3.AnimationLocalListenersMixin__listeners.add$1(0, t2);
      t1 = t1.___RangeSliderState_endPositionController_A;
      t1 === $ && B.throwLateFieldNI("endPositionController");
      t1.didRegisterListener$0();
      t1.AnimationLocalListenersMixin__listeners.add$1(0, t2);
    },
    detach$0(_) {
      var t2, t3, _this = this,
        t1 = _this.___RenderRangeSlider__overlayAnimation_A;
      t1 === $ && B.throwLateFieldNI("_overlayAnimation");
      t2 = type$.void_Function._as(_this.get$markNeedsPaint());
      t1.parent.removeListener$1(0, t2);
      t1 = _this.___RenderRangeSlider__valueIndicatorAnimation_A;
      t1 === $ && B.throwLateFieldNI("_valueIndicatorAnimation");
      t1.parent.removeListener$1(0, t2);
      t1 = _this.___RenderRangeSlider__enableAnimation_A;
      t1 === $ && B.throwLateFieldNI("_enableAnimation");
      t1.parent.removeListener$1(0, t2);
      t1 = _this._range_slider$_state;
      t3 = t1.___RangeSliderState_startPositionController_A;
      t3 === $ && B.throwLateFieldNI("startPositionController");
      t3.removeListener$1(0, t2);
      t1 = t1.___RangeSliderState_endPositionController_A;
      t1 === $ && B.throwLateFieldNI("endPositionController");
      t1.removeListener$1(0, t2);
      _this.super$__RenderRangeSlider_RenderBox_RelayoutWhenSystemFontsChangeMixin$detach(0);
    },
    dispose$0() {
      var _this = this,
        t1 = _this.___RenderRangeSlider__drag_A;
      t1 === $ && B.throwLateFieldNI("_drag");
      t1._velocityTrackers.clear$0(0);
      t1.super$OneSequenceGestureRecognizer$dispose();
      t1 = _this.___RenderRangeSlider__tap_A;
      t1 === $ && B.throwLateFieldNI("_tap");
      t1._stopTimer$0();
      t1.super$OneSequenceGestureRecognizer$dispose();
      _this._startLabelPainter.dispose$0();
      _this._endLabelPainter.dispose$0();
      t1 = _this.___RenderRangeSlider__enableAnimation_A;
      t1 === $ && B.throwLateFieldNI("_enableAnimation");
      t1.dispose$0();
      t1 = _this.___RenderRangeSlider__valueIndicatorAnimation_A;
      t1 === $ && B.throwLateFieldNI("_valueIndicatorAnimation");
      t1.dispose$0();
      t1 = _this.___RenderRangeSlider__overlayAnimation_A;
      t1 === $ && B.throwLateFieldNI("_overlayAnimation");
      t1.dispose$0();
      _this.super$RenderObject$dispose();
    },
    _range_slider$_getValueFromVisualPosition$1(visualPosition) {
      var t1;
      switch (this._range_slider$_textDirection.index) {
        case 0:
          t1 = 1 - visualPosition;
          break;
        case 1:
          t1 = visualPosition;
          break;
        default:
          t1 = null;
      }
      return t1;
    },
    _getValueFromGlobalPosition$1(globalPosition) {
      var _this = this,
        t1 = _this.globalToLocal$1(globalPosition),
        t2 = _this.get$_range_slider$_trackRect(),
        t3 = _this.get$_range_slider$_trackRect();
      return _this._range_slider$_getValueFromVisualPosition$1((t1._dx - t2.left) / (t3.right - t3.left));
    },
    _range_slider$_discretize$1(value) {
      var result = B.clampDouble(value, 0, 1),
        t1 = this._range_slider$_divisions;
      if (t1 != null && t1 > 0) {
        t1.toString;
        result = C.JSNumber_methods.round$0(result * t1) / t1;
      }
      return result;
    },
    _discretizeRangeValues$1(values) {
      return new A.RangeValues(this._range_slider$_discretize$1(values.start), this._range_slider$_discretize$1(values.end));
    },
    _range_slider$_startInteraction$1(globalPosition) {
      var t1, tapValue, t2, currentValues, t3, _this = this;
      if (_this._range_slider$_active)
        return;
      t1 = _this._range_slider$_state;
      t1.showValueIndicator$0();
      tapValue = B.clampDouble(_this._getValueFromGlobalPosition$1(globalPosition), 0, 1);
      t2 = _this._range_slider$_sliderTheme.thumbSelector;
      t2.toString;
      _this.set$_lastThumbSelection(t2.call$6(_this._range_slider$_textDirection, _this._range_slider$_values, tapValue, _this.get$_thumbSize(), _this.get$size(0), 0));
      if (_this._lastThumbSelection != null) {
        _this._range_slider$_active = true;
        currentValues = _this._discretizeRangeValues$1(_this._range_slider$_values);
        t2 = _this._lastThumbSelection;
        switch (t2.index) {
          case 0:
            t3 = new A.RangeValues(tapValue, currentValues.end);
            break;
          case 1:
            t3 = new A.RangeValues(currentValues.start, tapValue);
            break;
          default:
            t3 = null;
        }
        _this.___RenderRangeSlider__newValues_A = type$.RangeValues._as(t3);
        _this._range_slider$_updateLabelPainter$1(t2);
        t2 = _this.onChangeStart;
        if (t2 != null)
          t2.call$1(currentValues);
        t2 = _this._range_slider$_onChanged;
        t2.toString;
        t2.call$1(_this._discretizeRangeValues$1(_this.___RenderRangeSlider__newValues_A));
        t2 = t1.___RangeSliderState_overlayController_A;
        t2 === $ && B.throwLateFieldNI("overlayController");
        t2.forward$0(0);
        if (_this.get$showValueIndicator()) {
          t2 = t1.___RangeSliderState_valueIndicatorController_A;
          t2 === $ && B.throwLateFieldNI("valueIndicatorController");
          t2.forward$0(0);
          t2 = t1.interactionTimer;
          if (t2 != null)
            t2.cancel$0(0);
          t1.interactionTimer = B.Timer_Timer(new B.Duration(500000), new A._RenderRangeSlider__startInteraction_closure(_this));
        }
      }
    },
    _range_slider$_handleDragUpdate$1(details) {
      var dragValue, t2, shouldCallOnChangeStart, currentValues, currentDragValue, _this = this,
        t1 = _this._range_slider$_state;
      if (t1._framework$_element == null)
        return;
      dragValue = _this._getValueFromGlobalPosition$1(details.globalPosition);
      if (_this._lastThumbSelection == null) {
        t2 = _this._range_slider$_sliderTheme.thumbSelector;
        t2.toString;
        _this.set$_lastThumbSelection(t2.call$6(_this._range_slider$_textDirection, _this._range_slider$_values, dragValue, _this.get$_thumbSize(), _this.get$size(0), details.delta._dx));
        shouldCallOnChangeStart = _this._lastThumbSelection != null;
        if (shouldCallOnChangeStart) {
          _this._range_slider$_active = true;
          t2 = t1.___RangeSliderState_overlayController_A;
          t2 === $ && B.throwLateFieldNI("overlayController");
          t2.forward$0(0);
          if (_this.get$showValueIndicator()) {
            t1 = t1.___RangeSliderState_valueIndicatorController_A;
            t1 === $ && B.throwLateFieldNI("valueIndicatorController");
            t1.forward$0(0);
          }
        }
      } else
        shouldCallOnChangeStart = false;
      if (_this._range_slider$_onChanged != null && _this._lastThumbSelection != null) {
        currentValues = _this._discretizeRangeValues$1(_this._range_slider$_values);
        t1 = _this.onChangeStart;
        if (t1 != null && shouldCallOnChangeStart)
          t1.call$1(currentValues);
        currentDragValue = _this._range_slider$_discretize$1(dragValue);
        switch (_this._lastThumbSelection.index) {
          case 0:
            t1 = currentValues.end;
            t1 = new A.RangeValues(Math.min(currentDragValue, t1 - _this.get$_minThumbSeparationValue()), t1);
            break;
          case 1:
            t1 = currentValues.start;
            t1 = new A.RangeValues(t1, Math.max(currentDragValue, t1 + _this.get$_minThumbSeparationValue()));
            break;
          default:
            t1 = null;
        }
        type$.RangeValues._as(t1);
        _this.___RenderRangeSlider__newValues_A = t1;
        _this._range_slider$_onChanged.call$1(t1);
      }
    },
    _range_slider$_endInteraction$0() {
      var t2, discreteValues, _this = this,
        t1 = _this._range_slider$_state;
      if (t1._framework$_element == null)
        return;
      if (_this.get$showValueIndicator() && t1.interactionTimer == null) {
        t2 = t1.___RangeSliderState_valueIndicatorController_A;
        t2 === $ && B.throwLateFieldNI("valueIndicatorController");
        t2.reverse$0(0);
      }
      if (_this._range_slider$_active && t1._framework$_element != null && _this._lastThumbSelection != null) {
        t2 = _this.___RenderRangeSlider__newValues_A;
        t2 === $ && B.throwLateFieldNI("_newValues");
        discreteValues = _this._discretizeRangeValues$1(t2);
        t2 = _this.onChangeEnd;
        if (t2 != null)
          t2.call$1(discreteValues);
        _this._range_slider$_active = false;
      }
      t1 = t1.___RangeSliderState_overlayController_A;
      t1 === $ && B.throwLateFieldNI("overlayController");
      t1.reverse$0(0);
    },
    _range_slider$_handleDragStart$1(details) {
      this._range_slider$_startInteraction$1(details.globalPosition);
    },
    _range_slider$_handleDragEnd$1(details) {
      this._range_slider$_endInteraction$0();
    },
    _range_slider$_handleDragCancel$0() {
      this._range_slider$_endInteraction$0();
    },
    _range_slider$_handleTapDown$1(details) {
      this._range_slider$_startInteraction$1(details.globalPosition);
    },
    _range_slider$_handleTapUp$1(details) {
      this._range_slider$_endInteraction$0();
    },
    hitTestSelf$1(position) {
      return true;
    },
    handleEvent$2($event, entry) {
      var t1, _this = this;
      type$.HitTestEntry_HitTestTarget._as(entry);
      if (type$.PointerDownEvent._is($event) && _this._range_slider$_onChanged != null) {
        t1 = _this.___RenderRangeSlider__drag_A;
        t1 === $ && B.throwLateFieldNI("_drag");
        t1.addPointer$1($event);
        t1 = _this.___RenderRangeSlider__tap_A;
        t1 === $ && B.throwLateFieldNI("_tap");
        t1.addPointer$1($event);
      }
      if (_this._range_slider$_onChanged != null) {
        t1 = _this.overlayStartRect;
        if (t1 != null)
          _this.set$hoveringStartThumb(t1.contains$1(0, $event.get$localPosition()));
        t1 = _this.overlayEndRect;
        if (t1 != null)
          _this.set$hoveringEndThumb(t1.contains$1(0, $event.get$localPosition()));
      }
    },
    computeMinIntrinsicWidth$1(height) {
      B._asDouble(height);
      return 144 + this.get$_maxSliderPartWidth();
    },
    computeMaxIntrinsicWidth$1(height) {
      B._asDouble(height);
      return 144 + this.get$_maxSliderPartWidth();
    },
    computeMinIntrinsicHeight$1(width) {
      var t1;
      B._asDouble(width);
      t1 = this._range_slider$_sliderTheme.trackHeight;
      t1.toString;
      return Math.max(t1, this.get$_maxSliderPartHeight());
    },
    computeMaxIntrinsicHeight$1(width) {
      var t1;
      B._asDouble(width);
      t1 = this._range_slider$_sliderTheme.trackHeight;
      t1.toString;
      return Math.max(t1, this.get$_maxSliderPartHeight());
    },
    get$sizedByParent() {
      return true;
    },
    computeDryLayout$1(constraints) {
      var t2,
        t1 = constraints.maxWidth;
      t1 = t1 < 1 / 0 ? t1 : 144 + this.get$_maxSliderPartWidth();
      t2 = constraints.maxHeight;
      if (!(t2 < 1 / 0)) {
        t2 = this._range_slider$_sliderTheme.trackHeight;
        t2.toString;
        t2 = Math.max(t2, this.get$_maxSliderPartHeight());
      }
      return new B.Size(t1, t2);
    },
    paint$2(context, offset) {
      var t3, _0_1, endVisualPosition, _0_2, t4, t5, trackRect, padding, thumbYOffset, t6, t7, t8, startThumbPosition, endThumbPosition, thumbPadding, overlaySize, t9, t10, t11, startThumbSelected, endThumbSelected, resolvedscreenSize, adjustedTrackWidth, dy, i, topThumbCenter, topThumbCenter0, isLastThumbStart, bottomThumb, topThumb, bottomThumbCenter, topThumbCenter1, _this = this,
        t1 = _this._range_slider$_state,
        t2 = t1.___RangeSliderState_startPositionController_A;
      t2 === $ && B.throwLateFieldNI("startPositionController");
      t2 = t2.__AnimationController__value_A;
      t2 === $ && B.throwLateFieldNI("_value");
      t1 = t1.___RangeSliderState_endPositionController_A;
      t1 === $ && B.throwLateFieldNI("endPositionController");
      t1 = t1.__AnimationController__value_A;
      t1 === $ && B.throwLateFieldNI("_value");
      switch (_this._range_slider$_textDirection.index) {
        case 0:
          t3 = new B._Record_2(1 - t2, 1 - t1);
          break;
        case 1:
          t3 = new B._Record_2(t2, t1);
          break;
        default:
          t3 = null;
      }
      _0_1 = t3._0;
      endVisualPosition = null;
      _0_2 = t3._1;
      endVisualPosition = _0_2;
      t3 = _this._range_slider$_sliderTheme;
      t4 = t3.rangeTrackShape;
      t4.toString;
      t5 = _this._range_slider$_divisions;
      trackRect = t4.getPreferredRect$4$isDiscrete$offset$parentBox$sliderTheme(t5 != null && t5 > 0, offset, _this, t3);
      t3 = _this._range_slider$_divisions;
      padding = t3 != null && t3 > 0 || _this._range_slider$_sliderTheme.rangeTrackShape.get$isRounded() ? trackRect.bottom - trackRect.top : 0;
      thumbYOffset = trackRect.get$center()._dy;
      t3 = _this._range_slider$_divisions;
      t4 = t3 != null;
      t5 = t4 && t3 > 0;
      t6 = trackRect.left;
      t7 = trackRect.right;
      t8 = t7 - t6;
      if (t5) {
        if (typeof _0_1 !== "number")
          return _0_1.$mul();
        startThumbPosition = t6 + _0_1 * (t8 - padding) + padding / 2;
      } else {
        if (typeof _0_1 !== "number")
          return _0_1.$mul();
        startThumbPosition = t6 + _0_1 * t8;
      }
      t5 = t4 && t3 > 0;
      t8 = t7 - t6;
      if (t5) {
        if (typeof endVisualPosition !== "number")
          return endVisualPosition.$mul();
        endThumbPosition = t6 + endVisualPosition * (t8 - padding) + padding / 2;
      } else {
        if (typeof endVisualPosition !== "number")
          return endVisualPosition.$mul();
        endThumbPosition = t6 + endVisualPosition * t8;
      }
      t5 = _this._range_slider$_sliderTheme.rangeThumbShape;
      t5.toString;
      t8 = _this._range_slider$_onChanged;
      t3 = t4 && t3 > 0;
      thumbPadding = padding > t5.getPreferredSize$2(t8 != null, t3)._dx / 2 ? padding / 2 : 0;
      t3 = t6 + thumbPadding;
      t4 = t7 - thumbPadding;
      t5 = _this._startThumbCenter = new B.Offset(B.clampDouble(startThumbPosition, t3, t4), thumbYOffset);
      t4 = _this._endThumbCenter = new B.Offset(B.clampDouble(endThumbPosition, t3, t4), thumbYOffset);
      if (_this._range_slider$_onChanged != null) {
        overlaySize = _this._range_slider$_sliderTheme.overlayShape.getPreferredSize$2(true, false);
        t3 = _this._startThumbCenter;
        t4 = overlaySize._dx / 2;
        _this.overlayStartRect = B.Rect$fromCircle(t3, t4);
        t5 = _this._endThumbCenter;
        _this.overlayEndRect = B.Rect$fromCircle(t5, t4);
        t4 = t5;
      } else
        t3 = t5;
      t5 = _this._range_slider$_sliderTheme;
      t8 = t5.rangeTrackShape;
      t8.toString;
      t9 = _this.___RenderRangeSlider__enableAnimation_A;
      t9 === $ && B.throwLateFieldNI("_enableAnimation");
      t10 = _this._range_slider$_textDirection;
      t11 = _this._range_slider$_divisions;
      t11 = t11 != null && t11 > 0;
      t8.paint$10$enableAnimation$endThumbCenter$isDiscrete$isEnabled$parentBox$sliderTheme$startThumbCenter$textDirection(context, offset, t9, t4, t11, _this._range_slider$_onChanged != null, _this, t5, t3, t10);
      t10 = _this._lastThumbSelection;
      startThumbSelected = t10 === D.Thumb_0;
      endThumbSelected = t10 === D.Thumb_1;
      resolvedscreenSize = _this._range_slider$_screenSize.get$isEmpty(0) ? _this.get$size(0) : _this._range_slider$_screenSize;
      t3 = _this.___RenderRangeSlider__overlayAnimation_A;
      t3 === $ && B.throwLateFieldNI("_overlayAnimation");
      if (t3.get$status(0) !== H.AnimationStatus_0) {
        if (startThumbSelected || _this._hoveringStartThumb) {
          t3 = _this._range_slider$_sliderTheme;
          t4 = t3.overlayShape;
          t4.toString;
          t5 = _this._startThumbCenter;
          t8 = _this.___RenderRangeSlider__overlayAnimation_A;
          t9 = _this.___RenderRangeSlider__enableAnimation_A;
          t10 = _this._range_slider$_divisions;
          t10 = t10 != null && t10 > 0;
          t4.paint$12$activationAnimation$enableAnimation$isDiscrete$labelPainter$parentBox$sizeWithOverflow$sliderTheme$textDirection$textScaleFactor$value(context, t5, t8, t9, t10, _this._startLabelPainter, _this, resolvedscreenSize, t3, _this._range_slider$_textDirection, _this._range_slider$_textScaleFactor, t2);
        }
        if (endThumbSelected || _this._hoveringEndThumb) {
          t2 = _this._range_slider$_sliderTheme;
          t3 = t2.overlayShape;
          t3.toString;
          t4 = _this._endThumbCenter;
          t5 = _this.___RenderRangeSlider__overlayAnimation_A;
          t8 = _this.___RenderRangeSlider__enableAnimation_A;
          t9 = _this._range_slider$_divisions;
          t9 = t9 != null && t9 > 0;
          t3.paint$12$activationAnimation$enableAnimation$isDiscrete$labelPainter$parentBox$sizeWithOverflow$sliderTheme$textDirection$textScaleFactor$value(context, t4, t5, t8, t9, _this._endLabelPainter, _this, resolvedscreenSize, t2, _this._range_slider$_textDirection, _this._range_slider$_textScaleFactor, t1);
        }
      }
      t1 = _this._range_slider$_divisions;
      if (t1 != null && t1 > 0) {
        t1 = _this._range_slider$_sliderTheme;
        t1 = t1.rangeTickMarkShape.getPreferredSize$2$isEnabled$sliderTheme(_this._range_slider$_onChanged != null, t1);
        padding = trackRect.bottom - trackRect.top;
        adjustedTrackWidth = t7 - t6 - padding;
        t2 = _this._range_slider$_divisions;
        t2.toString;
        if (adjustedTrackWidth / t2 >= 3 * t1._dx) {
          dy = trackRect.get$center()._dy;
          t1 = padding / 2;
          i = 0;
          while (true) {
            t2 = _this._range_slider$_divisions;
            t2.toString;
            if (!(i <= t2))
              break;
            t3 = _this._range_slider$_sliderTheme;
            t4 = _this.___RenderRangeSlider__enableAnimation_A;
            t5 = _this._range_slider$_textDirection;
            t7 = _this._startThumbCenter;
            t3.rangeTickMarkShape.paint$9$enableAnimation$endThumbCenter$isEnabled$parentBox$sliderTheme$startThumbCenter$textDirection(context, new B.Offset(t6 + i / t2 * adjustedTrackWidth + t1, dy), t4, _this._endThumbCenter, _this._range_slider$_onChanged != null, _this, t3, t7, t5);
            ++i;
          }
        }
      }
      topThumbCenter = _this._endThumbCenter;
      topThumbCenter0 = _this._startThumbCenter;
      isLastThumbStart = _this._lastThumbSelection === D.Thumb_0;
      bottomThumb = isLastThumbStart ? D.Thumb_1 : D.Thumb_0;
      topThumb = isLastThumbStart ? D.Thumb_0 : D.Thumb_1;
      bottomThumbCenter = isLastThumbStart ? topThumbCenter : topThumbCenter0;
      topThumbCenter1 = isLastThumbStart ? topThumbCenter0 : topThumbCenter;
      t1 = _this._range_slider$_sliderTheme;
      t2 = t1.rangeThumbShape;
      t2.toString;
      t3 = _this.___RenderRangeSlider__valueIndicatorAnimation_A;
      t3 === $ && B.throwLateFieldNI("_valueIndicatorAnimation");
      t4 = _this.___RenderRangeSlider__enableAnimation_A;
      t5 = _this._range_slider$_divisions;
      t5 = t5 != null && t5 > 0;
      t6 = _this._range_slider$_textDirection;
      t2.paint$10$activationAnimation$enableAnimation$isDiscrete$isOnTop$isPressed$sliderTheme$textDirection$thumb(context, bottomThumbCenter, t3, t4, t5, false, bottomThumb === D.Thumb_0 ? startThumbSelected : endThumbSelected, t1, t6, bottomThumb);
      t1 = _this._range_slider$_sliderTheme.rangeThumbShape;
      t1.toString;
      t2 = _this.___RenderRangeSlider__overlayAnimation_A;
      t3 = _this.___RenderRangeSlider__enableAnimation_A;
      t4 = _this._range_slider$_divisions;
      t5 = t4 != null;
      t6 = t5 && t4 > 0;
      t7 = _this._range_slider$_onChanged;
      t4 = t5 && t4 > 0;
      t4 = t1.getPreferredSize$2(t7 != null, t4);
      t7 = _this._range_slider$_textDirection;
      t5 = _this._range_slider$_sliderTheme;
      t8 = topThumb === D.Thumb_0 ? startThumbSelected : endThumbSelected;
      t1.paint$10$activationAnimation$enableAnimation$isDiscrete$isOnTop$isPressed$sliderTheme$textDirection$thumb(context, topThumbCenter1, t2, t3, t6, Math.abs(topThumbCenter._dx - topThumbCenter0._dx) < t4._dx, t8, t5, t7, topThumb);
    },
    _createSemanticsConfiguration$5(value, increasedValue, decreasedValue, increaseAction, decreaseAction) {
      var config,
        t1 = type$.void_Function;
      t1._as(increaseAction);
      t1._as(decreaseAction);
      config = B.SemanticsConfiguration$();
      t1 = this._range_slider$_onChanged;
      config._setFlag$2(C.SemanticsFlag_64_hasEnabledState, true);
      config._setFlag$2(C.SemanticsFlag_128_isEnabled, t1 != null);
      config._semantics$_textDirection = this._range_slider$_textDirection;
      config._hasBeenAnnotated = true;
      config._setFlag$2(C.SemanticsFlag_8388608_isSlider, true);
      if (this._range_slider$_onChanged != null) {
        config.set$onIncrease(increaseAction);
        config.set$onDecrease(decreaseAction);
      }
      config._attributedValue = new B.AttributedString("" + C.JSNumber_methods.round$0(value * 100) + "%", C.List_empty3);
      config._hasBeenAnnotated = true;
      config._attributedIncreasedValue = new B.AttributedString("" + C.JSNumber_methods.round$0(increasedValue * 100) + "%", C.List_empty3);
      config._attributedDecreasedValue = new B.AttributedString("" + C.JSNumber_methods.round$0(decreasedValue * 100) + "%", C.List_empty3);
      return config;
    },
    assembleSemanticsNode$3(node, config, children) {
      var startSemanticsConfiguration, endSemanticsConfiguration, leftRect, rightRect, t1, t2, _this = this, _null = null;
      type$.Iterable_SemanticsNode._as(children);
      startSemanticsConfiguration = _this._createSemanticsConfiguration$5(_this._range_slider$_values.start, _this.get$_increasedStartValue(), _this.get$_decreasedStartValue(), _this.get$_increaseStartAction(), _this.get$_decreaseStartAction());
      endSemanticsConfiguration = _this._createSemanticsConfiguration$5(_this._range_slider$_values.end, _this.get$_increasedEndValue(), _this.get$_decreasedEndValue(), _this.get$_increaseEndAction(), _this.get$_decreaseEndAction());
      leftRect = B.Rect$fromCenter(_this._startThumbCenter, 48, 48);
      rightRect = B.Rect$fromCenter(_this._endThumbCenter, 48, 48);
      if (_this._startSemanticsNode == null)
        _this._startSemanticsNode = B.SemanticsNode$(_null, _null);
      if (_this._endSemanticsNode == null)
        _this._endSemanticsNode = B.SemanticsNode$(_null, _null);
      switch (_this._range_slider$_textDirection.index) {
        case 1:
          _this._startSemanticsNode.set$rect(0, leftRect);
          _this._endSemanticsNode.set$rect(0, rightRect);
          break;
        case 0:
          _this._startSemanticsNode.set$rect(0, rightRect);
          _this._endSemanticsNode.set$rect(0, leftRect);
          break;
      }
      _this._startSemanticsNode.updateWith$1$config(0, startSemanticsConfiguration);
      _this._endSemanticsNode.updateWith$1$config(0, endSemanticsConfiguration);
      t1 = _this._startSemanticsNode;
      t1.toString;
      t2 = _this._endSemanticsNode;
      t2.toString;
      node.updateWith$2$childrenInInversePaintOrder$config(0, B._setArrayType([t1, t2], type$.JSArray_SemanticsNode), config);
    },
    clearSemantics$0() {
      this.super$RenderObject$clearSemantics();
      this._endSemanticsNode = this._startSemanticsNode = null;
    },
    describeSemanticsConfiguration$1(config) {
      this.super$RenderObject$describeSemanticsConfiguration(config);
      config._isSemanticBoundary = true;
    },
    get$_range_slider$_semanticActionUnit() {
      var t1 = this._range_slider$_divisions;
      return t1 != null ? 1 / t1 : this.get$_range_slider$_adjustmentUnit();
    },
    _increaseStartAction$0() {
      var t1 = this._range_slider$_onChanged;
      if (t1 != null)
        t1.call$1(new A.RangeValues(this.get$_increasedStartValue(), this._range_slider$_values.end));
    },
    _decreaseStartAction$0() {
      var t1 = this._range_slider$_onChanged;
      if (t1 != null)
        t1.call$1(new A.RangeValues(this.get$_decreasedStartValue(), this._range_slider$_values.end));
    },
    _increaseEndAction$0() {
      var t1 = this._range_slider$_onChanged;
      if (t1 != null)
        t1.call$1(new A.RangeValues(this._range_slider$_values.start, this.get$_increasedEndValue()));
    },
    _decreaseEndAction$0() {
      var t1 = this._range_slider$_onChanged;
      if (t1 != null)
        t1.call$1(new A.RangeValues(this._range_slider$_values.start, this.get$_decreasedEndValue()));
    },
    get$_increasedStartValue() {
      var _this = this,
        increasedStartValue = B.double_parse(C.JSNumber_methods.toStringAsFixed$1(_this._range_slider$_values.start + _this.get$_range_slider$_semanticActionUnit(), 2));
      return increasedStartValue <= _this._range_slider$_values.end - _this.get$_minThumbSeparationValue() ? increasedStartValue : _this._range_slider$_values.start;
    },
    get$_decreasedStartValue() {
      return B.clampDouble(this._range_slider$_values.start - this.get$_range_slider$_semanticActionUnit(), 0, 1);
    },
    get$_increasedEndValue() {
      return B.clampDouble(this._range_slider$_values.end + this.get$_range_slider$_semanticActionUnit(), 0, 1);
    },
    get$_decreasedEndValue() {
      var _this = this,
        decreasedEndValue = _this._range_slider$_values.end - _this.get$_range_slider$_semanticActionUnit();
      return decreasedEndValue >= _this._range_slider$_values.start + _this.get$_minThumbSeparationValue() ? decreasedEndValue : _this._range_slider$_values.end;
    },
    set$_lastThumbSelection(_lastThumbSelection) {
      this._lastThumbSelection = type$.nullable_Thumb._as(_lastThumbSelection);
    },
    set$_range_slider$_onChanged(_onChanged) {
      this._range_slider$_onChanged = type$.nullable_void_Function_RangeValues._as(_onChanged);
    },
    set$onChangeStart(onChangeStart) {
      this.onChangeStart = type$.nullable_void_Function_RangeValues._as(onChangeStart);
    },
    set$onChangeEnd(onChangeEnd) {
      this.onChangeEnd = type$.nullable_void_Function_RangeValues._as(onChangeEnd);
    }
  };
  A._ValueIndicatorRenderObjectWidget0.prototype = {
    createRenderObject$1(context) {
      var t2,
        t1 = new A._RenderValueIndicator0(this.state, false, new B._LayoutCacheStorage(), B.LayerHandle$(type$.ContainerLayer));
      t1.RenderObject$0();
      t2 = t1.___RenderValueIndicator__state_A;
      t2 === $ && B.throwLateFieldNI("_state");
      t2 = t2.___RangeSliderState_valueIndicatorController_A;
      t2 === $ && B.throwLateFieldNI("valueIndicatorController");
      t1._range_slider$___RenderValueIndicator__valueIndicatorAnimation_A = F.CurvedAnimation$(E.Cubic_Dkk, t2, null);
      return t1;
    },
    updateRenderObject$2(context, renderObject) {
      type$._RenderValueIndicator._as(renderObject).___RenderValueIndicator__state_A = this.state;
    }
  };
  A._RenderValueIndicator0.prototype = {
    get$sizedByParent() {
      return true;
    },
    attach$1(owner) {
      var t1, t2, _this = this;
      _this.super$__RenderValueIndicator_RenderBox_RelayoutWhenSystemFontsChangeMixin$attach0(owner);
      t1 = _this._range_slider$___RenderValueIndicator__valueIndicatorAnimation_A;
      t1 === $ && B.throwLateFieldNI("_valueIndicatorAnimation");
      t2 = type$.void_Function._as(_this.get$markNeedsPaint());
      t1.parent.addListener$1(0, t2);
      t1 = _this.___RenderValueIndicator__state_A;
      t1 === $ && B.throwLateFieldNI("_state");
      t1 = t1.___RangeSliderState_startPositionController_A;
      t1 === $ && B.throwLateFieldNI("startPositionController");
      t1.didRegisterListener$0();
      t1.AnimationLocalListenersMixin__listeners.add$1(0, t2);
      t1 = _this.___RenderValueIndicator__state_A.___RangeSliderState_endPositionController_A;
      t1 === $ && B.throwLateFieldNI("endPositionController");
      t1.didRegisterListener$0();
      t1.AnimationLocalListenersMixin__listeners.add$1(0, t2);
    },
    detach$0(_) {
      var t2, _this = this,
        t1 = _this._range_slider$___RenderValueIndicator__valueIndicatorAnimation_A;
      t1 === $ && B.throwLateFieldNI("_valueIndicatorAnimation");
      t2 = type$.void_Function._as(_this.get$markNeedsPaint());
      t1.parent.removeListener$1(0, t2);
      t1 = _this.___RenderValueIndicator__state_A;
      t1 === $ && B.throwLateFieldNI("_state");
      t1 = t1.___RangeSliderState_startPositionController_A;
      t1 === $ && B.throwLateFieldNI("startPositionController");
      t1.removeListener$1(0, t2);
      t1 = _this.___RenderValueIndicator__state_A.___RangeSliderState_endPositionController_A;
      t1 === $ && B.throwLateFieldNI("endPositionController");
      t1.removeListener$1(0, t2);
      _this.super$__RenderValueIndicator_RenderBox_RelayoutWhenSystemFontsChangeMixin$detach0(0);
    },
    paint$2(context, offset) {
      var t1 = this.___RenderValueIndicator__state_A;
      t1 === $ && B.throwLateFieldNI("_state");
      t1 = t1.paintBottomValueIndicator;
      if (t1 != null)
        t1.call$2(context, offset);
      t1 = this.___RenderValueIndicator__state_A.paintTopValueIndicator;
      if (t1 != null)
        t1.call$2(context, offset);
    },
    computeDryLayout$1(constraints) {
      return new B.Size(B.clampDouble(0, constraints.minWidth, constraints.maxWidth), B.clampDouble(0, constraints.minHeight, constraints.maxHeight));
    },
    dispose$0() {
      var t1 = this._range_slider$___RenderValueIndicator__valueIndicatorAnimation_A;
      t1 === $ && B.throwLateFieldNI("_valueIndicatorAnimation");
      t1.dispose$0();
      this.super$RenderObject$dispose();
    }
  };
  A.__RangeSliderState_State_TickerProviderStateMixin.prototype = {
    activate$0() {
      this.super$State$activate();
      this._updateTickerModeNotifier$0();
      this._updateTickers$0();
    },
    dispose$0() {
      var _this = this,
        t1 = _this.TickerProviderStateMixin__tickerModeNotifier;
      if (t1 != null)
        t1.removeListener$1(0, _this.get$_updateTickers());
      _this.set$_tickerModeNotifier(null);
      _this.super$State$dispose();
    }
  };
  A.__RenderRangeSlider_RenderBox_RelayoutWhenSystemFontsChangeMixin.prototype = {
    attach$1(owner) {
      this.super$RenderObject$attach(owner);
      $.PaintingBinding__instance.PaintingBinding__systemFonts._systemFontsCallbacks.add$1(0, type$.void_Function._as(this.get$_scheduleSystemFontsUpdate()));
    },
    detach$0(_) {
      $.PaintingBinding__instance.PaintingBinding__systemFonts._systemFontsCallbacks.remove$1(0, type$.void_Function._as(this.get$_scheduleSystemFontsUpdate()));
      this.super$RenderObject$detach(0);
    }
  };
  A.__RenderValueIndicator_RenderBox_RelayoutWhenSystemFontsChangeMixin.prototype = {
    attach$1(owner) {
      this.super$RenderObject$attach(owner);
      $.PaintingBinding__instance.PaintingBinding__systemFonts._systemFontsCallbacks.add$1(0, type$.void_Function._as(this.get$_scheduleSystemFontsUpdate()));
    },
    detach$0(_) {
      $.PaintingBinding__instance.PaintingBinding__systemFonts._systemFontsCallbacks.remove$1(0, type$.void_Function._as(this.get$_scheduleSystemFontsUpdate()));
      this.super$RenderObject$detach(0);
    }
  };
  A._SliderType.prototype = {
    _enumToString$0() {
      return "_SliderType." + this._name;
    }
  };
  A.SliderInteraction.prototype = {
    _enumToString$0() {
      return "SliderInteraction." + this._name;
    }
  };
  A.Slider0.prototype = {
    createState$0() {
      return new A._SliderState0(new I.LabeledGlobalKey(null, type$.LabeledGlobalKey_State_StatefulWidget), new R.LayerLink(), null, null);
    }
  };
  A._SliderState0.prototype = {
    get$focusNode(_) {
      var t1;
      this._widget.toString;
      t1 = this._slider$_focusNode;
      t1.toString;
      return t1;
    },
    initState$0() {
      var t1, _this = this, _null = null;
      _this.super$State$initState();
      _this.___SliderState_overlayController_A = F.AnimationController$(_null, C.Duration_100000, _null, _null, _this);
      _this.___SliderState_valueIndicatorController_A = F.AnimationController$(_null, C.Duration_100000, _null, _null, _this);
      _this.___SliderState_enableController_A = F.AnimationController$(_null, E.Duration_75000, _null, _null, _this);
      _this.___SliderState_positionController_A = F.AnimationController$(_null, C.Duration_0, _null, _null, _this);
      t1 = _this.___SliderState_enableController_A;
      t1.set$value(0, _this._widget.onChanged != null ? 1 : 0);
      _this.___SliderState_positionController_A.set$value(0, _this._slider$_convert$1(_this._widget.value));
      _this.set$___SliderState__actionMap_A(type$.Map_of_Type_and_Action_Intent._as(B.LinkedHashMap_LinkedHashMap$_literal([D.Type__AdjustSliderIntent_bIn, new U.CallbackAction(_this.get$_actionHandler(), new F.ObserverList(B._setArrayType([], type$.JSArray_of_void_Function_Action_Intent), type$.ObserverList_of_void_Function_Action_Intent), type$.CallbackAction__AdjustSliderIntent)], type$.Type, type$.Action_Intent)));
      _this._widget.toString;
      if (_this._slider$_focusNode == null)
        _this._slider$_focusNode = B.FocusNode$(true, _null, true, true, _null, _null, false);
    },
    dispose$0() {
      var _this = this,
        t1 = _this.interactionTimer;
      if (t1 != null)
        t1.cancel$0(0);
      t1 = _this.___SliderState_overlayController_A;
      t1 === $ && B.throwLateFieldNI("overlayController");
      t1.dispose$0();
      t1 = _this.___SliderState_valueIndicatorController_A;
      t1 === $ && B.throwLateFieldNI("valueIndicatorController");
      t1.dispose$0();
      t1 = _this.___SliderState_enableController_A;
      t1 === $ && B.throwLateFieldNI("enableController");
      t1.dispose$0();
      t1 = _this.___SliderState_positionController_A;
      t1 === $ && B.throwLateFieldNI("positionController");
      t1.dispose$0();
      t1 = _this.overlayEntry;
      if (t1 != null)
        t1.remove$0(0);
      t1 = _this.overlayEntry;
      if (t1 != null)
        t1.dispose$0();
      _this.overlayEntry = null;
      t1 = _this._slider$_focusNode;
      if (t1 != null)
        t1.dispose$0();
      _this.super$__SliderState_State_TickerProviderStateMixin$dispose();
    },
    _slider$_handleChanged$1(value) {
      var t1, _this = this,
        lerpValue = _this._lerp$1(B._asDouble(value));
      if (_this._currentChangedValue !== lerpValue) {
        _this._currentChangedValue = lerpValue;
        t1 = _this._widget;
        if (lerpValue !== t1.value)
          t1.onChanged.call$1(lerpValue);
      }
    },
    _slider$_handleDragStart$1(value) {
      this._dragging = true;
      this._widget.toString;
    },
    _slider$_handleDragEnd$1(value) {
      this._dragging = false;
      this._currentChangedValue = null;
      this._widget.toString;
    },
    _actionHandler$1(intent) {
      var t1, directionality, t2;
      type$._AdjustSliderIntent._as(intent);
      t1 = this._renderObjectKey;
      directionality = $.WidgetsBinding__instance.WidgetsBinding__buildOwner._globalKeyRegistry.$index(0, t1).dependOnInheritedWidgetOfExactType$1$0(type$.Directionality).textDirection;
      switch (intent.type.index) {
        case 2:
          t2 = true;
          break;
        case 3:
          t2 = false;
          break;
        case 1:
          t2 = directionality === C.TextDirection_0;
          break;
        case 0:
          t2 = directionality === C.TextDirection_1;
          break;
        default:
          t2 = null;
      }
      t1 = $.WidgetsBinding__instance.WidgetsBinding__buildOwner._globalKeyRegistry.$index(0, t1).get$renderObject();
      t1.toString;
      type$._RenderSlider._as(t1);
      return t2 ? t1.increaseAction$0() : t1.decreaseAction$0();
    },
    _handleFocusHighlightChanged$1(focused) {
      var _this = this;
      if (focused !== _this._slider$_focused)
        _this.setState$1(new A._SliderState__handleFocusHighlightChanged_closure(_this, focused));
      _this.showValueIndicator$0();
    },
    _handleHoverChanged$1(hovering) {
      if (hovering !== this._slider$_hovering)
        this.setState$1(new A._SliderState__handleHoverChanged_closure(this, hovering));
    },
    _lerp$1(value) {
      var t1 = this._widget,
        t2 = t1.max;
      t1 = t1.min;
      return value * (t2 - t1) + t1;
    },
    _slider$_convert$1(value) {
      var t1 = this._widget,
        t2 = t1.max,
        t3 = t1.min,
        ret = t2 > t3 ? (value - t3) / (t2 - t3) : 0;
      t1 = t1.divisions;
      return t1 != null ? C.JSNumber_methods.round$0(ret * t1) / t1 : ret;
    },
    build$1(context) {
      this._widget.toString;
      switch (0) {
        case 0:
          return this._buildMaterialSlider$1(context);
      }
    },
    _buildMaterialSlider$1(context) {
      var t2, t3, valueIndicatorShape, valueIndicatorColor, t4, valueIndicatorTextStyle, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, t21, t22, t23, t24, t25, effectiveMouseCursor, handleDidGainAccessibilityFocus, fontSize, fontSizeToScale, textScaler, result, padding, _this = this, _null = null, _box_0 = {},
        theme = I.Theme_of(context),
        sliderTheme = _box_0.sliderTheme = A.SliderTheme_of(context),
        t1 = _this._widget;
      t1.toString;
      switch (true) {
        case true:
          t2 = new A._SliderDefaultsM3Year2023(context, 4, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null);
          break;
        case false:
          t2 = new A._SliderDefaultsM2(context, 4, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null);
          break;
        default:
          t2 = _null;
      }
      t3 = B.LinkedHashSet_LinkedHashSet$_empty(type$.WidgetState);
      if (t1.onChanged == null)
        t3.add$1(0, S.WidgetState_6);
      if (_this._slider$_hovering)
        t3.add$1(0, S.WidgetState_0);
      if (_this._slider$_focused)
        t3.add$1(0, S.WidgetState_1);
      if (_this._dragging)
        t3.add$1(0, A7.WidgetState_3);
      valueIndicatorShape = sliderTheme.valueIndicatorShape;
      if (valueIndicatorShape == null)
        valueIndicatorShape = t2.get$valueIndicatorShape();
      if (valueIndicatorShape instanceof A.RectangularSliderValueIndicatorShape) {
        valueIndicatorColor = sliderTheme.valueIndicatorColor;
        if (valueIndicatorColor == null) {
          t1 = theme.colorScheme;
          t4 = t1.onSurface;
          t1 = t1.surface;
          valueIndicatorColor = Y.Color_alphaBlend(B.Color$fromARGB(153, t4.toARGB32$0() >>> 16 & 255, t4.toARGB32$0() >>> 8 & 255, t4.toARGB32$0() & 255), B.Color$fromARGB(C.JSNumber_methods.round$0(229.5), t1.toARGB32$0() >>> 16 & 255, t1.toARGB32$0() >>> 8 & 255, t1.toARGB32$0() & 255));
        }
      } else {
        _this._widget.toString;
        valueIndicatorColor = sliderTheme.valueIndicatorColor;
        if (valueIndicatorColor == null)
          valueIndicatorColor = t2.get$valueIndicatorColor();
      }
      valueIndicatorTextStyle = sliderTheme.valueIndicatorTextStyle;
      if (valueIndicatorTextStyle == null)
        valueIndicatorTextStyle = t2.get$valueIndicatorTextStyle();
      t1 = B.MediaQuery__maybeOf(context, C._MediaQueryAspect_16);
      t1 = t1 == null ? _null : t1.boldText;
      if (t1 === true)
        valueIndicatorTextStyle = valueIndicatorTextStyle.merge$1(E.TextStyle_KXJ);
      t1 = _box_0.sliderTheme;
      t4 = t1.trackHeight;
      if (t4 == null)
        t4 = t2.trackHeight;
      _this._widget.toString;
      t5 = t1.activeTrackColor;
      if (t5 == null)
        t5 = t2.get$activeTrackColor();
      _this._widget.toString;
      t6 = _box_0.sliderTheme.inactiveTrackColor;
      if (t6 == null)
        t6 = t2.get$inactiveTrackColor();
      _this._widget.toString;
      t7 = _box_0.sliderTheme.secondaryActiveTrackColor;
      if (t7 == null)
        t7 = t2.get$secondaryActiveTrackColor();
      t8 = _box_0.sliderTheme.disabledActiveTrackColor;
      if (t8 == null)
        t8 = t2.get$disabledActiveTrackColor();
      t9 = _box_0.sliderTheme.disabledInactiveTrackColor;
      if (t9 == null)
        t9 = t2.get$disabledInactiveTrackColor();
      t10 = _box_0.sliderTheme.disabledSecondaryActiveTrackColor;
      if (t10 == null)
        t10 = t2.get$disabledSecondaryActiveTrackColor();
      _this._widget.toString;
      t11 = _box_0.sliderTheme.activeTickMarkColor;
      if (t11 == null)
        t11 = t2.get$activeTickMarkColor();
      _this._widget.toString;
      t12 = _box_0.sliderTheme.inactiveTickMarkColor;
      if (t12 == null)
        t12 = t2.get$inactiveTickMarkColor();
      t13 = _box_0.sliderTheme.disabledActiveTickMarkColor;
      if (t13 == null)
        t13 = t2.get$disabledActiveTickMarkColor();
      t14 = _box_0.sliderTheme.disabledInactiveTickMarkColor;
      if (t14 == null)
        t14 = t2.get$disabledInactiveTickMarkColor();
      _this._widget.toString;
      t15 = _box_0.sliderTheme.thumbColor;
      if (t15 == null)
        t15 = t2.get$thumbColor();
      t16 = _box_0.sliderTheme.disabledThumbColor;
      if (t16 == null)
        t16 = t2.get$disabledThumbColor();
      t17 = new A._SliderState__buildMaterialSlider_effectiveOverlayColor(_box_0, _this, t3, t2).call$0();
      t18 = _box_0.sliderTheme.trackShape;
      if (t18 == null)
        t18 = t2.get$trackShape();
      t19 = _box_0.sliderTheme.tickMarkShape;
      if (t19 == null)
        t19 = t2.get$tickMarkShape();
      t20 = _box_0.sliderTheme.thumbShape;
      if (t20 == null)
        t20 = t2.get$thumbShape();
      t21 = _box_0.sliderTheme.overlayShape;
      if (t21 == null)
        t21 = t2.get$overlayShape();
      t22 = _box_0.sliderTheme;
      t23 = t22.showValueIndicator;
      if (t23 == null)
        t23 = D.ShowValueIndicator_0;
      _this._widget.toString;
      t24 = t22.thumbSize;
      if (t24 == null)
        t24 = t2.thumbSize;
      t25 = _box_0.sliderTheme.trackGap;
      t2 = t25 == null ? t2.trackGap : t25;
      _box_0.sliderTheme = t1.copyWith$25$activeTickMarkColor$activeTrackColor$disabledActiveTickMarkColor$disabledActiveTrackColor$disabledInactiveTickMarkColor$disabledInactiveTrackColor$disabledSecondaryActiveTrackColor$disabledThumbColor$inactiveTickMarkColor$inactiveTrackColor$overlayColor$overlayShape$padding$secondaryActiveTrackColor$showValueIndicator$thumbColor$thumbShape$thumbSize$tickMarkShape$trackGap$trackHeight$trackShape$valueIndicatorColor$valueIndicatorShape$valueIndicatorTextStyle(t11, t5, t13, t8, t14, t9, t10, t16, t12, t6, t17, t21, t22.padding, t7, t23, t15, t20, t24, t19, t2, t4, t18, valueIndicatorColor, valueIndicatorShape, valueIndicatorTextStyle);
      _this._widget.toString;
      t18 = U.WidgetStateProperty_resolveAs(_null, t3, type$.nullable_MouseCursor);
      if (t18 == null)
        effectiveMouseCursor = _null;
      else
        effectiveMouseCursor = t18;
      if (effectiveMouseCursor == null)
        effectiveMouseCursor = U.WidgetStateMouseCursor__clickable(type$.Set_WidgetState._as(t3));
      _this._widget.toString;
      handleDidGainAccessibilityFocus = _null;
      switch (theme.platform.index) {
        case 0:
        case 1:
        case 2:
        case 3:
        case 4:
          break;
        case 5:
          handleDidGainAccessibilityFocus = new A._SliderState__buildMaterialSlider_closure(_this);
          break;
      }
      switch (B.InheritedModel_inheritFrom(context, C._MediaQueryAspect_17, type$.MediaQuery).data.navigationMode.index) {
        case 1:
          t1 = D.Map_ANauy;
          break;
        case 0:
          t1 = D.Map_LMmfw;
          break;
        default:
          t1 = _null;
      }
      t2 = _box_0.sliderTheme.valueIndicatorTextStyle;
      fontSize = t2 == null ? _null : t2.fontSize;
      if (fontSize == null)
        fontSize = 14;
      fontSizeToScale = fontSize === 0 ? 14 : fontSize;
      t2 = B.MediaQuery__maybeOf(context, C._MediaQueryAspect_4);
      t2 = t2 == null ? _null : t2.get$textScaler();
      textScaler = (t2 == null ? C._LinearTextScaler_1 : t2).clamp$1$maxScaleFactor(0, 1.3);
      t2 = _this._slider$_convert$1(_this._widget.value);
      t3 = _this._widget;
      t3 = t3.divisions;
      t4 = _box_0.sliderTheme;
      t5 = new A._SliderState__buildMaterialSlider_screenSize(context).call$0();
      t6 = _this._widget;
      t6 = t6.onChanged != null && t6.max > t6.min ? _this.get$_slider$_handleChanged() : _null;
      result = new R.CompositedTransformTarget(_this._layerLink, new A._SliderRenderObjectWidget(t2, _null, t3, _null, t4, fontSizeToScale * textScaler.textScaleFactor / fontSizeToScale, t5, t6, _this.get$_slider$_handleDragStart(), _this.get$_slider$_handleDragEnd(), _null, _this, _this._slider$_focused, _this._slider$_hovering, D.SliderInteraction_0, _this._renderObjectKey), _null);
      padding = _box_0.sliderTheme.padding;
      if (padding != null)
        result = new F.Padding(padding, result, _null);
      t2 = _this.___SliderState__actionMap_A;
      t2 === $ && B.throwLateFieldNI("_actionMap");
      t3 = _this.get$focusNode(0);
      t1 = A5.FocusableActionDetector$(t2, false, result, _this._widget.onChanged != null, t3, true, effectiveMouseCursor, _null, _this.get$_handleFocusHighlightChanged(), _this.get$_handleHoverChanged(), t1);
      return new B.Semantics(B.SemanticsProperties$(_null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, handleDidGainAccessibilityFocus, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, true, _null, _null, _null, _null, _null, _null, _null), true, false, false, false, t1, _null);
    },
    showValueIndicator$0() {
      var t1, t2, _this = this;
      if (_this.overlayEntry == null) {
        _this.overlayEntry = M.OverlayEntry$(new A._SliderState_showValueIndicator_closure(_this), false, false);
        t1 = _this._framework$_element;
        t1.toString;
        _this._widget.toString;
        t1 = Ac.LookupBoundary_findAncestorStateOfType(t1, type$.OverlayState);
        t1.toString;
        t2 = _this.overlayEntry;
        t2.toString;
        t1.insert$1(0, t2);
      }
    },
    set$___SliderState__actionMap_A(___SliderState__actionMap_A) {
      this.___SliderState__actionMap_A = type$.Map_of_Type_and_Action_Intent._as(___SliderState__actionMap_A);
    },
    $isTickerProvider: 1
  };
  A._SliderRenderObjectWidget.prototype = {
    createRenderObject$1(context) {
      var _this = this,
        t1 = context.dependOnInheritedWidgetOfExactType$1$0(type$.Directionality).textDirection,
        t2 = I.Theme_of(context);
      return A._RenderSlider$(_this.allowedInteraction, _this.divisions, B.InheritedModel_inheritFrom(context, C._MediaQueryAspect_18, type$.MediaQuery).data.gestureSettings, _this.hasFocus, _this.hovering, _this.label, _this.onChangeEnd, _this.onChangeStart, _this.onChanged, t2.platform, _this.screenSize, _this.secondaryTrackValue, _this.semanticFormatterCallback, _this.sliderTheme, _this.state, t1, _this.textScaleFactor, _this.value);
    },
    updateRenderObject$2(context, renderObject) {
      var t1, t2, _this = this;
      type$._RenderSlider._as(renderObject);
      renderObject.set$divisions(_this.divisions);
      renderObject.set$value(0, _this.value);
      renderObject.set$secondaryTrackValue(_this.secondaryTrackValue);
      renderObject.set$label(0, _this.label);
      renderObject.set$sliderTheme(_this.sliderTheme);
      renderObject.set$textScaleFactor(_this.textScaleFactor);
      renderObject.set$screenSize(_this.screenSize);
      renderObject.set$onChanged(_this.onChanged);
      renderObject.set$onChangeStart(_this.onChangeStart);
      renderObject.set$onChangeEnd(_this.onChangeEnd);
      renderObject.set$textDirection(context.dependOnInheritedWidgetOfExactType$1$0(type$.Directionality).textDirection);
      renderObject.set$semanticFormatterCallback(_this.semanticFormatterCallback);
      renderObject.set$platform(0, I.Theme_of(context).platform);
      renderObject.set$hasFocus(_this.hasFocus);
      renderObject.set$hovering(_this.hovering);
      t1 = B.InheritedModel_inheritFrom(context, C._MediaQueryAspect_18, type$.MediaQuery).data.gestureSettings;
      t2 = renderObject.___RenderSlider__drag_A;
      t2 === $ && B.throwLateFieldNI("_drag");
      t2.gestureSettings = t1;
      t2 = renderObject.___RenderSlider__tap_A;
      t2 === $ && B.throwLateFieldNI("_tap");
      t2.gestureSettings = t1;
      renderObject.set$allowedInteraction(_this.allowedInteraction);
    }
  };
  A._RenderSlider.prototype = {
    _RenderSlider$18$allowedInteraction$divisions$gestureSettings$hasFocus$hovering$label$onChangeEnd$onChangeStart$onChanged$platform$screenSize$secondaryTrackValue$semanticFormatterCallback$sliderTheme$state$textDirection$textScaleFactor$value(allowedInteraction, divisions, gestureSettings, hasFocus, hovering, label, onChangeEnd, onChangeStart, onChanged, platform, screenSize, secondaryTrackValue, semanticFormatterCallback, sliderTheme, state, textDirection, textScaleFactor, value) {
      var team, t1, t2, _this = this, _null = null;
      _this._updateLabelPainter$0();
      team = new Ae.GestureArenaTeam(B.LinkedHashMap_LinkedHashMap$_empty(type$.int, type$._CombiningGestureArenaMember));
      t1 = I.HorizontalDragGestureRecognizer$(_null, _null);
      t1._team = team;
      t1.set$onStart(0, _this.get$_slider$_handleDragStart());
      t1.set$onUpdate(_this.get$_slider$_handleDragUpdate());
      t1.set$onEnd(0, _this.get$_slider$_handleDragEnd());
      t1.set$onCancel(0, _this.get$_endInteraction());
      t1.gestureSettings = gestureSettings;
      _this.___RenderSlider__drag_A = t1;
      t1 = M.TapGestureRecognizer$(_null, _null);
      t1._team = team;
      t1.set$onTapDown(_this.get$_slider$_handleTapDown());
      t1.set$onTapUp(_this.get$_slider$_handleTapUp());
      t1.gestureSettings = gestureSettings;
      _this.___RenderSlider__tap_A = t1;
      t1 = _this._slider$_state;
      t2 = t1.___SliderState_overlayController_A;
      t2 === $ && B.throwLateFieldNI("overlayController");
      _this.___RenderSlider__overlayAnimation_A = F.CurvedAnimation$(E.Cubic_Dkk, t2, _null);
      t2 = t1.___SliderState_valueIndicatorController_A;
      t2 === $ && B.throwLateFieldNI("valueIndicatorController");
      t2 = F.CurvedAnimation$(E.Cubic_Dkk, t2, _null);
      t2.parent.addStatusListener$1(type$.void_Function_AnimationStatus._as(new A._RenderSlider_closure(_this)));
      _this.___RenderSlider__valueIndicatorAnimation_A = t2;
      t1 = t1.___SliderState_enableController_A;
      t1 === $ && B.throwLateFieldNI("enableController");
      _this.___RenderSlider__enableAnimation_A = F.CurvedAnimation$(Z.Cubic_fC5, t1, _null);
    },
    get$_slider$_maxSliderPartWidth() {
      var t1 = this.get$_slider$_sliderPartSizes(),
        t2 = B._arrayInstanceType(t1);
      return new B.MappedListIterable(t1, t2._eval$1("double(1)")._as(new A._RenderSlider__maxSliderPartWidth_closure()), t2._eval$1("MappedListIterable<1,double>")).reduce$1(0, A1.CONSTANT1);
    },
    get$_slider$_maxSliderPartHeight() {
      var t1 = this.get$_slider$_sliderPartSizes(),
        t2 = B._arrayInstanceType(t1);
      return new B.MappedListIterable(t1, t2._eval$1("double(1)")._as(new A._RenderSlider__maxSliderPartHeight_closure()), t2._eval$1("MappedListIterable<1,double>")).reduce$1(0, A1.CONSTANT1);
    },
    get$_slider$_sliderPartSizes() {
      var t2, t3, t4, t5, _this = this,
        t1 = _this._sliderTheme.overlayShape;
      t1.toString;
      t2 = _this._slider$_onChanged;
      t3 = _this._divisions;
      t3 = t3 != null && t3 > 0;
      t3 = t1.getPreferredSize$2(t2 != null, t3);
      t1 = _this._sliderTheme;
      t2 = _this._slider$_onChanged == null;
      if (t1.padding != null) {
        t1 = t1.thumbShape;
        t1.toString;
        t4 = _this._divisions;
        t4 = t4 != null && t4 > 0;
        t4 = t1.getPreferredSize$2(!t2, t4)._dy;
        t1 = t4;
      } else {
        t1 = t1.overlayShape;
        t1.toString;
        t4 = _this._divisions;
        t4 = t4 != null && t4 > 0;
        t4 = t1.getPreferredSize$2(!t2, t4)._dy;
        t1 = t4;
      }
      t2 = _this._sliderTheme.thumbShape;
      t2.toString;
      t4 = _this._slider$_onChanged;
      t5 = _this._divisions;
      t5 = t5 != null && t5 > 0;
      t5 = t2.getPreferredSize$2(t4 != null, t5);
      t4 = _this._sliderTheme;
      return B._setArrayType([new B.Size(t3._dx, t1), t5, t4.tickMarkShape.getPreferredSize$2$isEnabled$sliderTheme(_this._slider$_onChanged != null, t4)], type$.JSArray_Size);
    },
    get$_slider$_trackRect() {
      var t1 = this._sliderTheme;
      return t1.trackShape.getPreferredRect$3$isDiscrete$parentBox$sliderTheme(false, this, t1);
    },
    set$value(_, newValue) {
      var t2, distance, _this = this,
        _s18_ = "positionController",
        t1 = _this._divisions,
        convertedValue = t1 != null && t1 > 0 ? _this._discretize$1(newValue) : newValue;
      if (convertedValue === _this._slider$_value)
        return;
      _this._slider$_value = convertedValue;
      t1 = _this._divisions;
      t1 = t1 != null && t1 > 0;
      t2 = _this._slider$_state.___SliderState_positionController_A;
      if (t1) {
        t2 === $ && B.throwLateFieldNI(_s18_);
        t1 = t2.__AnimationController__value_A;
        t1 === $ && B.throwLateFieldNI("_value");
        distance = Math.abs(convertedValue - t1);
        t2.duration = distance !== 0 ? new B.Duration(C.JSNumber_methods.round$0(75000 * (1 / distance))) : C.Duration_0;
        t2._direction = H._AnimationDirection_0;
        t2._animateToInternal$3$curve$duration(convertedValue, Z.Cubic_fC5, null);
      } else {
        t2 === $ && B.throwLateFieldNI(_s18_);
        t2.set$value(0, convertedValue);
      }
      _this.markNeedsSemanticsUpdate$0();
    },
    set$secondaryTrackValue(newValue) {
      if (newValue == this._secondaryTrackValue)
        return;
      this._secondaryTrackValue = newValue;
      this.markNeedsSemanticsUpdate$0();
    },
    set$platform(_, value) {
      if (this._platform === value)
        return;
      this._platform = value;
      this.markNeedsSemanticsUpdate$0();
    },
    set$semanticFormatterCallback(value) {
      return;
    },
    set$divisions(value) {
      if (value == this._divisions)
        return;
      this._divisions = value;
      this.markNeedsPaint$0();
    },
    set$label(_, value) {
      return;
    },
    set$sliderTheme(value) {
      if (value.$eq(0, this._sliderTheme))
        return;
      this._sliderTheme = value;
      this._updateLabelPainter$0();
    },
    set$textScaleFactor(value) {
      if (value === this._textScaleFactor)
        return;
      this._textScaleFactor = value;
      this._updateLabelPainter$0();
    },
    set$screenSize(value) {
      if (value.$eq(0, this._screenSize))
        return;
      this._screenSize = value;
      this.markNeedsPaint$0();
    },
    set$onChanged(value) {
      var t1, t2, _this = this,
        _s16_ = "enableController";
      type$.nullable_void_Function_double._as(value);
      if (J.$eq$(value, _this._slider$_onChanged))
        return;
      t1 = _this._slider$_onChanged;
      _this.set$_slider$_onChanged(value);
      t2 = _this._slider$_onChanged != null;
      if (t1 != null !== t2) {
        t1 = _this._slider$_state.___SliderState_enableController_A;
        if (t2) {
          t1 === $ && B.throwLateFieldNI(_s16_);
          t1.forward$0(0);
        } else {
          t1 === $ && B.throwLateFieldNI(_s16_);
          t1.reverse$0(0);
        }
        _this.markNeedsPaint$0();
        _this.markNeedsSemanticsUpdate$0();
      }
    },
    set$textDirection(value) {
      if (value === this._slider$_textDirection)
        return;
      this._slider$_textDirection = value;
      this._updateLabelPainter$0();
    },
    set$hasFocus(value) {
      var t1, t2, _this = this,
        _s17_ = "overlayController",
        _s24_ = "valueIndicatorController";
      if (value === _this._slider$_hasFocus)
        return;
      _this._slider$_hasFocus = value;
      t1 = _this._slider$_state;
      t2 = t1.___SliderState_overlayController_A;
      if (value) {
        t2 === $ && B.throwLateFieldNI(_s17_);
        t2.forward$0(0);
        if (_this.get$showValueIndicator()) {
          t1 = t1.___SliderState_valueIndicatorController_A;
          t1 === $ && B.throwLateFieldNI(_s24_);
          t1.forward$0(0);
        }
      } else {
        t2 === $ && B.throwLateFieldNI(_s17_);
        t2.reverse$0(0);
        if (_this.get$showValueIndicator()) {
          t1 = t1.___SliderState_valueIndicatorController_A;
          t1 === $ && B.throwLateFieldNI(_s24_);
          t1.reverse$0(0);
        }
      }
      _this.markNeedsSemanticsUpdate$0();
    },
    set$hovering(value) {
      if (value === this._slider$_hovering)
        return;
      this._slider$_hovering = value;
      this._updateForHover$1(value);
    },
    set$hoveringThumb(value) {
      var _this = this;
      if (value === _this._hoveringThumb)
        return;
      _this._hoveringThumb = value;
      _this._updateForHover$1(_this._slider$_hovering);
    },
    set$allowedInteraction(value) {
      if (value === this._allowedInteraction)
        return;
      this._allowedInteraction = value;
      this.markNeedsSemanticsUpdate$0();
    },
    _updateForHover$1(hovered) {
      var t1, _this = this,
        _s17_ = "overlayController";
      if (hovered && _this._hoveringThumb) {
        t1 = _this._slider$_state.___SliderState_overlayController_A;
        t1 === $ && B.throwLateFieldNI(_s17_);
        t1.forward$0(0);
      } else if (!_this._slider$_active && !_this._slider$_hasFocus) {
        t1 = _this._slider$_state.___SliderState_overlayController_A;
        t1 === $ && B.throwLateFieldNI(_s17_);
        t1.reverse$0(0);
      }
    },
    get$showValueIndicator() {
      switch (this._sliderTheme.showValueIndicator.index) {
        case 0:
          var t1 = this._divisions;
          t1 = t1 != null && t1 > 0;
          break;
        case 1:
          t1 = this._divisions;
          t1 = !(t1 != null && t1 > 0);
          break;
        case 2:
          t1 = true;
          break;
        case 3:
          t1 = false;
          break;
        default:
          t1 = null;
      }
      return t1;
    },
    get$_adjustmentUnit() {
      switch (this._platform.index) {
        case 2:
        case 4:
          return 0.1;
        case 0:
        case 1:
        case 3:
        case 5:
          return 0.05;
      }
    },
    _updateLabelPainter$0() {
      this._labelPainter.set$text(0, null);
      this.markNeedsLayout$0();
    },
    systemFontsDidChange$0() {
      this.super$RelayoutWhenSystemFontsChangeMixin$systemFontsDidChange();
      this._labelPainter.markNeedsLayout$0();
      this._updateLabelPainter$0();
    },
    attach$1(owner) {
      var t1, t2, _this = this;
      _this.super$__RenderSlider_RenderBox_RelayoutWhenSystemFontsChangeMixin$attach(owner);
      t1 = _this.___RenderSlider__overlayAnimation_A;
      t1 === $ && B.throwLateFieldNI("_overlayAnimation");
      t2 = type$.void_Function._as(_this.get$markNeedsPaint());
      t1.parent.addListener$1(0, t2);
      t1 = _this.___RenderSlider__valueIndicatorAnimation_A;
      t1 === $ && B.throwLateFieldNI("_valueIndicatorAnimation");
      t1.parent.addListener$1(0, t2);
      t1 = _this.___RenderSlider__enableAnimation_A;
      t1 === $ && B.throwLateFieldNI("_enableAnimation");
      t1.parent.addListener$1(0, t2);
      t1 = _this._slider$_state.___SliderState_positionController_A;
      t1 === $ && B.throwLateFieldNI("positionController");
      t1.didRegisterListener$0();
      t1.AnimationLocalListenersMixin__listeners.add$1(0, t2);
    },
    detach$0(_) {
      var t2, _this = this,
        t1 = _this.___RenderSlider__overlayAnimation_A;
      t1 === $ && B.throwLateFieldNI("_overlayAnimation");
      t2 = type$.void_Function._as(_this.get$markNeedsPaint());
      t1.parent.removeListener$1(0, t2);
      t1 = _this.___RenderSlider__valueIndicatorAnimation_A;
      t1 === $ && B.throwLateFieldNI("_valueIndicatorAnimation");
      t1.parent.removeListener$1(0, t2);
      t1 = _this.___RenderSlider__enableAnimation_A;
      t1 === $ && B.throwLateFieldNI("_enableAnimation");
      t1.parent.removeListener$1(0, t2);
      t1 = _this._slider$_state.___SliderState_positionController_A;
      t1 === $ && B.throwLateFieldNI("positionController");
      t1.removeListener$1(0, t2);
      _this.super$__RenderSlider_RenderBox_RelayoutWhenSystemFontsChangeMixin$detach(0);
    },
    dispose$0() {
      var _this = this,
        t1 = _this.___RenderSlider__drag_A;
      t1 === $ && B.throwLateFieldNI("_drag");
      t1._velocityTrackers.clear$0(0);
      t1.super$OneSequenceGestureRecognizer$dispose();
      t1 = _this.___RenderSlider__tap_A;
      t1 === $ && B.throwLateFieldNI("_tap");
      t1._stopTimer$0();
      t1.super$OneSequenceGestureRecognizer$dispose();
      _this._labelPainter.dispose$0();
      t1 = _this.___RenderSlider__enableAnimation_A;
      t1 === $ && B.throwLateFieldNI("_enableAnimation");
      t1.dispose$0();
      t1 = _this.___RenderSlider__valueIndicatorAnimation_A;
      t1 === $ && B.throwLateFieldNI("_valueIndicatorAnimation");
      t1.dispose$0();
      t1 = _this.___RenderSlider__overlayAnimation_A;
      t1 === $ && B.throwLateFieldNI("_overlayAnimation");
      t1.dispose$0();
      _this.super$RenderObject$dispose();
    },
    _getValueFromVisualPosition$1(visualPosition) {
      var t1;
      switch (this._slider$_textDirection.index) {
        case 0:
          t1 = 1 - visualPosition;
          break;
        case 1:
          t1 = visualPosition;
          break;
        default:
          t1 = null;
      }
      return t1;
    },
    _discretize$1(value) {
      var result = B.clampDouble(value, 0, 1),
        t1 = this._divisions;
      if (t1 != null && t1 > 0) {
        t1.toString;
        result = C.JSNumber_methods.round$0(result * t1) / t1;
      }
      return result;
    },
    _startInteraction$1(globalPosition) {
      var t2, t3, t4, _this = this,
        t1 = _this._slider$_state;
      if (t1._framework$_element == null)
        return;
      t1.showValueIndicator$0();
      if (!_this._slider$_active && _this._slider$_onChanged != null) {
        switch (_this._allowedInteraction.index) {
          case 0:
          case 1:
            _this._slider$_active = true;
            t2 = _this.globalToLocal$1(globalPosition);
            t3 = _this.get$_slider$_trackRect();
            t4 = _this.get$_slider$_trackRect();
            _this._currentDragValue = _this._getValueFromVisualPosition$1((t2._dx - t3.left) / (t4.right - t4.left));
            break;
          case 3:
            t2 = _this.overlayRect;
            t2.toString;
            if (t2.contains$1(0, _this.globalToLocal$1(globalPosition))) {
              _this._slider$_active = true;
              _this._currentDragValue = _this._slider$_value;
            }
            break;
          case 2:
            _this.onChangeStart.call$1(_this._discretize$1(_this._slider$_value));
            break;
        }
        if (_this._slider$_active) {
          _this.onChangeStart.call$1(_this._discretize$1(_this._slider$_value));
          t2 = _this._slider$_onChanged;
          t2.toString;
          t2.call$1(_this._discretize$1(_this._currentDragValue));
          t2 = t1.___SliderState_overlayController_A;
          t2 === $ && B.throwLateFieldNI("overlayController");
          t2.forward$0(0);
          if (_this.get$showValueIndicator()) {
            t2 = t1.___SliderState_valueIndicatorController_A;
            t2 === $ && B.throwLateFieldNI("valueIndicatorController");
            t2.forward$0(0);
            t2 = t1.interactionTimer;
            if (t2 != null)
              t2.cancel$0(0);
            t1.interactionTimer = B.Timer_Timer(new B.Duration(500000), new A._RenderSlider__startInteraction_closure(_this));
          }
        }
      }
    },
    _endInteraction$0() {
      var t2, t3, _this = this,
        t1 = _this._slider$_state;
      if (t1._framework$_element == null)
        return;
      t2 = _this._slider$_active;
      if (t2) {
        _this.onChangeEnd.call$1(_this._discretize$1(_this._currentDragValue));
        t2 = _this._slider$_active = false;
        _this._currentDragValue = 0;
        t3 = t1.___SliderState_overlayController_A;
        t3 === $ && B.throwLateFieldNI("overlayController");
        t3.reverse$0(0);
        if (_this.get$showValueIndicator() ? t1.interactionTimer == null : t2) {
          t1 = t1.___SliderState_valueIndicatorController_A;
          t1 === $ && B.throwLateFieldNI("valueIndicatorController");
          t1.reverse$0(0);
        }
      }
    },
    _slider$_handleDragStart$1(details) {
      this._startInteraction$1(details.globalPosition);
    },
    _slider$_handleDragUpdate$1(details) {
      var t1, t2, valueDelta, _this = this;
      if (_this._slider$_state._framework$_element == null)
        return;
      t1 = _this._slider$_active;
      if (!t1 && _this._allowedInteraction === D.SliderInteraction_2) {
        t1 = _this._slider$_active = true;
        _this._currentDragValue = _this._slider$_value;
      }
      switch (_this._allowedInteraction.index) {
        case 0:
        case 2:
        case 3:
          if (t1 && _this._slider$_onChanged != null) {
            t1 = details.primaryDelta;
            t1.toString;
            t2 = _this.get$_slider$_trackRect();
            valueDelta = t1 / (t2.right - t2.left);
            t2 = _this._currentDragValue;
            switch (_this._slider$_textDirection.index) {
              case 0:
                t1 = -valueDelta;
                break;
              case 1:
                t1 = valueDelta;
                break;
              default:
                t1 = null;
            }
            if (typeof t1 !== "number")
              return B.iae(t1);
            t1 = t2 + t1;
            _this._currentDragValue = t1;
            t2 = _this._slider$_onChanged;
            t2.toString;
            t2.call$1(_this._discretize$1(t1));
          }
          break;
        case 1:
          break;
      }
    },
    _slider$_handleDragEnd$1(details) {
      this._endInteraction$0();
    },
    _slider$_handleTapDown$1(details) {
      this._startInteraction$1(details.globalPosition);
    },
    _slider$_handleTapUp$1(details) {
      this._endInteraction$0();
    },
    hitTestSelf$1(position) {
      return true;
    },
    handleEvent$2($event, entry) {
      var t1, _this = this;
      type$.BoxHitTestEntry._as(entry);
      if (_this._slider$_state._framework$_element == null)
        return;
      if (type$.PointerDownEvent._is($event) && _this._slider$_onChanged != null) {
        t1 = _this.___RenderSlider__drag_A;
        t1 === $ && B.throwLateFieldNI("_drag");
        t1.addPointer$1($event);
        t1 = _this.___RenderSlider__tap_A;
        t1 === $ && B.throwLateFieldNI("_tap");
        t1.addPointer$1($event);
      }
      if (_this._slider$_onChanged != null && _this.overlayRect != null) {
        t1 = _this.overlayRect;
        t1.toString;
        _this.set$hoveringThumb(t1.contains$1(0, $event.get$localPosition()));
      }
    },
    computeMinIntrinsicWidth$1(height) {
      B._asDouble(height);
      return 144 + this.get$_slider$_maxSliderPartWidth();
    },
    computeMaxIntrinsicWidth$1(height) {
      B._asDouble(height);
      return 144 + this.get$_slider$_maxSliderPartWidth();
    },
    computeMinIntrinsicHeight$1(width) {
      var t1;
      B._asDouble(width);
      t1 = this._sliderTheme.trackHeight;
      t1.toString;
      return Math.max(t1, this.get$_slider$_maxSliderPartHeight());
    },
    computeMaxIntrinsicHeight$1(width) {
      var t1;
      B._asDouble(width);
      t1 = this._sliderTheme.trackHeight;
      t1.toString;
      return Math.max(t1, this.get$_slider$_maxSliderPartHeight());
    },
    get$sizedByParent() {
      return true;
    },
    computeDryLayout$1(constraints) {
      var t2,
        t1 = constraints.maxWidth;
      t1 = t1 < 1 / 0 ? t1 : 144 + this.get$_slider$_maxSliderPartWidth();
      t2 = constraints.maxHeight;
      if (!(t2 < 1 / 0)) {
        t2 = this._sliderTheme.trackHeight;
        t2.toString;
        t2 = Math.max(t2, this.get$_slider$_maxSliderPartHeight());
      }
      return new B.Size(t1, t2);
    },
    paint$2(context, offset) {
      var _0_0, _0_2, t2, _1_1, secondaryVisualPosition, _1_2, t3, trackRect, padding, t4, t5, t6, thumbPosition, thumbPadding, thumbCenter, secondaryOffset, thumbWidth, thumbHeight, trackGap, pressedThumbWidth, thumbWidth0, t7, t8, t9, t10, t11, adjustedTrackWidth, dy, i, _this = this, _null = null,
        t1 = _this._slider$_state.___SliderState_positionController_A;
      t1 === $ && B.throwLateFieldNI("positionController");
      t1 = t1.__AnimationController__value_A;
      t1 === $ && B.throwLateFieldNI("_value");
      _0_0 = _this._slider$_textDirection;
      $label0$0: {
        _0_2 = C.TextDirection_0 === _0_0;
        if (_0_2 && _this._secondaryTrackValue == null) {
          t1 = new B._Record_2(1 - t1, _null);
          break $label0$0;
        }
        if (_0_2) {
          t2 = _this._secondaryTrackValue;
          t2.toString;
          t2 = new B._Record_2(1 - t1, 1 - t2);
          t1 = t2;
          break $label0$0;
        }
        if (C.TextDirection_1 === _0_0) {
          t1 = new B._Record_2(t1, _this._secondaryTrackValue);
          break $label0$0;
        }
        t1 = _null;
      }
      _1_1 = t1._0;
      secondaryVisualPosition = _null;
      _1_2 = t1._1;
      secondaryVisualPosition = _1_2;
      t1 = _this._sliderTheme;
      t2 = t1.trackShape;
      t2.toString;
      t3 = _this._divisions;
      trackRect = t2.getPreferredRect$4$isDiscrete$offset$parentBox$sliderTheme(t3 != null && t3 > 0, offset, _this, t1);
      t1 = _this._divisions;
      padding = t1 != null && t1 > 0 || _this._sliderTheme.trackShape.get$isRounded() ? trackRect.bottom - trackRect.top : 0;
      t1 = _this._divisions;
      t2 = t1 != null;
      t3 = t2 && t1 > 0;
      t4 = trackRect.left;
      t5 = trackRect.right;
      t6 = t5 - t4;
      if (t3) {
        if (typeof _1_1 !== "number")
          return _1_1.$mul();
        thumbPosition = t4 + _1_1 * (t6 - padding) + padding / 2;
      } else {
        if (typeof _1_1 !== "number")
          return _1_1.$mul();
        thumbPosition = t4 + _1_1 * t6;
      }
      t3 = _this._sliderTheme.thumbShape;
      t3.toString;
      t6 = _this._slider$_onChanged;
      t1 = t2 && t1 > 0;
      thumbPadding = padding > t3.getPreferredSize$2(t6 != null, t1)._dx / 2 ? padding / 2 : 0;
      thumbCenter = new B.Offset(B.clampDouble(thumbPosition, t4 + thumbPadding, t5 - thumbPadding), trackRect.get$center()._dy);
      if (_this._slider$_onChanged != null)
        _this.overlayRect = B.Rect$fromCircle(thumbCenter, _this._sliderTheme.overlayShape.getPreferredSize$2(true, false)._dx / 2);
      secondaryOffset = secondaryVisualPosition != null ? new B.Offset(t4 + secondaryVisualPosition * (t5 - t4), trackRect.get$center()._dy) : _null;
      t1 = _this._sliderTheme.thumbSize;
      if (t1 == null)
        thumbWidth = _null;
      else {
        t1 = t1.resolve$1(B.LinkedHashSet_LinkedHashSet$_empty(type$.WidgetState));
        thumbWidth = t1 == null ? _null : t1._dx;
      }
      t1 = _this._sliderTheme.thumbSize;
      if (t1 == null)
        thumbHeight = _null;
      else {
        t1 = t1.resolve$1(B.LinkedHashSet_LinkedHashSet$_empty(type$.WidgetState));
        thumbHeight = t1 == null ? _null : t1._dy;
      }
      t1 = _this._sliderTheme;
      trackGap = t1.trackGap;
      t1 = t1.thumbSize;
      if (t1 == null)
        pressedThumbWidth = _null;
      else {
        t1 = t1.resolve$1(B.LinkedHashSet_LinkedHashSet$_literal([S.WidgetState_2], type$.WidgetState));
        pressedThumbWidth = t1 == null ? _null : t1._dx;
      }
      if (_this._slider$_active && thumbWidth != null && pressedThumbWidth != null && trackGap != null) {
        if (typeof thumbWidth !== "number")
          return thumbWidth.$sub();
        if (typeof pressedThumbWidth !== "number")
          return B.iae(pressedThumbWidth);
        if (thumbWidth > 0)
          thumbWidth0 = pressedThumbWidth;
        else
          thumbWidth0 = thumbWidth;
        if (trackGap > 0)
          trackGap -= (thumbWidth - pressedThumbWidth) / 2;
        thumbWidth = thumbWidth0;
      }
      t1 = _this._sliderTheme;
      t2 = t1.trackShape;
      t2.toString;
      t1 = t1.copyWith$1$trackGap(trackGap);
      t3 = _this.___RenderSlider__enableAnimation_A;
      t3 === $ && B.throwLateFieldNI("_enableAnimation");
      t6 = _this._slider$_textDirection;
      t7 = _this._divisions;
      t7 = t7 != null && t7 > 0;
      t2.paint$10$enableAnimation$isDiscrete$isEnabled$parentBox$secondaryOffset$sliderTheme$textDirection$thumbCenter(context, offset, t3, t7, _this._slider$_onChanged != null, _this, secondaryOffset, t1, t6, thumbCenter);
      t1 = _this.___RenderSlider__overlayAnimation_A;
      t1 === $ && B.throwLateFieldNI("_overlayAnimation");
      if (t1.get$status(0) !== H.AnimationStatus_0) {
        t1 = _this._sliderTheme;
        t2 = t1.overlayShape;
        t2.toString;
        t3 = _this.___RenderSlider__overlayAnimation_A;
        t6 = _this.___RenderSlider__enableAnimation_A;
        t7 = _this._divisions;
        t7 = t7 != null && t7 > 0;
        t8 = _this._slider$_textDirection;
        t9 = _this._slider$_value;
        t10 = _this._textScaleFactor;
        t11 = _this._screenSize.get$isEmpty(0) ? _this.get$size(0) : _this._screenSize;
        t2.paint$12$activationAnimation$enableAnimation$isDiscrete$labelPainter$parentBox$sizeWithOverflow$sliderTheme$textDirection$textScaleFactor$value(context, thumbCenter, t3, t6, t7, _this._labelPainter, _this, t11, t1, t8, t10, t9);
      }
      t1 = _this._divisions;
      if (t1 != null && t1 > 0) {
        t1 = _this._sliderTheme;
        t1 = t1.tickMarkShape.getPreferredSize$2$isEnabled$sliderTheme(_this._slider$_onChanged != null, t1);
        adjustedTrackWidth = t5 - t4 - padding;
        t2 = _this._divisions;
        t2.toString;
        if (adjustedTrackWidth / t2 >= 3 * t1._dx) {
          dy = trackRect.get$center()._dy;
          t1 = padding / 2;
          i = 0;
          while (true) {
            t2 = _this._divisions;
            t2.toString;
            if (!(i <= t2))
              break;
            t3 = _this._sliderTheme;
            t5 = _this.___RenderSlider__enableAnimation_A;
            t6 = _this._slider$_textDirection;
            t3.tickMarkShape.paint$8$enableAnimation$isEnabled$parentBox$sliderTheme$textDirection$thumbCenter(context, new B.Offset(t4 + i / t2 * adjustedTrackWidth + t1, dy), t5, _this._slider$_onChanged != null, _this, t3, t6, thumbCenter);
            ++i;
          }
        }
      }
      t1 = _this._sliderTheme;
      t2 = t1.thumbShape;
      t2.toString;
      t3 = _this.___RenderSlider__overlayAnimation_A;
      t4 = _this.___RenderSlider__enableAnimation_A;
      t5 = _this._divisions;
      t5 = t5 != null && t5 > 0;
      if (thumbWidth != null && thumbHeight != null)
        t1 = t1.copyWith$1$thumbSize(new Ar.WidgetStatePropertyAll(new B.Size(thumbWidth, thumbHeight), type$.WidgetStatePropertyAll_nullable_Size));
      t6 = _this._slider$_textDirection;
      t7 = _this._slider$_value;
      t8 = _this._textScaleFactor;
      t9 = _this._screenSize.get$isEmpty(0) ? _this.get$size(0) : _this._screenSize;
      t2.paint$12$activationAnimation$enableAnimation$isDiscrete$labelPainter$parentBox$sizeWithOverflow$sliderTheme$textDirection$textScaleFactor$value(context, thumbCenter, t3, t4, t5, _this._labelPainter, _this, t9, t1, t6, t8, t7);
    },
    describeSemanticsConfiguration$1(config) {
      var t1, _this = this;
      _this.super$RenderObject$describeSemanticsConfiguration(config);
      config._isSemanticBoundary = false;
      t1 = _this._slider$_onChanged;
      config._setFlag$2(C.SemanticsFlag_64_hasEnabledState, true);
      config._setFlag$2(C.SemanticsFlag_128_isEnabled, t1 != null);
      config._semantics$_textDirection = _this._slider$_textDirection;
      config._hasBeenAnnotated = true;
      if (_this._slider$_onChanged != null) {
        config.set$onIncrease(_this.get$increaseAction());
        config.set$onDecrease(_this.get$decreaseAction());
      }
      t1 = _this._slider$_value;
      config._attributedValue = new B.AttributedString("" + C.JSNumber_methods.round$0(t1 * 100) + "%", C.List_empty3);
      config._hasBeenAnnotated = true;
      config._attributedIncreasedValue = new B.AttributedString("" + C.JSNumber_methods.round$0(B.clampDouble(t1 + _this.get$_semanticActionUnit(), 0, 1) * 100) + "%", C.List_empty3);
      config._hasBeenAnnotated = true;
      config._attributedDecreasedValue = new B.AttributedString("" + C.JSNumber_methods.round$0(B.clampDouble(_this._slider$_value - _this.get$_semanticActionUnit(), 0, 1) * 100) + "%", C.List_empty3);
      config._hasBeenAnnotated = true;
    },
    get$_semanticActionUnit() {
      var t1 = this._divisions;
      return t1 != null ? 1 / t1 : this.get$_adjustmentUnit();
    },
    increaseAction$0() {
      var increase, t1, _this = this;
      if (_this._slider$_onChanged != null) {
        _this.onChangeStart.call$1(B.clampDouble(_this._slider$_value, 0, 1));
        increase = B.clampDouble(_this._slider$_value + _this.get$_semanticActionUnit(), 0, 1);
        _this._slider$_onChanged.call$1(increase);
        _this.onChangeEnd.call$1(increase);
        t1 = _this._slider$_state;
        if (t1._framework$_element == null)
          return;
        t1.showValueIndicator$0();
      }
    },
    decreaseAction$0() {
      var decrease, t1, _this = this;
      if (_this._slider$_onChanged != null) {
        _this.onChangeStart.call$1(B.clampDouble(_this._slider$_value, 0, 1));
        decrease = B.clampDouble(_this._slider$_value - _this.get$_semanticActionUnit(), 0, 1);
        _this._slider$_onChanged.call$1(decrease);
        _this.onChangeEnd.call$1(decrease);
        t1 = _this._slider$_state;
        if (t1._framework$_element == null)
          return;
        t1.showValueIndicator$0();
      }
    },
    set$_slider$_onChanged(_onChanged) {
      this._slider$_onChanged = type$.nullable_void_Function_double._as(_onChanged);
    },
    set$onChangeStart(onChangeStart) {
      this.onChangeStart = type$.nullable_void_Function_double._as(onChangeStart);
    },
    set$onChangeEnd(onChangeEnd) {
      this.onChangeEnd = type$.nullable_void_Function_double._as(onChangeEnd);
    }
  };
  A._AdjustSliderIntent.prototype = {};
  A._SliderAdjustmentType.prototype = {
    _enumToString$0() {
      return "_SliderAdjustmentType." + this._name;
    }
  };
  A._ValueIndicatorRenderObjectWidget.prototype = {
    createRenderObject$1(context) {
      var t2,
        t1 = new A._RenderValueIndicator(this.state, false, new B._LayoutCacheStorage(), B.LayerHandle$(type$.ContainerLayer));
      t1.RenderObject$0();
      t2 = t1._slider$_state.___SliderState_valueIndicatorController_A;
      t2 === $ && B.throwLateFieldNI("valueIndicatorController");
      t1.___RenderValueIndicator__valueIndicatorAnimation_A = F.CurvedAnimation$(E.Cubic_Dkk, t2, null);
      return t1;
    },
    updateRenderObject$2(context, renderObject) {
      type$._RenderValueIndicator_2._as(renderObject)._slider$_state = this.state;
    }
  };
  A._RenderValueIndicator.prototype = {
    get$sizedByParent() {
      return true;
    },
    attach$1(owner) {
      var t1, t2, _this = this;
      _this.super$__RenderValueIndicator_RenderBox_RelayoutWhenSystemFontsChangeMixin$attach(owner);
      t1 = _this.___RenderValueIndicator__valueIndicatorAnimation_A;
      t1 === $ && B.throwLateFieldNI("_valueIndicatorAnimation");
      t2 = type$.void_Function._as(_this.get$markNeedsPaint());
      t1.parent.addListener$1(0, t2);
      t1 = _this._slider$_state.___SliderState_positionController_A;
      t1 === $ && B.throwLateFieldNI("positionController");
      t1.didRegisterListener$0();
      t1.AnimationLocalListenersMixin__listeners.add$1(0, t2);
    },
    detach$0(_) {
      var t2, _this = this,
        t1 = _this.___RenderValueIndicator__valueIndicatorAnimation_A;
      t1 === $ && B.throwLateFieldNI("_valueIndicatorAnimation");
      t2 = type$.void_Function._as(_this.get$markNeedsPaint());
      t1.parent.removeListener$1(0, t2);
      t1 = _this._slider$_state.___SliderState_positionController_A;
      t1 === $ && B.throwLateFieldNI("positionController");
      t1.removeListener$1(0, t2);
      _this.super$__RenderValueIndicator_RenderBox_RelayoutWhenSystemFontsChangeMixin$detach(0);
    },
    paint$2(context, offset) {
      var t1 = this._slider$_state.paintValueIndicator;
      if (t1 != null)
        t1.call$2(context, offset);
    },
    computeDryLayout$1(constraints) {
      return new B.Size(B.clampDouble(0, constraints.minWidth, constraints.maxWidth), B.clampDouble(0, constraints.minHeight, constraints.maxHeight));
    },
    dispose$0() {
      var t1 = this.___RenderValueIndicator__valueIndicatorAnimation_A;
      t1 === $ && B.throwLateFieldNI("_valueIndicatorAnimation");
      t1.dispose$0();
      this.super$RenderObject$dispose();
    }
  };
  A._SliderDefaultsM2.prototype = {
    get$_slider$_colors() {
      var t1, _this = this,
        value = _this.___SliderDefaultsM2__colors_FI;
      if (value === $) {
        t1 = I.Theme_of(_this.context);
        _this.___SliderDefaultsM2__colors_FI !== $ && B.throwLateFieldADI("_colors");
        value = _this.___SliderDefaultsM2__colors_FI = t1.colorScheme;
      }
      return value;
    },
    get$activeTrackColor() {
      return this.get$_slider$_colors().primary;
    },
    get$inactiveTrackColor() {
      return this.get$_slider$_colors().primary.withOpacity$1(0.24);
    },
    get$secondaryActiveTrackColor() {
      return this.get$_slider$_colors().primary.withOpacity$1(0.54);
    },
    get$disabledActiveTrackColor() {
      var t1 = this.get$_slider$_colors().onSurface;
      return B.Color$fromARGB(82, t1.toARGB32$0() >>> 16 & 255, t1.toARGB32$0() >>> 8 & 255, t1.toARGB32$0() & 255);
    },
    get$disabledInactiveTrackColor() {
      var t1 = this.get$_slider$_colors().onSurface;
      return B.Color$fromARGB(31, t1.toARGB32$0() >>> 16 & 255, t1.toARGB32$0() >>> 8 & 255, t1.toARGB32$0() & 255);
    },
    get$disabledSecondaryActiveTrackColor() {
      var t1 = this.get$_slider$_colors().onSurface;
      return B.Color$fromARGB(31, t1.toARGB32$0() >>> 16 & 255, t1.toARGB32$0() >>> 8 & 255, t1.toARGB32$0() & 255);
    },
    get$activeTickMarkColor() {
      return this.get$_slider$_colors().onPrimary.withOpacity$1(0.54);
    },
    get$inactiveTickMarkColor() {
      return this.get$_slider$_colors().primary.withOpacity$1(0.54);
    },
    get$disabledActiveTickMarkColor() {
      return this.get$_slider$_colors().onPrimary.withOpacity$1(0.12);
    },
    get$disabledInactiveTickMarkColor() {
      var t1 = this.get$_slider$_colors().onSurface;
      return B.Color$fromARGB(31, t1.toARGB32$0() >>> 16 & 255, t1.toARGB32$0() >>> 8 & 255, t1.toARGB32$0() & 255);
    },
    get$thumbColor() {
      return this.get$_slider$_colors().primary;
    },
    get$disabledThumbColor() {
      var t1 = this.get$_slider$_colors().onSurface;
      return Y.Color_alphaBlend(B.Color$fromARGB(97, t1.toARGB32$0() >>> 16 & 255, t1.toARGB32$0() >>> 8 & 255, t1.toARGB32$0() & 255), this.get$_slider$_colors().surface);
    },
    get$overlayColor() {
      return this.get$_slider$_colors().primary.withOpacity$1(0.12);
    },
    get$valueIndicatorTextStyle() {
      var t1 = I.Theme_of(this.context).textTheme.bodyLarge;
      t1.toString;
      return t1.copyWith$1$color(this.get$_slider$_colors().onPrimary);
    },
    get$valueIndicatorColor() {
      var result, t1, t2, _this = this,
        value = _this.___SliderDefaultsM2_sliderTheme_FI;
      if (value === $) {
        result = A.SliderTheme_of(_this.context);
        _this.___SliderDefaultsM2_sliderTheme_FI !== $ && B.throwLateFieldADI("sliderTheme");
        _this.___SliderDefaultsM2_sliderTheme_FI = result;
        value = result;
      }
      if (value.valueIndicatorShape instanceof A.RoundedRectSliderValueIndicatorShape) {
        t1 = _this.get$_slider$_colors();
        t2 = t1._inverseSurface;
        return t2 == null ? t1.onSurface : t2;
      }
      return _this.get$_slider$_colors().primary;
    },
    get$valueIndicatorShape() {
      return D.C_RectangularSliderValueIndicatorShape;
    },
    get$thumbShape() {
      return D.C_RoundSliderThumbShape;
    },
    get$trackShape() {
      return D.C_RoundedRectSliderTrackShape;
    },
    get$overlayShape() {
      return D.C_RoundSliderOverlayShape;
    },
    get$tickMarkShape() {
      return D.RoundSliderTickMarkShape_null;
    }
  };
  A._SliderDefaultsM3Year2023.prototype = {
    get$_slider$_colors() {
      var t1, _this = this,
        value = _this.___SliderDefaultsM3Year2023__colors_FI;
      if (value === $) {
        t1 = I.Theme_of(_this.context);
        _this.___SliderDefaultsM3Year2023__colors_FI !== $ && B.throwLateFieldADI("_colors");
        value = _this.___SliderDefaultsM3Year2023__colors_FI = t1.colorScheme;
      }
      return value;
    },
    get$activeTrackColor() {
      return this.get$_slider$_colors().primary;
    },
    get$inactiveTrackColor() {
      var t1 = this.get$_slider$_colors(),
        t2 = t1._surfaceContainerHighest;
      return t2 == null ? t1.surface : t2;
    },
    get$secondaryActiveTrackColor() {
      return this.get$_slider$_colors().primary.withOpacity$1(0.54);
    },
    get$disabledActiveTrackColor() {
      var t1 = this.get$_slider$_colors().onSurface;
      return B.Color$fromARGB(97, t1.toARGB32$0() >>> 16 & 255, t1.toARGB32$0() >>> 8 & 255, t1.toARGB32$0() & 255);
    },
    get$disabledInactiveTrackColor() {
      var t1 = this.get$_slider$_colors().onSurface;
      return B.Color$fromARGB(31, t1.toARGB32$0() >>> 16 & 255, t1.toARGB32$0() >>> 8 & 255, t1.toARGB32$0() & 255);
    },
    get$disabledSecondaryActiveTrackColor() {
      var t1 = this.get$_slider$_colors().onSurface;
      return B.Color$fromARGB(31, t1.toARGB32$0() >>> 16 & 255, t1.toARGB32$0() >>> 8 & 255, t1.toARGB32$0() & 255);
    },
    get$activeTickMarkColor() {
      return this.get$_slider$_colors().onPrimary.withOpacity$1(0.38);
    },
    get$inactiveTickMarkColor() {
      var t1 = this.get$_slider$_colors(),
        t2 = t1._onSurfaceVariant;
      t1 = t2 == null ? t1.onSurface : t2;
      return B.Color$fromARGB(97, t1.toARGB32$0() >>> 16 & 255, t1.toARGB32$0() >>> 8 & 255, t1.toARGB32$0() & 255);
    },
    get$disabledActiveTickMarkColor() {
      var t1 = this.get$_slider$_colors().onSurface;
      return B.Color$fromARGB(97, t1.toARGB32$0() >>> 16 & 255, t1.toARGB32$0() >>> 8 & 255, t1.toARGB32$0() & 255);
    },
    get$disabledInactiveTickMarkColor() {
      var t1 = this.get$_slider$_colors().onSurface;
      return B.Color$fromARGB(97, t1.toARGB32$0() >>> 16 & 255, t1.toARGB32$0() >>> 8 & 255, t1.toARGB32$0() & 255);
    },
    get$thumbColor() {
      return this.get$_slider$_colors().primary;
    },
    get$disabledThumbColor() {
      var t1 = this.get$_slider$_colors().onSurface;
      return Y.Color_alphaBlend(B.Color$fromARGB(97, t1.toARGB32$0() >>> 16 & 255, t1.toARGB32$0() >>> 8 & 255, t1.toARGB32$0() & 255), this.get$_slider$_colors().surface);
    },
    get$overlayColor() {
      return I._WidgetStateColor$(new A._SliderDefaultsM3Year2023_overlayColor_closure(this));
    },
    get$valueIndicatorTextStyle() {
      var t1 = I.Theme_of(this.context).textTheme.labelMedium;
      t1.toString;
      return t1.copyWith$1$color(this.get$_slider$_colors().onPrimary);
    },
    get$valueIndicatorColor() {
      return this.get$_slider$_colors().primary;
    },
    get$valueIndicatorShape() {
      return D.C_DropSliderValueIndicatorShape;
    },
    get$thumbShape() {
      return D.C_RoundSliderThumbShape;
    },
    get$trackShape() {
      return D.C_RoundedRectSliderTrackShape;
    },
    get$overlayShape() {
      return D.C_RoundSliderOverlayShape;
    },
    get$tickMarkShape() {
      return D.RoundSliderTickMarkShape_null;
    }
  };
  A.__RenderSlider_RenderBox_RelayoutWhenSystemFontsChangeMixin.prototype = {
    attach$1(owner) {
      this.super$RenderObject$attach(owner);
      $.PaintingBinding__instance.PaintingBinding__systemFonts._systemFontsCallbacks.add$1(0, type$.void_Function._as(this.get$_scheduleSystemFontsUpdate()));
    },
    detach$0(_) {
      $.PaintingBinding__instance.PaintingBinding__systemFonts._systemFontsCallbacks.remove$1(0, type$.void_Function._as(this.get$_scheduleSystemFontsUpdate()));
      this.super$RenderObject$detach(0);
    }
  };
  A.__RenderValueIndicator_RenderBox_RelayoutWhenSystemFontsChangeMixin0.prototype = {
    attach$1(owner) {
      this.super$RenderObject$attach(owner);
      $.PaintingBinding__instance.PaintingBinding__systemFonts._systemFontsCallbacks.add$1(0, type$.void_Function._as(this.get$_scheduleSystemFontsUpdate()));
    },
    detach$0(_) {
      $.PaintingBinding__instance.PaintingBinding__systemFonts._systemFontsCallbacks.remove$1(0, type$.void_Function._as(this.get$_scheduleSystemFontsUpdate()));
      this.super$RenderObject$detach(0);
    }
  };
  A.__SliderState_State_TickerProviderStateMixin.prototype = {
    activate$0() {
      this.super$State$activate();
      this._updateTickerModeNotifier$0();
      this._updateTickers$0();
    },
    dispose$0() {
      var _this = this,
        t1 = _this.TickerProviderStateMixin__tickerModeNotifier;
      if (t1 != null)
        t1.removeListener$1(0, _this.get$_updateTickers());
      _this.set$_tickerModeNotifier(null);
      _this.super$State$dispose();
    }
  };
  A.SliderTheme.prototype = {
    wrap$2(_, context, child) {
      return A.SliderTheme$(child, this.data);
    },
    updateShouldNotify$1(oldWidget) {
      return !this.data.$eq(0, type$.SliderTheme._as(oldWidget).data);
    }
  };
  A.ShowValueIndicator.prototype = {
    _enumToString$0() {
      return "ShowValueIndicator." + this._name;
    }
  };
  A.Thumb.prototype = {
    _enumToString$0() {
      return "Thumb." + this._name;
    }
  };
  A.SliderComponentShape.prototype = {};
  A.SliderTickMarkShape.prototype = {};
  A.SliderTrackShape.prototype = {};
  A.RangeSliderThumbShape.prototype = {};
  A.RangeSliderValueIndicatorShape.prototype = {};
  A.RangeSliderTickMarkShape.prototype = {};
  A.RangeSliderTrackShape.prototype = {
    get$isRounded() {
      return false;
    }
  };
  A.BaseSliderTrackShape.prototype = {
    getPreferredRect$5$isDiscrete$isEnabled$offset$parentBox$sliderTheme(isDiscrete, isEnabled, offset, parentBox, sliderTheme) {
      var t2, t3, trackLeft, trackTop, trackRight,
        thumbWidth = sliderTheme.thumbShape.getPreferredSize$2(isEnabled, isDiscrete)._dx,
        overlayWidth = sliderTheme.overlayShape.getPreferredSize$2(isEnabled, isDiscrete)._dx,
        t1 = sliderTheme.trackHeight;
      t1.toString;
      t2 = sliderTheme.padding == null;
      t3 = t2 ? Math.max(overlayWidth / 2, thumbWidth / 2) : 0;
      trackLeft = offset._dx + t3;
      trackTop = offset._dy + (parentBox.get$size(0)._dy - t1) / 2;
      t3 = parentBox.get$size(0);
      t2 = t2 ? Math.max(thumbWidth, overlayWidth) : 0;
      trackRight = trackLeft + t3._dx - t2;
      return new B.Rect(Math.min(trackLeft, trackRight), trackTop, Math.max(trackLeft, trackRight), trackTop + t1);
    },
    getPreferredRect$3$isDiscrete$parentBox$sliderTheme(isDiscrete, parentBox, sliderTheme) {
      return this.getPreferredRect$5$isDiscrete$isEnabled$offset$parentBox$sliderTheme(isDiscrete, false, C.Offset_0_0, parentBox, sliderTheme);
    },
    getPreferredRect$4$isDiscrete$offset$parentBox$sliderTheme(isDiscrete, offset, parentBox, sliderTheme) {
      return this.getPreferredRect$5$isDiscrete$isEnabled$offset$parentBox$sliderTheme(isDiscrete, false, offset, parentBox, sliderTheme);
    },
    getPreferredRect$2$parentBox$sliderTheme(parentBox, sliderTheme) {
      return this.getPreferredRect$5$isDiscrete$isEnabled$offset$parentBox$sliderTheme(false, false, C.Offset_0_0, parentBox, sliderTheme);
    },
    get$isRounded() {
      return false;
    }
  };
  A.RoundedRectSliderTrackShape.prototype = {
    paint$10$enableAnimation$isDiscrete$isEnabled$parentBox$secondaryOffset$sliderTheme$textDirection$thumbCenter(context, offset, enableAnimation, isDiscrete, isEnabled, parentBox, secondaryOffset, sliderTheme, textDirection, thumbCenter) {
      var t1, t2, activePaint, t3, inactivePaint, _0_1, rightTrackPaint, _0_2, trackRect, t4, t5, t6, trackRadius, activeTrackRadius, isLTR, isRTL, t7, t8, t9, t10, showSecondaryTrack, secondaryTrackPaint;
      type$.Animation_double._as(enableAnimation);
      t1 = sliderTheme.trackHeight;
      if (t1 == null || t1 <= 0)
        return;
      t2 = $.$get$_renderer();
      activePaint = t2.createPaint$0();
      t3 = new M.ColorTween(sliderTheme.disabledActiveTrackColor, sliderTheme.activeTrackColor).transform$1(0, enableAnimation.get$value(0));
      t3.toString;
      activePaint.set$color(0, t3);
      inactivePaint = t2.createPaint$0();
      t3 = new M.ColorTween(sliderTheme.disabledInactiveTrackColor, sliderTheme.inactiveTrackColor).transform$1(0, enableAnimation.get$value(0));
      t3.toString;
      inactivePaint.set$color(0, t3);
      switch (textDirection.index) {
        case 1:
          t3 = new B._Record_2(activePaint, inactivePaint);
          break;
        case 0:
          t3 = new B._Record_2(inactivePaint, activePaint);
          break;
        default:
          t3 = null;
      }
      _0_1 = t3._0;
      rightTrackPaint = null;
      _0_2 = t3._1;
      rightTrackPaint = _0_2;
      trackRect = this.getPreferredRect$5$isDiscrete$isEnabled$offset$parentBox$sliderTheme(isDiscrete, isEnabled, offset, parentBox, sliderTheme);
      t3 = trackRect.bottom;
      t4 = trackRect.top;
      t5 = t3 - t4;
      t6 = t5 / 2;
      trackRadius = new B.Radius(t6, t6);
      t5 = (t5 + 2) / 2;
      activeTrackRadius = new B.Radius(t5, t5);
      isLTR = textDirection === C.TextDirection_1;
      isRTL = textDirection === C.TextDirection_0;
      t5 = thumbCenter._dx;
      t6 = trackRect.right;
      t1.toString;
      t1 /= 2;
      if (t5 < t6 - t1) {
        t7 = context.get$canvas(0);
        t8 = isRTL ? t4 - 1 : t4;
        t9 = isRTL ? t3 + 1 : t3;
        t10 = isLTR ? trackRadius : activeTrackRadius;
        t7.drawRRect$2(R.RRect$fromLTRBR(t5 - t1, t8, t6, t9, t10), rightTrackPaint);
      }
      t6 = trackRect.left;
      if (t5 > t6 + t1) {
        t7 = context.get$canvas(0);
        t8 = isLTR ? t4 - 1 : t4;
        t9 = isLTR ? t3 + 1 : t3;
        t10 = isLTR ? activeTrackRadius : trackRadius;
        t7.drawRRect$2(R.RRect$fromLTRBR(t6, t8, t5 + t1, t9, t10), _0_1);
      }
      if (secondaryOffset != null) {
        t1 = secondaryOffset._dx;
        showSecondaryTrack = isLTR ? t1 > t5 : t1 < t5;
      } else
        showSecondaryTrack = false;
      if (showSecondaryTrack) {
        secondaryTrackPaint = t2.createPaint$0();
        t1 = new M.ColorTween(sliderTheme.disabledSecondaryActiveTrackColor, sliderTheme.secondaryActiveTrackColor).transform$1(0, enableAnimation.get$value(0));
        t1.toString;
        secondaryTrackPaint.set$color(0, t1);
        if (isLTR)
          context.get$canvas(0).drawRRect$2(F.RRect$fromLTRBAndCorners(t5, t4, secondaryOffset._dx, t3, C.Radius_0_0, trackRadius, C.Radius_0_0, trackRadius), secondaryTrackPaint);
        else
          context.get$canvas(0).drawRRect$2(F.RRect$fromLTRBAndCorners(secondaryOffset._dx, t4, t5, t3, trackRadius, C.Radius_0_0, trackRadius, C.Radius_0_0), secondaryTrackPaint);
      }
    },
    get$isRounded() {
      return true;
    }
  };
  A.BaseRangeSliderTrackShape.prototype = {
    getPreferredRect$5$isDiscrete$isEnabled$offset$parentBox$sliderTheme(isDiscrete, isEnabled, offset, parentBox, sliderTheme) {
      var trackLeft, trackTop, trackRight,
        thumbWidth = sliderTheme.rangeThumbShape.getPreferredSize$2(isEnabled, isDiscrete)._dx,
        overlayWidth = sliderTheme.overlayShape.getPreferredSize$2(isEnabled, isDiscrete)._dx,
        t1 = sliderTheme.trackHeight;
      t1.toString;
      trackLeft = offset._dx + Math.max(overlayWidth / 2, thumbWidth / 2);
      trackTop = offset._dy + (parentBox.get$size(0)._dy - t1) / 2;
      trackRight = trackLeft + parentBox.get$size(0)._dx - Math.max(thumbWidth, overlayWidth);
      return new B.Rect(Math.min(trackLeft, trackRight), trackTop, Math.max(trackLeft, trackRight), trackTop + t1);
    },
    getPreferredRect$3$isDiscrete$parentBox$sliderTheme(isDiscrete, parentBox, sliderTheme) {
      return this.getPreferredRect$5$isDiscrete$isEnabled$offset$parentBox$sliderTheme(isDiscrete, false, C.Offset_0_0, parentBox, sliderTheme);
    },
    getPreferredRect$4$isDiscrete$offset$parentBox$sliderTheme(isDiscrete, offset, parentBox, sliderTheme) {
      return this.getPreferredRect$5$isDiscrete$isEnabled$offset$parentBox$sliderTheme(isDiscrete, false, offset, parentBox, sliderTheme);
    },
    getPreferredRect$2$parentBox$sliderTheme(parentBox, sliderTheme) {
      return this.getPreferredRect$5$isDiscrete$isEnabled$offset$parentBox$sliderTheme(false, false, C.Offset_0_0, parentBox, sliderTheme);
    }
  };
  A.RoundedRectRangeSliderTrackShape.prototype = {
    paint$10$enableAnimation$endThumbCenter$isDiscrete$isEnabled$parentBox$sliderTheme$startThumbCenter$textDirection(context, offset, enableAnimation, endThumbCenter, isDiscrete, isEnabled, parentBox, sliderTheme, startThumbCenter, textDirection) {
      var t1, t2, activePaint, t3, inactivePaint, _0_1, rightThumbOffset, _0_2, leftThumbOffset, trackRect, t4, trackRadius, t5, t6;
      type$.Animation_double._as(enableAnimation);
      t1 = sliderTheme.trackHeight;
      if (t1 == null || t1 <= 0)
        return;
      t2 = $.$get$_renderer();
      activePaint = t2.createPaint$0();
      t3 = new M.ColorTween(sliderTheme.disabledActiveTrackColor, sliderTheme.activeTrackColor).transform$1(0, enableAnimation.get$value(0));
      t3.toString;
      activePaint.set$color(0, t3);
      inactivePaint = t2.createPaint$0();
      t2 = new M.ColorTween(sliderTheme.disabledInactiveTrackColor, sliderTheme.inactiveTrackColor).transform$1(0, enableAnimation.get$value(0));
      t2.toString;
      inactivePaint.set$color(0, t2);
      switch (textDirection.index) {
        case 1:
          t2 = new B._Record_2(startThumbCenter, endThumbCenter);
          break;
        case 0:
          t2 = new B._Record_2(endThumbCenter, startThumbCenter);
          break;
        default:
          t2 = null;
      }
      _0_1 = t2._0;
      rightThumbOffset = null;
      _0_2 = t2._1;
      rightThumbOffset = _0_2;
      leftThumbOffset = _0_1;
      sliderTheme.rangeThumbShape.getPreferredSize$2(isEnabled, isDiscrete);
      trackRect = this.getPreferredRect$5$isDiscrete$isEnabled$offset$parentBox$sliderTheme(isDiscrete, isEnabled, offset, parentBox, sliderTheme);
      t2 = trackRect.bottom;
      t3 = trackRect.top;
      t4 = (t2 - t3) / 2;
      trackRadius = new B.Radius(t4, t4);
      t4 = context.get$canvas(0);
      t5 = leftThumbOffset._dx;
      t4.drawRRect$2(F.RRect$fromLTRBAndCorners(trackRect.left, t3, t5, t2, trackRadius, C.Radius_0_0, trackRadius, C.Radius_0_0), inactivePaint);
      t4 = context.get$canvas(0);
      t6 = rightThumbOffset._dx;
      t4.drawRRect$2(F.RRect$fromLTRBAndCorners(t6, t3, trackRect.right, t2, C.Radius_0_0, trackRadius, C.Radius_0_0, trackRadius), inactivePaint);
      t4 = context.get$canvas(0);
      t1.toString;
      t1 /= 2;
      t4.drawRRect$2(R.RRect$fromLTRBR(t5 - t1, t3 - 1, t6 + t1, t2 + 1, trackRadius), activePaint);
    },
    get$isRounded() {
      return true;
    }
  };
  A.RoundSliderTickMarkShape.prototype = {
    getPreferredSize$2$isEnabled$sliderTheme(isEnabled, sliderTheme) {
      var t1 = this.tickMarkRadius;
      if (t1 == null) {
        t1 = sliderTheme.trackHeight;
        t1.toString;
        t1 /= 4;
      }
      t1 *= 2;
      return new B.Size(t1, t1);
    },
    paint$8$enableAnimation$isEnabled$parentBox$sliderTheme$textDirection$thumbCenter(context, center, enableAnimation, isEnabled, parentBox, sliderTheme, textDirection, thumbCenter) {
      var xOffset, _0_2, t1, _0_4, _1_1, end, _1_2, paint, tickMarkRadius;
      type$.Animation_double._as(enableAnimation);
      xOffset = center._dx - thumbCenter._dx;
      $label0$0: {
        _0_2 = C.TextDirection_1 === textDirection;
        if (_0_2 && xOffset > 0) {
          t1 = new B._Record_2(sliderTheme.disabledInactiveTickMarkColor, sliderTheme.inactiveTickMarkColor);
          break $label0$0;
        }
        _0_4 = C.TextDirection_0 === textDirection;
        if (_0_4 && xOffset < 0) {
          t1 = new B._Record_2(sliderTheme.disabledInactiveTickMarkColor, sliderTheme.inactiveTickMarkColor);
          break $label0$0;
        }
        if (!_0_2)
          t1 = _0_4;
        else
          t1 = true;
        if (t1) {
          t1 = new B._Record_2(sliderTheme.disabledActiveTickMarkColor, sliderTheme.activeTickMarkColor);
          break $label0$0;
        }
        t1 = null;
      }
      _1_1 = t1._0;
      end = null;
      _1_2 = t1._1;
      end = _1_2;
      paint = $.$get$_renderer().createPaint$0();
      t1 = new M.ColorTween(_1_1, end).transform$1(0, enableAnimation.get$value(0));
      t1.toString;
      paint.set$color(0, t1);
      tickMarkRadius = this.getPreferredSize$2$isEnabled$sliderTheme(isEnabled, sliderTheme)._dx / 2;
      if (tickMarkRadius > 0)
        context.get$canvas(0).drawCircle$3(center, tickMarkRadius, paint);
    }
  };
  A.RoundRangeSliderTickMarkShape.prototype = {
    getPreferredSize$2$isEnabled$sliderTheme(isEnabled, sliderTheme) {
      var t1 = sliderTheme.trackHeight;
      t1.toString;
      t1 = t1 / 4 * 2;
      return new B.Size(t1, t1);
    },
    paint$9$enableAnimation$endThumbCenter$isEnabled$parentBox$sliderTheme$startThumbCenter$textDirection(context, center, enableAnimation, endThumbCenter, isEnabled, parentBox, sliderTheme, startThumbCenter, textDirection) {
      var t1, begin, end, paint, tickMarkRadius;
      type$.Animation_double._as(enableAnimation);
      switch (textDirection.index) {
        case 1:
          t1 = center._dx;
          t1 = startThumbCenter._dx < t1 && t1 < endThumbCenter._dx;
          break;
        case 0:
          t1 = center._dx;
          t1 = endThumbCenter._dx < t1 && t1 < startThumbCenter._dx;
          break;
        default:
          t1 = null;
      }
      begin = t1 ? sliderTheme.disabledActiveTickMarkColor : sliderTheme.disabledInactiveTickMarkColor;
      end = t1 ? sliderTheme.activeTickMarkColor : sliderTheme.inactiveTickMarkColor;
      paint = $.$get$_renderer().createPaint$0();
      t1 = new M.ColorTween(begin, end).transform$1(0, enableAnimation.get$value(0));
      t1.toString;
      paint.set$color(0, t1);
      tickMarkRadius = this.getPreferredSize$2$isEnabled$sliderTheme(isEnabled, sliderTheme)._dx / 2;
      if (tickMarkRadius > 0)
        context.get$canvas(0).drawCircle$3(center, tickMarkRadius, paint);
    }
  };
  A.RoundSliderThumbShape.prototype = {
    getPreferredSize$2(isEnabled, isDiscrete) {
      return new B.Size(20, 20);
    },
    paint$12$activationAnimation$enableAnimation$isDiscrete$labelPainter$parentBox$sizeWithOverflow$sliderTheme$textDirection$textScaleFactor$value(context, center, activationAnimation, enableAnimation, isDiscrete, labelPainter, parentBox, sizeWithOverflow, sliderTheme, textDirection, textScaleFactor, value) {
      var canvas, t2, radius, evaluatedElevation, path, t3,
        t1 = type$.Animation_double;
      t1._as(activationAnimation);
      t1._as(enableAnimation);
      canvas = context.get$canvas(0);
      t1 = type$.Tween_double;
      t2 = new M.ColorTween(sliderTheme.disabledThumbColor, sliderTheme.thumbColor).transform$1(0, enableAnimation.get$value(0));
      t2.toString;
      radius = new F.Tween(10, 10, t1).transform$1(0, enableAnimation.get$value(0));
      evaluatedElevation = new F.Tween(1, 6, t1).transform$1(0, activationAnimation.get$value(0));
      t1 = $.$get$_renderer();
      path = t1.createPath$0();
      t3 = 2 * radius;
      path.addArc$3(B.Rect$fromCenter(center, t3, t3), 0, 6.283185307179586);
      canvas.drawShadow$4(path, H.Color_vnR, evaluatedElevation, true);
      t1 = t1.createPaint$0();
      t1.set$color(0, t2);
      canvas.drawCircle$3(center, radius, t1);
    }
  };
  A.RoundRangeSliderThumbShape.prototype = {
    getPreferredSize$2(isEnabled, isDiscrete) {
      return new B.Size(20, 20);
    },
    paint$10$activationAnimation$enableAnimation$isDiscrete$isOnTop$isPressed$sliderTheme$textDirection$thumb(context, center, activationAnimation, enableAnimation, isDiscrete, isOnTop, isPressed, sliderTheme, textDirection, thumb) {
      var canvas, radius, strokePaint, t2, evaluatedElevation, shadowPath, t3,
        t1 = type$.Animation_double;
      t1._as(activationAnimation);
      t1._as(enableAnimation);
      canvas = context.get$canvas(0);
      t1 = type$.Tween_double;
      radius = new F.Tween(10, 10, t1).transform$1(0, enableAnimation.get$value(0));
      if (isOnTop) {
        strokePaint = $.$get$_renderer().createPaint$0();
        t2 = sliderTheme.overlappingShapeStrokeColor;
        t2.toString;
        strokePaint.set$color(0, t2);
        strokePaint.set$strokeWidth(1);
        strokePaint.set$style(0, C.PaintingStyle_1);
        canvas.drawCircle$3(center, radius, strokePaint);
      }
      t2 = new M.ColorTween(sliderTheme.disabledThumbColor, sliderTheme.thumbColor).transform$1(0, enableAnimation.get$value(0));
      t2.toString;
      evaluatedElevation = isPressed ? new F.Tween(1, 6, t1).transform$1(0, activationAnimation.get$value(0)) : 1;
      t1 = $.$get$_renderer();
      shadowPath = t1.createPath$0();
      t3 = 2 * radius;
      shadowPath.addArc$3(B.Rect$fromCenter(center, t3, t3), 0, 6.283185307179586);
      canvas.drawShadow$4(shadowPath, H.Color_vnR, evaluatedElevation, true);
      t1 = t1.createPaint$0();
      t1.set$color(0, t2);
      canvas.drawCircle$3(center, radius, t1);
    }
  };
  A.RoundSliderOverlayShape.prototype = {
    getPreferredSize$2(isEnabled, isDiscrete) {
      return new B.Size(48, 48);
    },
    paint$12$activationAnimation$enableAnimation$isDiscrete$labelPainter$parentBox$sizeWithOverflow$sliderTheme$textDirection$textScaleFactor$value(context, center, activationAnimation, enableAnimation, isDiscrete, labelPainter, parentBox, sizeWithOverflow, sliderTheme, textDirection, textScaleFactor, value) {
      var canvas, t2, t3,
        t1 = type$.Animation_double;
      t1._as(activationAnimation);
      t1._as(enableAnimation);
      canvas = context.get$canvas(0);
      t1 = new F.Tween(0, 24, type$.Tween_double).transform$1(0, activationAnimation.get$value(0));
      t2 = $.$get$_renderer().createPaint$0();
      t3 = sliderTheme.overlayColor;
      t3.toString;
      t2.set$color(0, t3);
      canvas.drawCircle$3(center, t1, t2);
    }
  };
  A.RectangularSliderValueIndicatorShape.prototype = {};
  A.RectangularRangeSliderValueIndicatorShape.prototype = {};
  A.RangeValues.prototype = {
    $eq(_, other) {
      if (other == null)
        return false;
      if (J.get$runtimeType$(other) !== B.getRuntimeTypeOfDartObject(this))
        return false;
      return other instanceof A.RangeValues && other.start === this.start && other.end === this.end;
    },
    get$hashCode(_) {
      return B.Object_hash(this.start, this.end, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue);
    },
    toString$0(_) {
      return "RangeValues(" + B.S(this.start) + ", " + B.S(this.end) + ")";
    }
  };
  A.DropSliderValueIndicatorShape.prototype = {};
  A.RoundedRectSliderValueIndicatorShape.prototype = {};
  A._RoundedRectRangeSliderTrackShape_RangeSliderTrackShape_BaseRangeSliderTrackShape.prototype = {};
  A._RoundedRectSliderTrackShape_SliderTrackShape_BaseSliderTrackShape.prototype = {};
  A.TDCheckboxStyle.prototype = {
    _enumToString$0() {
      return "TDCheckboxStyle." + this._name;
    }
  };
  A.TDContentDirection.prototype = {
    _enumToString$0() {
      return "TDContentDirection." + this._name;
    }
  };
  A.TDCheckBoxSize.prototype = {
    _enumToString$0() {
      return "TDCheckBoxSize." + this._name;
    }
  };
  A.TDCheckbox.prototype = {
    createState$0() {
      return new A.TDCheckboxState();
    },
    buildDefaultIcon$3(context, groupState, isChecked) {
      var style, theme, deSelectedColor, t2,
        t1 = this.style;
      if (t1 == null) {
        t1 = groupState == null ? null : groupState._widget.style;
        style = t1;
      } else
        style = t1;
      if (style == null)
        style = D.TDCheckboxStyle_0;
      theme = G.TDTheme_of(context);
      deSelectedColor = style === D.TDCheckboxStyle_2 ? C.Color_Edl : K.TDColors_get_grayColor4(theme);
      if (style === D.TDCheckboxStyle_0)
        t1 = isChecked ? Ad._TDIconsData_NvB : D._TDIconsData_GAI;
      else if (style === D.TDCheckboxStyle_1)
        t1 = isChecked ? D._TDIconsData_2bp : D._TDIconsData_3Eb;
      else
        t1 = D._TDIconsData_MTr;
      if (isChecked)
        t2 = G.TDColors_get_brandNormalColor(theme);
      else
        t2 = deSelectedColor;
      return F.Icon$(t1, t2, null, 24);
    }
  };
  A.TDCheckboxState.prototype = {
    initState$0() {
      this._widget.toString;
      this.checked = false;
      this.super$State$initState();
    },
    didUpdateWidget$1(oldWidget) {
      type$.TDCheckbox._as(oldWidget);
      this._widget.toString;
      this.checked = false;
      this.super$State$didUpdateWidget(oldWidget);
    },
    _td_check_box$_getPadding$1(size) {
      this._widget.toString;
      switch (size.index) {
        case 1:
          return D.EdgeInsets_0_12_0_12;
        case 0:
          return D.EdgeInsets_0_16_0_16;
      }
    },
    build$1(context) {
      var t2, t3, icon, title, t4, $content, t5, t6, t7, t8, t9, current, _this = this, _null = null,
        _s7_ = "fontMap",
        _s14_ = "fontBodyMedium",
        t1 = context.dependOnInheritedWidgetOfExactType$1$0(type$.TDCheckboxGroupInherited),
        groupState = t1 == null ? _null : t1.state,
        id = _this._widget.id;
      t1 = groupState == null;
      if (!t1 && id != null) {
        t2 = _this.checked;
        t3 = groupState.checkBoxStates;
        if (t3.$index(0, id) == null)
          t3.$indexSet(0, id, t2);
        t2 = t3.$index(0, id);
        t2.toString;
        _this.checked = t2;
      }
      icon = _this._buildCheckboxIcon$3(context, groupState, _this.checked);
      t2 = _this._widget;
      title = t2.title;
      if (!t1)
        groupState._widget.toString;
      if (title != null) {
        t2 = t2.titleMaxLine;
        if (t2 == null)
          t2 = t1 ? _null : groupState._widget.titleMaxLine;
        t3 = G.TDColors_get_fontGyColor1(G.TDTheme_of(context));
        _this._widget.toString;
        t4 = G.TDTheme_of(context).__TDThemeData_fontMap_A;
        t4 === $ && B.throwLateFieldNI(_s7_);
        t4 = t4.$index(0, "fontBodyLarge");
        $content = G.TDText$(title, _null, t4, _null, _null, false, false, false, H.Color_wst, _null, t2, H.TextOverflow_2, _null, _null, _null, _null, _null, _null, t3, _null, _null, _null, _null);
      } else
        $content = _null;
      if ($content != null) {
        t2 = _this._widget;
        t2.toString;
        if (!t1)
          groupState._widget.toString;
        if (!t1)
          groupState._widget.toString;
        switch (t2.contentDirection.index) {
          case 0:
            t1 = _this._td_check_box$_getPadding$1(t2.size);
            t2 = _this._widget.insetSpacing;
            t3 = type$.JSArray_Widget;
            t2 = O.Row$(B._setArrayType([Q.Expanded$(new F.Padding(new B.EdgeInsets(t2 == null ? 16 : t2, 0, 0, 0), $content, _null), 1, _null), new F.SizedBox(8, _null, _null, _null), new F.Padding(D.EdgeInsets_0_0_16_0, icon, _null)], t3), E.CrossAxisAlignment_2, _null, E.MainAxisAlignment_0, E.MainAxisSize_0, 0, _null, _null, E.VerticalDirection_1);
            t4 = _this._widget;
            t5 = t4.subTitle;
            t6 = t5 == null;
            t7 = !t6 && t5 !== "";
            t8 = t4.insetSpacing;
            if (t8 == null)
              t8 = 16;
            if (t6)
              t5 = "";
            t4 = t4.subTitleMaxLine;
            t6 = K.TDColors_get_fontGyColor3(G.TDTheme_of(context));
            t9 = G.TDTheme_of(context).__TDThemeData_fontMap_A;
            t9 === $ && B.throwLateFieldNI(_s7_);
            t7 = P.Column$(B._setArrayType([t2, L.Visibility$(new F.Padding(new B.EdgeInsets(t8, 0, 16, 0), G.TDText$(t5, _null, t9.$index(0, _s14_), _null, _null, false, false, false, H.Color_wst, _null, t4, H.TextOverflow_2, _null, _null, _null, _null, _null, _null, t6, _null, _null, _null, _null), _null), false, N.SizedBox_0_0_null_null, t7)], t3), E.CrossAxisAlignment_0, _null, E.MainAxisAlignment_0, E.MainAxisSize_1, 0, _null, _null, E.VerticalDirection_1);
            t2 = _this._widget.showDivider;
            current = new F.Stack(A4.Alignment_0_1, _null, H.StackFit_0, C.Clip_1, B._setArrayType([new F.Padding(t1, t7, _null), L.Visibility$(D.TDDivider_3M0, false, N.SizedBox_0_0_null_null, t2)], t3), _null);
            break;
          case 1:
            t1 = _this._td_check_box$_getPadding$1(t2.size);
            t2 = _this._widget;
            t2 = t2.insetSpacing;
            t3 = type$.JSArray_Widget;
            t2 = O.Row$(B._setArrayType([new F.Padding(new B.EdgeInsets(16, 0, 0, 0), icon, _null), new F.SizedBox(8, _null, _null, _null), Q.Expanded$(new F.Padding(new B.EdgeInsets(0, 0, t2 == null ? 16 : t2, 0), $content, _null), 1, _null)], t3), E.CrossAxisAlignment_2, _null, E.MainAxisAlignment_0, E.MainAxisSize_0, 0, _null, _null, E.VerticalDirection_1);
            t4 = _this._widget;
            t5 = t4.subTitle;
            t6 = t5 == null;
            t7 = !t6 && t5 !== "";
            t8 = t4.insetSpacing;
            if (t8 == null)
              t8 = 16;
            if (t6)
              t5 = "";
            t4 = t4.subTitleMaxLine;
            t6 = K.TDColors_get_fontGyColor3(G.TDTheme_of(context));
            _this._widget.toString;
            t9 = G.TDTheme_of(context).__TDThemeData_fontMap_A;
            t9 === $ && B.throwLateFieldNI(_s7_);
            t9 = t9.$index(0, _s14_);
            t2 = P.Column$(B._setArrayType([t2, L.Visibility$(new F.Padding(new B.EdgeInsets(48, 0, t8, 0), G.TDText$(t5, _null, t9, _null, _null, false, false, false, H.Color_wst, _null, t4, H.TextOverflow_2, _null, _null, _null, _null, _null, _null, t6, _null, _null, _null, _null), _null), false, N.SizedBox_0_0_null_null, t7)], t3), E.CrossAxisAlignment_0, _null, E.MainAxisAlignment_0, E.MainAxisSize_1, 0, _null, _null, E.VerticalDirection_1);
            t4 = _this._widget.showDivider;
            current = new F.Stack(A4.Alignment_0_1, _null, H.StackFit_0, C.Clip_1, B._setArrayType([new F.Padding(t1, t2, _null), L.Visibility$(D.TDDivider_QF6, false, N.SizedBox_0_0_null_null, t4)], t3), _null);
            break;
          default:
            current = icon;
        }
      } else
        current = icon;
      if (!(_this.canNotCancel && _this.checked)) {
        if (_this._pressed)
          current = A5.Opacity$(current, 0.68);
        current = M.GestureDetector$(H.HitTestBehavior_2, current, E.DragStartBehavior_1, false, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, new A.TDCheckboxState_build_closure(_this, id, groupState), new A.TDCheckboxState_build_closure0(_this), new A.TDCheckboxState_build_closure1(_this), new A.TDCheckboxState_build_closure2(_this), _null, _null, _null, _null, _null);
      }
      _this._widget.toString;
      t1 = K.TDColors_get_whiteColor1(G.TDTheme_of(context));
      t2 = _this._widget;
      return F.Container$(_null, new F.Stack(H.AlignmentDirectional_m1_m1, _null, H.StackFit_0, C.Clip_1, B._setArrayType([current, I.Positioned$(_null, L.Visibility$(new A.RadioCornerIcon(28, 4, t2.selectColor, _null), false, N.SizedBox_0_0_null_null, false), _null, _null, 0, _null, 0, _null)], type$.JSArray_Widget), _null), C.Clip_0, _null, _null, new F.BoxDecoration(t1, _null, _null, _null, _null, _null, _null, H.BoxShape_0), _null, _null, _null, _null, _null, _null, _null, _null);
    },
    _pressState$1(pressed) {
      this._widget.toString;
      this._pressed = pressed;
      this.setState$1(new A.TDCheckboxState__pressState_closure());
    },
    onValueChange$3(id, value, groupState) {
      this._widget.toString;
      this.setState$1(new A.TDCheckboxState_onValueChange_closure(this, value, groupState, id));
    },
    _buildCheckboxIcon$3(context, groupState, isCheck) {
      var t1 = this._widget;
      t1.toString;
      if (groupState != null)
        groupState._widget.toString;
      return t1.buildDefaultIcon$3(context, groupState, isCheck);
    }
  };
  A.RadioCornerIcon.prototype = {
    build$1(context) {
      var _null = null,
        t1 = this.length,
        t2 = G.TDColors_get_brandNormalColor(G.TDTheme_of(context));
      return new F.SizedBox(t1, t1, new F.Stack(A8.Alignment_m1_m1, _null, H.StackFit_0, C.Clip_1, B._setArrayType([I.CustomPaint$(_null, _null, _null, new A.RadioCorner(t1, this.radius, t2, _null), C.Size_0_0), D.Positioned_vkN], type$.JSArray_Widget), _null), _null);
    },
    get$length(receiver) {
      return this.length;
    }
  };
  A.RadioCorner.prototype = {
    paint$2(canvas, size) {
      var t2, rect, path,
        t1 = $.$get$_renderer(),
        paint = t1.createPaint$0();
      paint.set$isAntiAlias(true);
      paint.set$strokeWidth(1);
      paint.set$color(0, this.fillColor);
      paint.set$style(0, C.PaintingStyle_0);
      t2 = this.radius;
      rect = B.Rect$fromCircle(new B.Offset(t2, t2), t2);
      path = t1.createPath$0();
      path.moveTo$2(0, 0, t2);
      path.addArc$3(rect, 3.1415, 1.57075);
      path.moveTo$2(0, t2, 0);
      t1 = this.length;
      path.lineTo$2(0, t1, 0);
      path.lineTo$2(0, 0, t1);
      path.lineTo$2(0, 0, t2);
      canvas.drawPath$2(path, paint);
    },
    shouldRepaint$1(oldDelegate) {
      return false;
    },
    get$length(receiver) {
      return this.length;
    }
  };
  A.TDCheckboxGroup.prototype = {
    createState$0() {
      return new A.TDCheckboxGroupState(B.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.bool));
    }
  };
  A.TDCheckboxGroupState.prototype = {
    initState$0() {
      this.super$State$initState();
      var t1 = this._widget;
      this._syncCheckState$1(t1.checkedIds);
    },
    _syncCheckState$1(checkIds) {
      type$.nullable_List_String._as(checkIds);
      this.checkBoxStates.clear$0(0);
      if (checkIds != null)
        J.forEach$1$ax(checkIds, new A.TDCheckboxGroupState__syncCheckState_closure(this));
    },
    didUpdateWidget$1(oldWidget) {
      var newCheckIds;
      type$.TDCheckboxGroup._as(oldWidget);
      this.super$State$didUpdateWidget(oldWidget);
      newCheckIds = this._widget.checkedIds;
      if (!J.$eq$(oldWidget.checkedIds, newCheckIds))
        this._syncCheckState$1(newCheckIds);
    },
    toggle$3(_, id, check, notify) {
      var t1, t2, _this = this;
      if (_this._widget.maxChecked != null && check) {
        t1 = A.MapExt_count(_this.checkBoxStates, new A.TDCheckboxGroupState_toggle_closure(), type$.String, type$.bool);
        t2 = _this._widget.maxChecked;
        t2.toString;
        if (t1 >= t2)
          return false;
      }
      _this.checkBoxStates.$indexSet(0, id, check);
      if (notify)
        _this.setState$1(new A.TDCheckboxGroupState_toggle_closure0());
      _this._notifyChange$0();
      return true;
    },
    toggle$2(_, id, check) {
      return this.toggle$3(0, id, check, false);
    },
    _notifyChange$0() {
      var change = this._widget.onChangeGroup,
        t1 = A.MapExt_where(this.checkBoxStates, new A.TDCheckboxGroupState__notifyChange_closure(), type$.String, type$.bool),
        t2 = B._instanceType(t1)._eval$1("LinkedHashMapKeysIterable<1>");
      change.call$1(B.List_List$of(new B.LinkedHashMapKeysIterable(t1, t2), true, t2._eval$1("Iterable.E")));
    },
    build$1(context) {
      return new A.TDCheckboxGroupInherited(this, this._widget.child, null);
    }
  };
  A.TDCheckboxGroupInherited.prototype = {
    updateShouldNotify$1(oldWidget) {
      type$.TDCheckboxGroupInherited._as(oldWidget);
      return true;
    }
  };
  A.TDCheckboxGroupContainer.prototype = {
    createState$0() {
      return new A.TDCheckboxGroupContainerState(B.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.bool));
    }
  };
  A.TDCheckboxGroupContainerState.prototype = {};
  A.TDForm.prototype = {
    createState$0() {
      return new A._TDFormState(B._setArrayType([], type$.JSArray_Widget), B.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic));
    },
    onSubmit$2($receiver, arg0, arg1) {
      return this.onSubmit.call$2(arg0, arg1);
    }
  };
  A._TDFormState.prototype = {
    initState$0() {
      var t1, _this = this;
      _this.super$State$initState();
      _this.set$_formData(_this._widget.data);
      t1 = _this._widget.formController;
      t1.addListener$1(0, new A._TDFormState_initState_closure(_this));
    },
    onReset$0(_) {
      ++this._upDataCount;
      this.setState$1(new A._TDFormState_onReset_closure(this));
    },
    onSubmit$0(_) {
      var _this = this, t1 = {};
      ++_this._upDataCount;
      _this._isReset = false;
      t1.isValidateSuc = true;
      _this._formData.forEach$1(0, new A._TDFormState_onSubmit_closure(t1, _this));
      if (!t1.isValidateSuc)
        _this.setState$1(new A._TDFormState_onSubmit_closure0(_this));
      _this._widget.onSubmit$2(0, _this._formData, t1.isValidateSuc);
    },
    validate$2($name, value) {
      this._widget.rules.$index(0, $name);
      return true;
    },
    build$1(context) {
      var t4, t5, _this = this, _null = null,
        t1 = _this._widget.items,
        t2 = B._arrayInstanceType(t1),
        t3 = t2._eval$1("ExpandIterable<1,Widget>");
      _this.set$_formItems(B.List_List$of(new B.ExpandIterable(t1, t2._eval$1("Iterable<Widget>(1)")._as(new A._TDFormState_build_closure()), t3), true, t3._eval$1("Iterable.E")));
      t1 = _this._widget;
      t2 = _this._formItems;
      t1 = t1.btnGroup;
      C.JSArray_methods.addAll$1(t2, t1);
      t1 = _this._widget;
      t2 = t1.data;
      t3 = t1.labelWidth;
      t4 = _this._isValidate;
      t1 = t1.rules;
      t5 = _this._upDataCount;
      return new A.TDFormInherited(t2, t3, false, t4, t1, true, true, C.TextAlign_0, new A._TDFormState_build_closure0(_this), _this._isReset, t5, Am.ListView$builder(500, _null, new A._TDFormState_build_closure1(_this), _this._formItems.length, _null, new A2.NeverScrollableScrollPhysics(_null), C.Axis_1, true), _null);
    },
    set$_formItems(_formItems) {
      this._formItems = type$.List_Widget._as(_formItems);
    },
    set$_formData(_formData) {
      this._formData = type$.Map_String_dynamic._as(_formData);
    }
  };
  A.FormController.prototype = {
    submit$0(_) {
      this.eventType = "submit";
      this.notifyListeners$0();
    },
    set$formData(_, formData) {
      this.formData = type$.Map_String_dynamic._as(formData);
    },
    $isListenable: 1
  };
  A._FormController_Object_ChangeNotifier.prototype = {};
  A.TDFormInherited.prototype = {
    updateShouldNotify$1(oldWidget) {
      var t1, _this = this;
      type$.TDFormInherited._as(oldWidget);
      t1 = true;
      if (_this.updataCount === oldWidget.updataCount)
        if (_this.isReset === oldWidget.isReset)
          if (_this.labelWidth === oldWidget.labelWidth)
            if (_this.isValidate === oldWidget.isValidate)
              if (_this.rules === oldWidget.rules)
                t1 = _this.formContentAlign !== oldWidget.formContentAlign;
      return t1;
    }
  };
  A.TDFormItemType.prototype = {
    _enumToString$0() {
      return "TDFormItemType." + this._name;
    }
  };
  A.TDFormItem.prototype = {
    createState$0() {
      return new A._TDFormItemState();
    }
  };
  A._TDFormItemState.prototype = {
    initState$0() {
      this.super$State$initState();
      this._widget.toString;
    },
    dispose$0() {
      this.super$State$dispose();
      this._widget.toString;
    },
    didChangeDependencies$0() {
      var _this = this;
      if (_this._framework$_element.dependOnInheritedWidgetOfExactType$1$0(type$.TDFormInherited).isValidate)
        _this.startValidation$0();
      if (_this.get$FormIsReset())
        _this.errorMessage = "";
      _this.super$State$didChangeDependencies();
    },
    get$LabelWidth() {
      var t1,
        inherited = this._framework$_element.dependOnInheritedWidgetOfExactType$1$0(type$.TDFormInherited);
      this._widget.toString;
      if ((inherited == null ? null : inherited.labelWidth) != null) {
        t1 = inherited.labelWidth;
        return t1;
      }
      return 8;
    },
    get$FormContentAlign() {
      var inherited = this._framework$_element.dependOnInheritedWidgetOfExactType$1$0(type$.TDFormInherited);
      this._widget.toString;
      return inherited.formContentAlign;
    },
    get$FormIsHorizontal() {
      var inherited = this._framework$_element.dependOnInheritedWidgetOfExactType$1$0(type$.TDFormInherited);
      if ((inherited == null && null) != null) {
        inherited.toString;
        return false;
      }
      return false;
    },
    get$FormIsReset() {
      var inherited = this._framework$_element.dependOnInheritedWidgetOfExactType$1$0(type$.TDFormInherited);
      if ((inherited == null ? null : inherited.isReset) != null)
        return inherited.isReset;
      return false;
    },
    get$FormRequiredMark() {
      this._framework$_element.dependOnInheritedWidgetOfExactType$1$0(type$.TDFormInherited).toString;
      return true;
    },
    get$ShowErrorMessage() {
      this._framework$_element.dependOnInheritedWidgetOfExactType$1$0(type$.TDFormInherited);
      this._widget.toString;
      return true;
    },
    startValidation$0() {
      this.setState$1(new A._TDFormItemState_startValidation_closure(this));
    },
    validate$0() {
      this._widget.toString;
      null.toString;
      this._framework$_element.dependOnInheritedWidgetOfExactType$1$0(type$.TDFormInherited).rules.$index(0, null);
      return null;
    },
    build$1(context) {
      var t1, t2, t3, t4, labelContent, itemRowContent, itemColumnContent, t5, t6, t7, _this = this, _null = null,
        _s7_ = "fontMap",
        _s14_ = "fontBodyMedium",
        theme = G.TDTheme_of(context);
      _this._widget.toString;
      t1 = _this.get$LabelWidth();
      t2 = _this._widget.label;
      t3 = G.TDTheme_of(context).__TDThemeData_fontMap_A;
      t3 === $ && B.throwLateFieldNI(_s7_);
      t3 = t3.$index(0, _s14_);
      _this._widget.toString;
      t4 = type$.JSArray_Widget;
      t3 = B._setArrayType([G.TDText$(t2, _null, t3, _null, _null, false, false, false, H.Color_wst, _null, _null, _null, _null, _null, _null, _null, _null, _null, H.Color_vnR, _null, _null, _null, _null)], t4);
      t2 = _this.get$FormRequiredMark();
      if (t2)
        _this._widget.toString;
      if (t2) {
        _this._widget.toString;
        t3.push(new F.Padding(D.EdgeInsets_4_0_0_0, G.TDText$("*", _null, _null, _null, _null, false, false, false, H.Color_wst, _null, _null, _null, _null, _null, _null, _null, Ag.TextStyle_yFz, _null, E.MaterialColor_nI1, _null, _null, _null, _null), _null));
      }
      t2 = O.Row$(t3, E.CrossAxisAlignment_2, _null, E.MainAxisAlignment_0, E.MainAxisSize_1, 0, _null, _null, E.VerticalDirection_1);
      labelContent = L.Visibility$(new F.SizedBox(t1, _null, t2, _null), false, N.SizedBox_0_0_null_null, true);
      _this.get$FormIsHorizontal();
      t2 = _this._widget.child;
      t1 = t2 == null;
      t3 = Q.Expanded$(new F.Align(A3.Alignment_1_0, _null, _null, t1 ? new F.SizedBox(_null, _null, _null, _null) : t2, _null), 1, _null);
      itemRowContent = B._setArrayType([labelContent, L.Visibility$(t3, false, t1 ? new F.SizedBox(_null, _null, _null, _null) : t2, false)], t4);
      _this.get$FormIsHorizontal();
      t2 = _this._widget.child;
      t1 = t2 == null;
      t3 = Q.Expanded$(new F.Align(A3.Alignment_1_0, _null, _null, t1 ? new F.SizedBox(_null, _null, _null, _null) : t2, _null), 1, _null);
      itemColumnContent = B._setArrayType([labelContent, new F.SizedBox(_null, 8, _null, _null), L.Visibility$(t3, false, t1 ? new F.SizedBox(_null, _null, _null, _null) : t2, false)], t4);
      switch (_this._widget.type.index) {
        case 0:
        case 5:
          t1 = K.TDColors_get_whiteColor1(G.TDTheme_of(context));
          _this.get$FormIsHorizontal();
          t2 = L.Visibility$(O.Row$(itemRowContent, E.CrossAxisAlignment_2, _null, E.MainAxisAlignment_0, E.MainAxisSize_1, 0, _null, _null, E.VerticalDirection_1), false, P.Column$(itemColumnContent, E.CrossAxisAlignment_0, _null, E.MainAxisAlignment_0, E.MainAxisSize_1, 0, _null, _null, E.VerticalDirection_1), false);
          return F.Container$(_null, new F.Padding(T.EdgeInsets_16_16_16_16, P.Column$(B._setArrayType([t2, _this._buildTipRow$2$left$top(0, D.TDFormItemType_5 === _this._widget.type ? 4 : 0)], t4), E.CrossAxisAlignment_0, _null, E.MainAxisAlignment_0, E.MainAxisSize_1, 0, _null, _null, E.VerticalDirection_1), _null), C.Clip_0, _null, _null, new F.BoxDecoration(t1, _null, _null, _null, _null, _null, _null, H.BoxShape_0), _null, _null, _null, _null, _null, _null, _null, _null);
        case 1:
          t1 = K.TDColors_get_whiteColor1(G.TDTheme_of(context));
          _this.get$FormIsHorizontal();
          return F.Container$(_null, new F.Padding(T.EdgeInsets_16_16_16_16, P.Column$(B._setArrayType([L.Visibility$(O.Row$(itemRowContent, E.CrossAxisAlignment_2, _null, E.MainAxisAlignment_0, E.MainAxisSize_1, 0, _null, _null, E.VerticalDirection_1), false, P.Column$(itemColumnContent, E.CrossAxisAlignment_0, _null, E.MainAxisAlignment_0, E.MainAxisSize_1, 0, _null, _null, E.VerticalDirection_1), false), _this._buildTipRow$2$left$top(0, 4)], t4), E.CrossAxisAlignment_0, _null, E.MainAxisAlignment_0, E.MainAxisSize_1, 0, _null, _null, E.VerticalDirection_1), _null), C.Clip_0, _null, _null, new F.BoxDecoration(t1, _null, _null, _null, _null, _null, _null, H.BoxShape_0), _null, _null, _null, _null, _null, _null, _null, _null);
        case 2:
        case 3:
          return _this._buildSelectRow$1(context);
        case 4:
          t1 = K.TDColors_get_whiteColor1(theme);
          _this.get$FormIsHorizontal();
          t2 = _this._widget.child;
          return F.Container$(_null, new F.Padding(T.EdgeInsets_16_16_16_16, P.Column$(B._setArrayType([L.Visibility$(O.Row$(B._setArrayType([labelContent, t2 == null ? new F.SizedBox(_null, _null, _null, _null) : t2], t4), E.CrossAxisAlignment_2, _null, E.MainAxisAlignment_0, E.MainAxisSize_1, 0, _null, _null, E.VerticalDirection_1), false, P.Column$(itemColumnContent, E.CrossAxisAlignment_0, _null, E.MainAxisAlignment_0, E.MainAxisSize_1, 0, _null, _null, E.VerticalDirection_1), false), _this._buildTipRow$3$left$right$top(0, 20, 4)], t4), E.CrossAxisAlignment_0, _null, E.MainAxisAlignment_0, E.MainAxisSize_1, 0, _null, _null, E.VerticalDirection_1), _null), C.Clip_0, _null, _null, new F.BoxDecoration(t1, _null, _null, _null, _null, _null, _null, H.BoxShape_0), _null, _null, _null, _null, _null, _null, _null, _null);
        case 6:
          t1 = K.TDColors_get_whiteColor1(G.TDTheme_of(context));
          _this.get$FormIsHorizontal();
          t2 = _this._widget;
          t2.toString;
          t3 = L.Visibility$(labelContent, false, N.SizedBox_0_0_null_null, true);
          t2 = t2.child;
          t2 = O.Row$(B._setArrayType([t3, Q.Expanded$(t2 == null ? new F.SizedBox(_null, _null, _null, _null) : t2, 1, _null)], t4), E.CrossAxisAlignment_0, _null, E.MainAxisAlignment_0, E.MainAxisSize_1, 0, _null, _null, E.VerticalDirection_1);
          _this._widget.toString;
          t3 = _this.get$LabelWidth();
          t5 = _this._widget.label;
          t6 = G.TDTheme_of(context).__TDThemeData_fontMap_A;
          t6 === $ && B.throwLateFieldNI(_s7_);
          t6 = t6.$index(0, _s14_);
          t7 = _this._widget;
          t7.toString;
          t6 = G.TDText$(t5, _null, t6, _null, _null, false, false, false, H.Color_wst, _null, _null, _null, _null, _null, _null, _null, _null, _null, H.Color_vnR, _null, _null, _null, _null);
          t3 = L.Visibility$(new F.SizedBox(t3, _null, t6, _null), false, N.SizedBox_0_0_null_null, true);
          t7 = t7.child;
          return F.Container$(_null, new F.Padding(T.EdgeInsets_16_16_16_16, P.Column$(B._setArrayType([L.Visibility$(t2, false, P.Column$(B._setArrayType([t3, t7 == null ? new F.SizedBox(_null, _null, _null, _null) : t7], t4), E.CrossAxisAlignment_0, _null, E.MainAxisAlignment_0, E.MainAxisSize_1, 0, _null, _null, E.VerticalDirection_1), false), _this._buildTipRow$2$left$top(0, 8)], t4), E.CrossAxisAlignment_0, _null, E.MainAxisAlignment_0, E.MainAxisSize_1, 0, _null, _null, E.VerticalDirection_1), _null), C.Clip_0, _null, _null, new F.BoxDecoration(t1, _null, _null, _null, _null, _null, _null, H.BoxShape_0), _null, _null, _null, _null, _null, _null, _null, _null);
        case 7:
          t1 = K.TDColors_get_whiteColor1(theme);
          _this.get$FormIsHorizontal();
          t2 = O.Row$(itemRowContent, E.CrossAxisAlignment_0, _null, E.MainAxisAlignment_0, E.MainAxisSize_1, 0, _null, _null, E.VerticalDirection_1);
          _this._widget.toString;
          t3 = _this.get$LabelWidth();
          t5 = _this._widget.label;
          t6 = G.TDTheme_of(context).__TDThemeData_fontMap_A;
          t6 === $ && B.throwLateFieldNI(_s7_);
          t6 = t6.$index(0, _s14_);
          t7 = _this._widget;
          t7.toString;
          t6 = G.TDText$(t5, _null, t6, _null, _null, false, false, false, H.Color_wst, _null, _null, _null, _null, _null, _null, _null, _null, _null, H.Color_vnR, _null, _null, _null, _null);
          t3 = L.Visibility$(new F.SizedBox(t3, _null, t6, _null), false, N.SizedBox_0_0_null_null, true);
          t7 = t7.child;
          return F.Container$(_null, new F.Padding(T.EdgeInsets_16_16_16_16, P.Column$(B._setArrayType([L.Visibility$(t2, false, P.Column$(B._setArrayType([t3, t7 == null ? new F.SizedBox(_null, _null, _null, _null) : t7], t4), E.CrossAxisAlignment_0, _null, E.MainAxisAlignment_0, E.MainAxisSize_1, 0, _null, _null, E.VerticalDirection_1), false), _this._buildTipRow$1$top(0)], t4), E.CrossAxisAlignment_2, _null, E.MainAxisAlignment_0, E.MainAxisSize_1, 0, _null, _null, E.VerticalDirection_1), _null), C.Clip_0, _null, _null, new F.BoxDecoration(t1, _null, _null, _null, _null, _null, _null, H.BoxShape_0), _null, _null, _null, _null, _null, _null, _null, _null);
      }
    },
    _buildSelectRow$1(context) {
      var labelContent, t4, selectText, _this = this, _null = null,
        t1 = _this.get$LabelWidth(),
        t2 = _this._widget.label,
        t3 = G.TDTheme_of(context).__TDThemeData_fontMap_A;
      t3 === $ && B.throwLateFieldNI("fontMap");
      t3 = t3.$index(0, "fontBodyMedium");
      _this._widget.toString;
      t3 = B._setArrayType([G.TDText$(t2, _null, t3, _null, _null, false, false, false, H.Color_wst, _null, _null, _null, _null, _null, _null, _null, _null, _null, H.Color_vnR, _null, _null, _null, _null)], type$.JSArray_Widget);
      t2 = _this.get$FormRequiredMark();
      if (t2)
        _this._widget.toString;
      if (t2) {
        _this._widget.toString;
        t3.push(new F.Padding(D.EdgeInsets_4_0_0_0, G.TDText$("*", _null, _null, _null, _null, false, false, false, H.Color_wst, _null, _null, _null, _null, _null, _null, _null, Ag.TextStyle_yFz, _null, E.MaterialColor_nI1, _null, _null, _null, _null), _null));
      }
      t2 = new F.Padding(new B.EdgeInsets(2, 0, 0, 0), O.Row$(t3, E.CrossAxisAlignment_2, _null, E.MainAxisAlignment_0, E.MainAxisSize_1, 0, _null, _null, E.VerticalDirection_1), _null);
      labelContent = new F.SizedBox(t1, _null, t2, _null);
      t2 = _this.get$FormContentAlign();
      t1 = _this._widget.hintText;
      t3 = G.TDTheme_of(context).__TDThemeData_fontMap_A;
      t3 === $ && B.throwLateFieldNI("fontMap");
      t3 = t3.$index(0, "fontBodyLarge");
      _this._widget.toString;
      t4 = K.TDColors_get_fontGyColor3(G.TDTheme_of(context)).withOpacity$1(0.4);
      selectText = G.TDText$(t1, _null, t3, _null, _null, false, false, false, H.Color_wst, _null, 1, H.TextOverflow_2, _null, _null, _null, _null, _null, t2, t4, _null, _null, _null, _null);
      t1 = type$.JSArray_Widget;
      t2 = O.Row$(B._setArrayType([Q.Expanded$(selectText, 1, _null), new F.Padding(D.EdgeInsets_2_0_0_0, F.Icon$(D._TDIconsData_Tod, K.TDColors_get_fontGyColor3(G.TDTheme_of(context)).withOpacity$1(0.4), _null, _null), _null)], t1), E.CrossAxisAlignment_2, _null, E.MainAxisAlignment_0, E.MainAxisSize_1, 0, _null, _null, E.VerticalDirection_1);
      t3 = K.TDColors_get_whiteColor1(G.TDTheme_of(context));
      _this.get$FormIsHorizontal();
      return M.GestureDetector$(H.HitTestBehavior_1, F.Container$(_null, P.Column$(B._setArrayType([L.Visibility$(O.Row$(B._setArrayType([labelContent, Q.Expanded$(new F.Padding(An.EdgeInsets_0_2_0_0, t2, _null), 1, _null)], t1), E.CrossAxisAlignment_2, _null, E.MainAxisAlignment_0, E.MainAxisSize_1, 0, _null, _null, E.VerticalDirection_1), false, O.Row$(B._setArrayType([Q.Expanded$(P.Column$(B._setArrayType([labelContent, new F.Padding(D.EdgeInsets_2_8_0_0, selectText, _null)], t1), E.CrossAxisAlignment_0, _null, E.MainAxisAlignment_0, E.MainAxisSize_1, 0, _null, _null, E.VerticalDirection_1), 1, _null), new F.Padding(D.EdgeInsets_2_0_0_0, F.Icon$(D._TDIconsData_Tod, K.TDColors_get_fontGyColor3(G.TDTheme_of(context)).withOpacity$1(0.4), _null, _null), _null)], t1), E.CrossAxisAlignment_2, _null, E.MainAxisAlignment_0, E.MainAxisSize_1, 0, _null, _null, E.VerticalDirection_1), false), _this._buildTipRow$2$right$top(28, 4)], t1), E.CrossAxisAlignment_0, _null, E.MainAxisAlignment_0, E.MainAxisSize_1, 0, _null, _null, E.VerticalDirection_1), C.Clip_0, t3, _null, _null, _null, _null, _null, _null, T.EdgeInsets_16_16_16_16, _null, _null, _null), E.DragStartBehavior_1, false, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, new A._TDFormItemState__buildSelectRow_closure(_this, context), _null, _null, _null, _null, _null, _null, _null, _null);
    },
    _buildTipRow$3$left$right$top(left, right, $top) {
      var t3, t4, _this = this, _null = null,
        t1 = type$.JSArray_Widget,
        t2 = B._setArrayType([], t1);
      _this._widget.toString;
      _this.get$ShowErrorMessage();
      t3 = false;
      _this.get$ShowErrorMessage();
      t3 = _this.errorMessage;
      t3 = t3 != null && t3 !== "";
      if (t3) {
        t1 = B._setArrayType([], t1);
        _this._widget.toString;
        _this.get$FormIsHorizontal();
        t3 = _this.errorMessage;
        t4 = _this._framework$_element;
        t4.toString;
        t4 = G.TDTheme_of(t4).__TDThemeData_fontMap_A;
        t4 === $ && B.throwLateFieldNI("fontMap");
        t4 = t4.$index(0, "fontBodySmall");
        _this._widget.toString;
        t1.push(Q.Expanded$(new F.Padding(new B.EdgeInsets(left, $top, right, 0), G.TDText$(t3, _null, t4, _null, _null, false, false, false, H.Color_wst, _null, _null, _null, _null, _null, _null, _null, _null, C.TextAlign_0, F.Color$fromRGBO(213, 73, 65, 1), _null, _null, _null, _null), _null), 1, _null));
        t2.push(O.Row$(t1, E.CrossAxisAlignment_2, _null, E.MainAxisAlignment_0, E.MainAxisSize_1, 0, _null, _null, E.VerticalDirection_1));
      }
      return P.Column$(t2, E.CrossAxisAlignment_0, _null, E.MainAxisAlignment_0, E.MainAxisSize_1, 0, _null, _null, E.VerticalDirection_1);
    },
    _buildTipRow$2$left$top(left, $top) {
      return this._buildTipRow$3$left$right$top(left, 20, $top);
    },
    _buildTipRow$1$top($top) {
      return this._buildTipRow$3$left$right$top(4, 20, $top);
    },
    _buildTipRow$2$right$top(right, $top) {
      return this._buildTipRow$3$left$right$top(4, right, $top);
    }
  };
  A.TDInputView.prototype = {
    build$1(context) {
      var _this = this, _null = null,
        t1 = _this.textAlign;
      if (t1 == null)
        t1 = C.TextAlign_4;
      return A6.TextField$(true, C.List_empty, false, _this.get$_buildCounter(), true, _null, A6.text_field0_TextField__defaultContextMenuBuilder$closure(), _this.controller, _this.cursorColor, _null, _this.inputDecoration, E.DragStartBehavior_1, true, _null, true, _null, false, _this.focusNode, A8.Type_EditableText_O5i, _null, _this.inputFormatters, _null, _this.inputType, _null, _this.maxLength, _null, _this.maxLines, _null, _null, false, "\u2022", _null, _this.onChanged, _this.onEditingComplete, _this.onSubmitted, _null, false, _this.onTapOutside, false, _null, _null, A3.EdgeInsets_20_20_20_20, _null, _null, _null, _null, _null, _null, _null, _this.textStyle, true, t1, _null, A8.TextCapitalization_30, _null, _this.inputAction, _null);
    },
    _buildCounter$4$currentLength$isFocused$maxLength(context, currentLength, isFocused, maxLength) {
      return null;
    }
  };
  A.TDInputType.prototype = {
    _enumToString$0() {
      return "TDInputType." + this._name;
    }
  };
  A.TDInputSize.prototype = {
    _enumToString$0() {
      return "TDInputSize." + this._name;
    }
  };
  A.TDInput.prototype = {
    getInputPadding$0() {
      switch (1) {
        case 1:
          return 16;
      }
    },
    _measureTextWidth$3(text, style, context) {
      return 0;
    },
    buildInputView$1(context) {
      var labelWidth = this._measureTextWidth$3(null, null, context);
      this._leftLabelWidth = 0 + labelWidth + 0 + 4;
      switch (0) {
        case 0:
          return this.buildNormalInput$1(context);
      }
    },
    _getBottomDividerMarginLeft$0() {
      switch (0) {
        case 0:
        case 1:
        case 4:
        case 5:
          var t1 = this.spacer.labelInputSpace;
          return t1 == null ? 16 : t1;
      }
    },
    buildNormalInput$1(context) {
      var t8, t9, t10, t11, t12, _this = this, _null = null,
        _s7_ = "fontMap",
        _s13_ = "fontBodyLarge",
        cardStyleDecoration = _this._getCardStylePreDecoration$1(context),
        t1 = cardStyleDecoration == null ? _null : cardStyleDecoration,
        t2 = L.Visibility$(new F.SizedBox(16, _null, _null, _null), false, N.SizedBox_0_0_null_null, false),
        t3 = _this._leftLabelWidth,
        t4 = L.Visibility$(new F.SizedBox(24, _null, N.SizedBox_0_0_null_null, _null), false, N.SizedBox_0_0_null_null, false),
        t5 = _this.getInputPadding$0(),
        t6 = _this.getInputPadding$0(),
        t7 = G.TDTheme_of(context).__TDThemeData_fontMap_A;
      t7 === $ && B.throwLateFieldNI(_s7_);
      t6 = L.Visibility$(F.Container$(_null, G.TDText$(_null, _null, t7.$index(0, _s13_), _null, H.FontWeight_3, false, false, false, H.Color_wst, _null, 1, H.TextOverflow_3, _null, _null, _null, _null, D.TextStyle_IpK, _null, H.Color_vnR, _null, _null, _null, _null), C.Clip_0, _null, new B.BoxConstraints(0, t3, 0, 1 / 0), _null, _null, _null, _null, _null, new B.EdgeInsets(0, t5, 0, t6), _null, _null, _null), false, N.SizedBox_0_0_null_null, false);
      t5 = L.Visibility$(N.SizedBox_0_0_null_null, false, N.SizedBox_0_0_null_null, false);
      t7 = F.TextStyle$(_null, _null, G.TDColors_get_errorColor6(G.TDTheme_of(context)), _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, true, _null, _null, _null, _null, _null, _null, _null, _null);
      t8 = G.TDTheme_of(context).__TDThemeData_fontMap_A;
      t8 === $ && B.throwLateFieldNI(_s7_);
      t9 = type$.JSArray_Widget;
      t7 = M.GestureDetector$(_null, O.Row$(B._setArrayType([t4, t6, t5, L.Visibility$(new F.Padding(D.EdgeInsets_4_0_0_0, G.TDText$("*", _null, t8.$index(0, _s13_), _null, H.FontWeight_3, false, false, false, H.Color_wst, _null, 1, _null, _null, _null, _null, _null, t7, _null, H.Color_vnR, _null, _null, _null, _null), _null), false, N.SizedBox_0_0_null_null, false)], t9), E.CrossAxisAlignment_2, _null, E.MainAxisAlignment_0, E.MainAxisSize_1, 0, _null, _null, E.VerticalDirection_1), E.DragStartBehavior_1, false, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null);
      t4 = F.TextStyle$(_null, _null, G.TDColors_get_fontGyColor1(G.TDTheme_of(context)), _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, true, _null, _null, _null, _null, _null, _null, _null, _null);
      t5 = F.TextStyle$(_null, _null, K.TDColors_get_fontGyColor3(G.TDTheme_of(context)), _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, true, _null, _null, _null, _null, _null, _null, _null, _null);
      t6 = _this.controller;
      t8 = _this.spacer;
      t10 = t8.labelInputSpace;
      if (t10 == null)
        t10 = 16;
      t11 = t8.inputRightSpace;
      t11 = t11 != null ? t11 / 2 : 16;
      t12 = _this.getInputPadding$0();
      t10 = new B.EdgeInsets(t10, _this.getInputPadding$0(), t11, t12);
      t4 = A.TDInputView$(false, t10, t6, _null, _null, _null, t5, _null, _this.inputDecoration, _null, _null, true, 500, 1, false, _this.onChanged, _null, _null, _null, false, C.TextAlign_4, _null, t4);
      t5 = t8.additionInfoSpace;
      if (t5 == null)
        t5 = 16;
      t10 = _this.getInputPadding$0();
      t11 = G.TDTheme_of(context).__TDThemeData_fontMap_A;
      t11 === $ && B.throwLateFieldNI(_s7_);
      t11 = t11.$index(0, "fontBodySmall");
      t12 = K.TDColors_get_fontGyColor3(G.TDTheme_of(context));
      t4 = Q.Expanded$(P.Column$(B._setArrayType([t4, L.Visibility$(F.Container$(_null, G.TDText$("", _null, t11, _null, _null, false, false, false, H.Color_wst, _null, _null, _null, _null, _null, _null, _null, _null, C.TextAlign_4, t12, _null, _null, _null, _null), C.Clip_0, _null, _null, _null, _null, _null, _null, _null, new B.EdgeInsets(t5, 0, 0, t10), _null, _null, 1 / 0), false, N.SizedBox_0_0_null_null, false)], t9), E.CrossAxisAlignment_0, _null, E.MainAxisAlignment_0, E.MainAxisSize_1, 0, _null, _null, E.VerticalDirection_1), 1, _null);
      t5 = L.Visibility$(F.Container$(_null, _null, C.Clip_0, _null, _null, _null, _null, _null, _null, new B.EdgeInsets(0, _this.getInputPadding$0(), 16, _this.getInputPadding$0()), _null, _null, _null, _null), false, N.SizedBox_0_0_null_null, false);
      if (t6 != null)
        t6 = t6._change_notifier$_value.text.length !== 0;
      else
        t6 = false;
      t10 = t8.inputRightSpace;
      t10 = t10 != null ? t10 / 2 : 8;
      t11 = t8.rightSpace;
      if (t11 == null)
        t11 = 16;
      t12 = K.TDColors_get_fontGyColor3(G.TDTheme_of(context));
      t10 = F.Container$(_null, F.Icon$(D._TDIconsData_pHz, t12, _null, _null), C.Clip_0, _null, _null, _null, _null, _null, _null, new B.EdgeInsets(t10, 0, t11, 0), _null, _null, _null, _null);
      t10 = M.GestureDetector$(_null, t10, E.DragStartBehavior_1, false, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, new A.TDInput_buildNormalInput_closure(_this), _null, _null, _null, _null, _null, _null, _null, _null);
      t11 = t8.inputRightSpace;
      t11 = t11 != null ? t11 / 2 : 8;
      t8 = t8.rightSpace;
      if (t8 == null)
        t8 = 16;
      t1 = B._setArrayType([F.Container$(S.Alignment_m1_0, O.Row$(B._setArrayType([t2, new F.SizedBox(t3, _null, t7, _null), t4, t5, L.Visibility$(t10, false, L.Visibility$(M.GestureDetector$(_null, F.Container$(_null, _null, C.Clip_0, _null, _null, _null, _null, _null, _null, new B.EdgeInsets(t11, 0, t8, 0), _null, _null, _null, _null), E.DragStartBehavior_1, false, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null), false, N.SizedBox_0_0_null_null, false), t6)], t9), E.CrossAxisAlignment_2, _null, E.MainAxisAlignment_0, E.MainAxisSize_1, 0, _null, _null, E.VerticalDirection_1), C.Clip_0, _null, _null, t1, _null, _null, _null, _null, _null, _null, _null, _null)], t9);
      t1.push(L.Visibility$(A.TDDivider$(new B.EdgeInsets(_this._getBottomDividerMarginLeft$0(), 0, 0, 0)), false, N.SizedBox_0_0_null_null, true));
      return new F.Stack(A4.Alignment_0_1, _null, H.StackFit_0, C.Clip_1, t1, _null);
    },
    _getCardStylePreDecoration$1(context) {
      return null;
    },
    build$1(context) {
      var t1 = B.InheritedModel_inheritFrom(context, null, type$.MediaQuery).data,
        t2 = this.buildInputView$1(context);
      return new F.SizedBox(t1.size._dx, null, t2, null);
    }
  };
  A.TDInputSpacer.prototype = {};
  A.TDRadioStyle.prototype = {
    _enumToString$0() {
      return "TDRadioStyle." + this._name;
    }
  };
  A.TDRadio.prototype = {
    buildDefaultIcon$3(context, groupState, isSelected) {
      var t1, theme, iconData;
      if (groupState instanceof A.TDRadioGroupState) {
        t1 = groupState._widget;
        t1.toString;
        type$.TDRadioGroup._as(t1);
      }
      theme = G.TDTheme_of(context);
      switch (0) {
        default:
          iconData = isSelected ? Ad._TDIconsData_NvB : D._TDIconsData_GAI;
          break;
      }
      if (iconData != null) {
        if (isSelected)
          t1 = G.TDColors_get_brandNormalColor(theme);
        else
          t1 = K.TDColors_get_grayColor4(theme);
        return F.Icon$(iconData, t1, null, 24);
      } else
        return new F.SizedBox(24, 24, null, null);
    },
    createState$0() {
      return new A.TDRadioState();
    }
  };
  A.TDRadioState.prototype = {
    build$1(context) {
      var t1 = context.dependOnInheritedWidgetOfExactType$1$0(type$.TDCheckboxGroupInherited),
        groupState = t1 == null ? null : t1.state;
      if (groupState instanceof A.TDRadioGroupState) {
        t1 = groupState._widget;
        t1.toString;
        type$.TDRadioGroup._as(t1);
        this.canNotCancel = true;
      }
      return this.super$TDCheckboxState$build(context);
    }
  };
  A.TDRadioGroup.prototype = {
    createState$0() {
      return new A.TDRadioGroupState(B.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.bool));
    }
  };
  A.TDRadioGroupState.prototype = {
    toggle$2(_, id, check) {
      this.checkBoxStates.forEach$1(0, new A.TDRadioGroupState_toggle_closure(this));
      return this.super$TDCheckboxGroupState$toggle(0, id, check, true);
    }
  };
  A.TDSlider.prototype = {
    createState$0() {
      return new A.TDSliderState(new I.LabeledGlobalKey(null, type$.LabeledGlobalKey_State_StatefulWidget));
    }
  };
  A.TDSliderState.prototype = {
    initState$0() {
      this.super$State$initState();
      this.value = this._widget.value;
    },
    didUpdateWidget$1(oldWidget) {
      this.super$State$didUpdateWidget(type$.TDSlider._as(oldWidget));
      this.value = this._widget.value;
    },
    build$1(context) {
      var t3, t4, t5, _this = this, _null = null,
        t1 = _this._widget,
        tdSliderThemeData = t1.sliderThemeData,
        t2 = tdSliderThemeData.showScaleValue || tdSliderThemeData.showThumbValue ? 16 : 0;
      t1 = t1.leftLabel;
      if (t1.length !== 0)
        t1 = new F.Padding(D.EdgeInsets_16_0_0_0, X.Text$(t1, _null, _null, _null, _null, _null, _null, _null, F.TextStyle$(_null, _null, A_.Color_PYr, _null, _null, _null, _null, _null, _null, _null, _null, 16, _null, _null, _null, _null, _null, true, _null, _null, _null, _null, _null, _null, _null, _null), _null, _null, _null, _null, _null), _null);
      else
        t1 = F.Container$(_null, _null, C.Clip_0, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null);
      t3 = tdSliderThemeData.get$sliderThemeData();
      t4 = _this.value;
      t5 = _this._widget;
      t5.toString;
      t3 = Q.Expanded$(I.Listener$(H.HitTestBehavior_0, A.SliderTheme$(new A.Slider0(t4, new A.TDSliderState_build_closure(_this), _null, _null, tdSliderThemeData.min, tdSliderThemeData.max, tdSliderThemeData.divisions, _this._sliderKey), t3), _null, new A.TDSliderState_build_closure0(_this), _null, _null, _null), 1, _null);
      t4 = t5.rightLabel;
      if (t4.length !== 0)
        t4 = new F.Padding(D.EdgeInsets_0_0_16_0, X.Text$(t4, _null, _null, _null, _null, _null, _null, _null, F.TextStyle$(_null, _null, A_.Color_PYr, _null, _null, _null, _null, _null, _null, _null, _null, 16, _null, _null, _null, _null, _null, true, _null, _null, _null, _null, _null, _null, _null, _null), _null, _null, _null, _null, _null), _null);
      else
        t4 = F.Container$(_null, _null, C.Clip_0, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null);
      return I.Listener$(H.HitTestBehavior_0, F.Container$(_null, O.Row$(B._setArrayType([t1, A0.SizedBox_8_null_null_null, t3, A0.SizedBox_8_null_null_null, t4], type$.JSArray_Widget), E.CrossAxisAlignment_2, _null, E.MainAxisAlignment_0, E.MainAxisSize_1, 0, _null, _null, E.VerticalDirection_1), C.Clip_0, _null, _null, D.BoxDecoration_6xp, _null, _null, _null, _null, new B.EdgeInsets(0, t2 + 8, 0, 8), _null, _null, _null), _null, new A.TDSliderState_build_closure1(_this, tdSliderThemeData), _null, _null, _null);
    }
  };
  A.TDRangeSlider.prototype = {
    createState$0() {
      return new A._TDRangeSliderState(D.RangeValues_0_100, new I.LabeledGlobalKey(null, type$.LabeledGlobalKey_State_StatefulWidget));
    }
  };
  A._TDRangeSliderState.prototype = {
    initState$0() {
      this.super$State$initState();
      this.rangeValues = this._widget.value;
    },
    didUpdateWidget$1(oldWidget) {
      this.super$State$didUpdateWidget(type$.TDRangeSlider._as(oldWidget));
      this.rangeValues = this._widget.value;
    },
    build$1(context) {
      var t3, t4, t5, _this = this, _null = null,
        t1 = _this._widget,
        tdSliderThemeData = t1.sliderThemeData,
        t2 = tdSliderThemeData.showScaleValue || tdSliderThemeData.showThumbValue ? 16 : 0;
      t1 = t1.leftLabel;
      if (t1.length !== 0)
        t1 = new F.Padding(D.EdgeInsets_16_0_0_0, X.Text$(t1, _null, _null, _null, _null, _null, _null, _null, F.TextStyle$(_null, _null, A_.Color_PYr, _null, _null, _null, _null, _null, _null, _null, _null, 16, _null, _null, _null, _null, _null, true, _null, _null, _null, _null, _null, _null, _null, _null), _null, _null, _null, _null, _null), _null);
      else
        t1 = F.Container$(_null, _null, C.Clip_0, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null);
      t3 = tdSliderThemeData.get$sliderThemeData();
      t4 = _this.rangeValues;
      t5 = _this._widget;
      t5.toString;
      t3 = Q.Expanded$(I.Listener$(H.HitTestBehavior_0, A.SliderTheme$(new A.RangeSlider(t4, new A._TDRangeSliderState_build_closure(_this), _null, _null, tdSliderThemeData.min, tdSliderThemeData.max, tdSliderThemeData.divisions, _this._sliderRangeKey), t3), _null, new A._TDRangeSliderState_build_closure0(_this, context), _null, _null, _null), 1, _null);
      t4 = t5.rightLabel;
      if (t4.length !== 0)
        t4 = new F.Padding(D.EdgeInsets_0_0_16_0, X.Text$(t4, _null, _null, _null, _null, _null, _null, _null, F.TextStyle$(_null, _null, A_.Color_PYr, _null, _null, _null, _null, _null, _null, _null, _null, 16, _null, _null, _null, _null, _null, true, _null, _null, _null, _null, _null, _null, _null, _null), _null, _null, _null, _null, _null), _null);
      else
        t4 = F.Container$(_null, _null, C.Clip_0, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null);
      return I.Listener$(H.HitTestBehavior_0, F.Container$(_null, O.Row$(B._setArrayType([t1, A0.SizedBox_8_null_null_null, t3, A0.SizedBox_8_null_null_null, t4], type$.JSArray_Widget), E.CrossAxisAlignment_2, _null, E.MainAxisAlignment_0, E.MainAxisSize_1, 0, _null, _null, E.VerticalDirection_1), C.Clip_0, _null, _null, D.BoxDecoration_6xp, _null, _null, _null, _null, new B.EdgeInsets(0, t2 + 8, 0, 8), _null, _null, _null), _null, new A._TDRangeSliderState_build_closure1(_this, tdSliderThemeData), _null, _null, _null);
    }
  };
  A.TDSliderThemeData.prototype = {
    get$sliderThemeData() {
      var t2, t3, t4, t5, t6, _this = this, _null = null,
        t1 = _this._sliderThemeData;
      if (t1 == null) {
        t1 = G.TDColors_get_brandNormalColor(G.TDTheme_of(_null));
        t2 = K.TDColors_get_grayColor4(G.TDTheme_of(_null));
        t3 = G.TDColors_get_brandDisabledColor(G.TDTheme_of(_null));
        t4 = K.TDColors_get_grayColor2(G.TDTheme_of(_null));
        t5 = G.TDColors_get_brandNormalColor(G.TDTheme_of(_null));
        t6 = K.TDColors_get_grayColor4(G.TDTheme_of(_null));
        t2 = I.SliderThemeData$(t5, t1, _null, G.TDColors_get_brandDisabledColor(G.TDTheme_of(_null)), t3, K.TDColors_get_grayColor2(G.TDTheme_of(_null)), t4, _null, H.Color_wst, t6, t2, _null, _null, _null, _null, D.C_TDNoOverlayShape, _null, new A.TDRoundRangeSliderThumbShape(_this), new A.TDRoundRangeSliderTickMarkShape(_this), new A.TDRoundedRectRangeSliderTrackShape(_this), _null, _null, D.ShowValueIndicator_3, H.Color_wst, _null, new A.TDRoundSliderThumbShape(_this), _null, new A.TDRoundSliderTickMarkShape(_this), _null, 4, new A.TDRoundedRectSliderTrackShape(_this), _null, _null, _null, _null, _null);
        t1 = t2;
        t1 = _this._sliderThemeData = t1;
      }
      return t1;
    }
  };
  A.SliderMeasureData.prototype = {};
  A.TDRoundedRectSliderTrackShape.prototype = {
    paint$10$enableAnimation$isDiscrete$isEnabled$parentBox$secondaryOffset$sliderTheme$textDirection$thumbCenter(context, offset, enableAnimation, isDiscrete, isEnabled, parentBox, secondaryOffset, sliderTheme, textDirection, thumbCenter) {
      var t1, activePaint, t2, inactivePaint, rightTrackPaint, leftTrackPaint, trackRect, t3, t4, trackRadius, activeTrackRadius, t5, t6, t7, t8, t9;
      type$.Animation_double._as(enableAnimation);
      t1 = sliderTheme.trackHeight;
      if (t1 == null || t1 <= 0)
        return;
      t1 = $.$get$_renderer();
      activePaint = t1.createPaint$0();
      t2 = new M.ColorTween(sliderTheme.disabledActiveTrackColor, sliderTheme.activeTrackColor).transform$1(0, enableAnimation.get$value(0));
      t2.toString;
      activePaint.set$color(0, t2);
      inactivePaint = t1.createPaint$0();
      t1 = new M.ColorTween(sliderTheme.disabledInactiveTrackColor, sliderTheme.inactiveTrackColor).transform$1(0, enableAnimation.get$value(0));
      t1.toString;
      inactivePaint.set$color(0, t1);
      switch (textDirection.index) {
        case 1:
          rightTrackPaint = inactivePaint;
          leftTrackPaint = activePaint;
          break;
        case 0:
          rightTrackPaint = activePaint;
          leftTrackPaint = inactivePaint;
          break;
        default:
          leftTrackPaint = null;
          rightTrackPaint = null;
      }
      trackRect = this.getPreferredRect$5$isDiscrete$isEnabled$offset$parentBox$sliderTheme(isDiscrete, isEnabled, offset, parentBox, sliderTheme);
      this.themeData.sliderMeasureData.trackerRect = trackRect;
      t1 = trackRect.bottom;
      t2 = trackRect.top;
      t3 = t1 - t2;
      t4 = t3 / 2;
      trackRadius = new B.Radius(t4, t4);
      t3 = (t3 + 2) / 2;
      activeTrackRadius = new B.Radius(t3, t3);
      t3 = context.get$canvas(0);
      t4 = textDirection === C.TextDirection_0;
      t5 = t4 ? t2 - 1 : t2;
      t6 = thumbCenter._dx;
      t7 = t4 ? t1 + 1 : t1;
      t8 = textDirection === C.TextDirection_1;
      t9 = t8 ? activeTrackRadius : trackRadius;
      t8 = t8 ? activeTrackRadius : trackRadius;
      t3.drawRRect$2(F.RRect$fromLTRBAndCorners(trackRect.left, t5, t6, t7, t8, C.Radius_0_0, t9, C.Radius_0_0), leftTrackPaint);
      t9 = context.get$canvas(0);
      if (t4)
        --t2;
      if (t4)
        ++t1;
      t3 = t4 ? activeTrackRadius : trackRadius;
      t4 = t4 ? activeTrackRadius : trackRadius;
      t9.drawRRect$2(F.RRect$fromLTRBAndCorners(t6, t2, trackRect.right, t1, C.Radius_0_0, t4, C.Radius_0_0, t3), rightTrackPaint);
    }
  };
  A.TDRoundSliderThumbShape.prototype = {
    getPreferredSize$2(isEnabled, isDiscrete) {
      return new B.Size(20, 20);
    },
    paint$12$activationAnimation$enableAnimation$isDiscrete$labelPainter$parentBox$sizeWithOverflow$sliderTheme$textDirection$textScaleFactor$value(context, center, activationAnimation, enableAnimation, isDiscrete, labelPainter, parentBox, sizeWithOverflow, sliderTheme, textDirection, textScaleFactor, value) {
      var canvas, t2, radius, evaluatedElevation, path, t3, t4, trackerRect, t5, t6, t7, formatterValue, painter, paint, _null = null,
        t1 = type$.Animation_double;
      t1._as(activationAnimation);
      t1._as(enableAnimation);
      canvas = context.get$canvas(0);
      t1 = type$.Tween_double;
      t2 = new M.ColorTween(sliderTheme.disabledThumbColor, sliderTheme.thumbColor).transform$1(0, enableAnimation.get$value(0));
      t2.toString;
      radius = new F.Tween(10, 10, t1).transform$1(0, enableAnimation.get$value(0));
      evaluatedElevation = new F.Tween(4, 4, t1).transform$1(0, activationAnimation.get$value(0));
      t1 = $.$get$_renderer();
      path = t1.createPath$0();
      t3 = 2 * radius;
      path.addArc$3(B.Rect$fromCenter(center, t3, t3), 0, 6.283185307179586);
      canvas.drawShadow$4(path, D.Color_SHX, evaluatedElevation, true);
      t3 = this.themeData;
      if (t3.showThumbValue && t3.sliderMeasureData.trackerRect != null) {
        t4 = t3.sliderMeasureData;
        trackerRect = t4.trackerRect;
        t5 = center._dx;
        t6 = trackerRect.left;
        t7 = t3.min;
        value = (t3.max - t7) * ((t5 - t6) / (trackerRect.right - t6)) + t7;
        t6 = t3.scaleFormatter;
        formatterValue = t6 == null ? C.JSNumber_methods.toStringAsFixed$1(value, 2) : t6.call$1(value);
        painter = F.TextPainter$(_null, _null, _null, _null, F.TextSpan$(_null, enableAnimation.get$value(0) > 0 ? t3.thumbTextStyle : t3.disabledThumbTextStyle, formatterValue), C.TextAlign_2, C.TextDirection_1, _null, C._LinearTextScaler_1, H.TextWidthBasis_0);
        painter.layout$1$maxWidth(100);
        t3 = painter._layoutCache;
        t6 = t3.contentWidth;
        t7 = center._dy;
        t3 = t3.layout._paragraph;
        t3 = t3.get$height(t3);
        painter.paint$2(context.get$canvas(0), new B.Offset(t5 - t6 / 2, t7 - t3 - 14));
        t3 = painter._layoutCache;
        t5 -= t3.contentWidth / 2;
        t3 = t3.layout._paragraph;
        t3 = t7 - t3.get$height(t3) - 14;
        t7 = painter._layoutCache;
        t6 = t7.contentWidth;
        t7 = t7.layout._paragraph;
        t4.thumbTextRect = new B.Rect(t5, t3, t5 + t6, t3 + t7.get$height(t7));
      }
      paint = t1.createPaint$0();
      paint.set$color(0, t2);
      canvas.drawCircle$3(center, radius, paint);
      t2 = B.Rect$fromCircle(center, radius);
      t1 = t1.createPaint$0();
      t1.set$style(0, C.PaintingStyle_1);
      t1.set$strokeWidth(1);
      t1.set$color(0, K.TDColors_get_grayColor3(G.TDTheme_of(_null)));
      canvas.drawArc$5(t2, 0, 6.283185307179586, false, t1);
    }
  };
  A.TDNoOverlayShape.prototype = {
    getPreferredSize$2(isEnabled, isDiscrete) {
      return D.Size_0_40;
    },
    paint$12$activationAnimation$enableAnimation$isDiscrete$labelPainter$parentBox$sizeWithOverflow$sliderTheme$textDirection$textScaleFactor$value(context, center, activationAnimation, enableAnimation, isDiscrete, labelPainter, parentBox, sizeWithOverflow, sliderTheme, textDirection, textScaleFactor, value) {
      var t1 = type$.Animation_double;
      t1._as(activationAnimation);
      t1._as(enableAnimation);
    }
  };
  A.TDRoundSliderTickMarkShape.prototype = {
    getPreferredSize$2$isEnabled$sliderTheme(isEnabled, sliderTheme) {
      return new B.Size(8, 8);
    },
    paint$8$enableAnimation$isEnabled$parentBox$sliderTheme$textDirection$thumbCenter(context, center, enableAnimation, isEnabled, parentBox, sliderTheme, textDirection, thumbCenter) {
      var isTickMarkRightOfThumb, begin, end, isTickMarkLeftOfThumb, paint, t1, t2, rect, trackHeight, t3, t4, t5, index, value, valueFormatter, painter, x, _null = null;
      type$.Animation_double._as(enableAnimation);
      switch (textDirection.index) {
        case 1:
          isTickMarkRightOfThumb = center._dx > thumbCenter._dx;
          begin = isTickMarkRightOfThumb ? sliderTheme.disabledInactiveTickMarkColor : sliderTheme.disabledActiveTickMarkColor;
          end = isTickMarkRightOfThumb ? sliderTheme.inactiveTickMarkColor : sliderTheme.activeTickMarkColor;
          break;
        case 0:
          isTickMarkLeftOfThumb = center._dx < thumbCenter._dx;
          begin = isTickMarkLeftOfThumb ? sliderTheme.disabledInactiveTickMarkColor : sliderTheme.disabledActiveTickMarkColor;
          end = isTickMarkLeftOfThumb ? sliderTheme.inactiveTickMarkColor : sliderTheme.activeTickMarkColor;
          break;
        default:
          end = _null;
          begin = end;
      }
      paint = $.$get$_renderer().createPaint$0();
      t1 = new M.ColorTween(begin, end).transform$1(0, enableAnimation.get$value(0));
      t1.toString;
      paint.set$color(0, t1);
      t1 = this.themeData;
      if (t1.showScaleValue) {
        t2 = sliderTheme.trackShape;
        rect = t2 == null ? _null : t2.getPreferredRect$2$parentBox$sliderTheme(parentBox, sliderTheme);
        if (rect != null) {
          t2 = t1.divisions;
          t2.toString;
          t2 = t2 > 0;
        } else
          t2 = false;
        if (t2) {
          trackHeight = rect.bottom - rect.top;
          t2 = rect.right;
          t3 = rect.left;
          t4 = t1.divisions;
          t4.toString;
          t5 = center._dx;
          index = C.JSNumber_methods.round$0((t5 - (t3 + trackHeight / 2)) / ((t2 - t3 - trackHeight) / t4));
          t3 = t1.min;
          value = t3 + index * ((t1.max - t3) / t4);
          t2 = t1.scaleFormatter;
          valueFormatter = t2 != null ? t2.call$1(value) : C.JSNumber_methods.toString$0(value);
          painter = F.TextPainter$(_null, _null, _null, _null, F.TextSpan$(_null, enableAnimation.get$value(0) > 0 ? t1.scaleTextStyle : t1.disabledScaleTextStyle, valueFormatter), C.TextAlign_2, C.TextDirection_1, _null, C._LinearTextScaler_1, H.TextWidthBasis_0);
          painter.layout$1$maxWidth(100);
          t1 = painter._layoutCache;
          t2 = t1.contentWidth;
          t1 = t1.layout._paragraph;
          t1.get$height(t1);
          x = t5 - t2 / 2;
          if (index === 0)
            x = t5 - trackHeight;
          else if (index === t4) {
            t1 = painter._layoutCache;
            t2 = t1.contentWidth;
            t1 = t1.layout._paragraph;
            t1.get$height(t1);
            x = t5 - t2 + trackHeight;
          }
          t1 = context.get$canvas(0);
          t2 = painter._layoutCache.layout._paragraph;
          painter.paint$2(t1, new B.Offset(x, center._dy - t2.get$height(t2) - 14));
        }
        context.get$canvas(0).drawCircle$3(center, 4, paint);
      }
    }
  };
  A.TDBaseRangeSliderTrackShape.prototype = {
    getPreferredRect$5$isDiscrete$isEnabled$offset$parentBox$sliderTheme(isDiscrete, isEnabled, offset, parentBox, sliderTheme) {
      var trackLeft, trackTop, trackRight,
        thumbWidth = sliderTheme.rangeThumbShape.getPreferredSize$2(isEnabled, isDiscrete)._dx,
        overlayWidth = sliderTheme.overlayShape.getPreferredSize$2(isEnabled, isDiscrete)._dx,
        t1 = sliderTheme.trackHeight;
      t1.toString;
      trackLeft = offset._dx + Math.max(overlayWidth / 2, thumbWidth / 2);
      trackTop = offset._dy + (parentBox.get$size(0)._dy - t1) / 2;
      trackRight = trackLeft + parentBox.get$size(0)._dx - Math.max(thumbWidth, overlayWidth);
      return new B.Rect(Math.min(trackLeft, trackRight), trackTop, Math.max(trackLeft, trackRight), trackTop + t1);
    },
    getPreferredRect$3$isDiscrete$parentBox$sliderTheme(isDiscrete, parentBox, sliderTheme) {
      return this.getPreferredRect$5$isDiscrete$isEnabled$offset$parentBox$sliderTheme(isDiscrete, false, C.Offset_0_0, parentBox, sliderTheme);
    },
    getPreferredRect$4$isDiscrete$offset$parentBox$sliderTheme(isDiscrete, offset, parentBox, sliderTheme) {
      return this.getPreferredRect$5$isDiscrete$isEnabled$offset$parentBox$sliderTheme(isDiscrete, false, offset, parentBox, sliderTheme);
    },
    getPreferredRect$2$parentBox$sliderTheme(parentBox, sliderTheme) {
      return this.getPreferredRect$5$isDiscrete$isEnabled$offset$parentBox$sliderTheme(false, false, C.Offset_0_0, parentBox, sliderTheme);
    }
  };
  A.TDRoundedRectRangeSliderTrackShape.prototype = {
    paint$10$enableAnimation$endThumbCenter$isDiscrete$isEnabled$parentBox$sliderTheme$startThumbCenter$textDirection(context, offset, enableAnimation, endThumbCenter, isDiscrete, isEnabled, parentBox, sliderTheme, startThumbCenter, textDirection) {
      var t1, activePaint, t2, inactivePaint, rightThumbOffset, leftThumbOffset, trackRect, t3, trackRadius, t4, t5;
      type$.Animation_double._as(enableAnimation);
      t1 = sliderTheme.trackHeight;
      if (t1 == null || t1 <= 0)
        return;
      t1 = $.$get$_renderer();
      activePaint = t1.createPaint$0();
      t2 = new M.ColorTween(sliderTheme.disabledActiveTrackColor, sliderTheme.activeTrackColor).transform$1(0, enableAnimation.get$value(0));
      t2.toString;
      activePaint.set$color(0, t2);
      inactivePaint = t1.createPaint$0();
      t1 = new M.ColorTween(sliderTheme.disabledInactiveTrackColor, sliderTheme.inactiveTrackColor).transform$1(0, enableAnimation.get$value(0));
      t1.toString;
      inactivePaint.set$color(0, t1);
      switch (textDirection.index) {
        case 1:
          rightThumbOffset = endThumbCenter;
          leftThumbOffset = startThumbCenter;
          break;
        case 0:
          rightThumbOffset = startThumbCenter;
          leftThumbOffset = endThumbCenter;
          break;
        default:
          leftThumbOffset = null;
          rightThumbOffset = null;
      }
      sliderTheme.rangeThumbShape.getPreferredSize$2(isEnabled, isDiscrete);
      trackRect = this.getPreferredRect$5$isDiscrete$isEnabled$offset$parentBox$sliderTheme(isDiscrete, isEnabled, offset, parentBox, sliderTheme);
      this.themeData.sliderMeasureData.trackerRect = trackRect;
      t1 = trackRect.bottom;
      t2 = trackRect.top;
      t3 = (t1 - t2) / 2;
      trackRadius = new B.Radius(t3, t3);
      t3 = context.get$canvas(0);
      t4 = leftThumbOffset._dx;
      t3.drawRRect$2(F.RRect$fromLTRBAndCorners(trackRect.left, t2, t4, t1, trackRadius, C.Radius_0_0, trackRadius, C.Radius_0_0), inactivePaint);
      t3 = context.get$canvas(0);
      t5 = rightThumbOffset._dx;
      t3.drawRect$2(new B.Rect(t4, t2, t5, t1 + 0), activePaint);
      context.get$canvas(0).drawRRect$2(F.RRect$fromLTRBAndCorners(t5, t2, trackRect.right, t1, C.Radius_0_0, trackRadius, C.Radius_0_0, trackRadius), inactivePaint);
    }
  };
  A.TDRoundRangeSliderThumbShape.prototype = {
    getPreferredSize$2(isEnabled, isDiscrete) {
      return new B.Size(20, 20);
    },
    paint$10$activationAnimation$enableAnimation$isDiscrete$isOnTop$isPressed$sliderTheme$textDirection$thumb(context, center, activationAnimation, enableAnimation, isDiscrete, isOnTop, isPressed, sliderTheme, textDirection, thumb) {
      var canvas, radius, strokePaint, t2, evaluatedElevation, shadowPath, t3, t4, trackerRect, t5, t6, t7, value, formatterValue, painter, _null = null,
        t1 = type$.Animation_double;
      t1._as(activationAnimation);
      t1._as(enableAnimation);
      canvas = context.get$canvas(0);
      t1 = type$.Tween_double;
      radius = new F.Tween(10, 10, t1).transform$1(0, enableAnimation.get$value(0));
      if (isOnTop) {
        strokePaint = $.$get$_renderer().createPaint$0();
        t2 = sliderTheme.overlappingShapeStrokeColor;
        t2.toString;
        strokePaint.set$color(0, t2);
        strokePaint.set$strokeWidth(1);
        strokePaint.set$style(0, C.PaintingStyle_1);
        canvas.drawCircle$3(center, radius, strokePaint);
      }
      t2 = new M.ColorTween(sliderTheme.disabledThumbColor, sliderTheme.thumbColor).transform$1(0, enableAnimation.get$value(0));
      t2.toString;
      evaluatedElevation = isPressed ? new F.Tween(3, 3, t1).transform$1(0, activationAnimation.get$value(0)) : 3;
      t1 = $.$get$_renderer();
      shadowPath = t1.createPath$0();
      t3 = 2 * radius;
      shadowPath.addArc$3(B.Rect$fromCenter(center, t3, t3), 0, 6.283185307179586);
      canvas.drawShadow$4(shadowPath, D.Color_SHX, evaluatedElevation, true);
      t3 = this.themeData;
      if (t3.showThumbValue && t3.sliderMeasureData.trackerRect != null) {
        t4 = t3.sliderMeasureData;
        trackerRect = t4.trackerRect;
        t5 = center._dx;
        t6 = trackerRect.left;
        t7 = t3.min;
        value = (t3.max - t7) * ((t5 - t6) / (trackerRect.right - t6)) + t7;
        t6 = t3.scaleFormatter;
        formatterValue = t6 == null ? C.JSNumber_methods.toStringAsFixed$1(value, 2) : t6.call$1(value);
        painter = F.TextPainter$(_null, _null, _null, _null, F.TextSpan$(_null, enableAnimation.get$value(0) > 0 ? t3.thumbTextStyle : t3.disabledThumbTextStyle, formatterValue), C.TextAlign_2, C.TextDirection_1, _null, C._LinearTextScaler_1, H.TextWidthBasis_0);
        painter.layout$1$maxWidth(100);
        t3 = painter._layoutCache;
        t6 = t3.contentWidth;
        t7 = center._dy;
        t3 = t3.layout._paragraph;
        t3 = t3.get$height(t3);
        painter.paint$2(context.get$canvas(0), new B.Offset(t5 - t6 / 2, t7 - t3 - 14));
        t3 = painter._layoutCache;
        if (thumb === D.Thumb_0) {
          t5 -= t3.contentWidth / 2;
          t3 = t3.layout._paragraph;
          t3 = t7 - t3.get$height(t3) - 14;
          t7 = painter._layoutCache;
          t6 = t7.contentWidth;
          t7 = t7.layout._paragraph;
          t4.startRangeThumbTextRect = new B.Rect(t5, t3, t5 + t6, t3 + t7.get$height(t7));
        } else {
          t5 -= t3.contentWidth / 2;
          t3 = t3.layout._paragraph;
          t3 = t7 - t3.get$height(t3) - 14;
          t7 = painter._layoutCache;
          t6 = t7.contentWidth;
          t7 = t7.layout._paragraph;
          t4.endRangeThumbTextRect = new B.Rect(t5, t3, t5 + t6, t3 + t7.get$height(t7));
        }
      }
      t1 = t1.createPaint$0();
      t1.set$color(0, t2);
      canvas.drawCircle$3(center, radius, t1);
    }
  };
  A.TDRoundRangeSliderTickMarkShape.prototype = {
    getPreferredSize$2$isEnabled$sliderTheme(isEnabled, sliderTheme) {
      return new B.Size(8, 8);
    },
    paint$9$enableAnimation$endThumbCenter$isEnabled$parentBox$sliderTheme$startThumbCenter$textDirection(context, center, enableAnimation, endThumbCenter, isEnabled, parentBox, sliderTheme, startThumbCenter, textDirection) {
      var t1, isBetweenThumbs, begin, end, paint, t2, rect, trackHeight, t3, t4, t5, index, value, valueFormatter, painter, x, _null = null;
      type$.Animation_double._as(enableAnimation);
      switch (textDirection.index) {
        case 1:
          t1 = center._dx;
          isBetweenThumbs = startThumbCenter._dx < t1 && t1 < endThumbCenter._dx;
          break;
        case 0:
          t1 = center._dx;
          isBetweenThumbs = endThumbCenter._dx < t1 && t1 < startThumbCenter._dx;
          break;
        default:
          isBetweenThumbs = _null;
      }
      B.boolConversionCheck(isBetweenThumbs);
      begin = isBetweenThumbs ? sliderTheme.disabledActiveTickMarkColor : sliderTheme.disabledInactiveTickMarkColor;
      end = isBetweenThumbs ? sliderTheme.activeTickMarkColor : sliderTheme.inactiveTickMarkColor;
      paint = $.$get$_renderer().createPaint$0();
      t1 = new M.ColorTween(begin, end).transform$1(0, enableAnimation.get$value(0));
      t1.toString;
      paint.set$color(0, t1);
      t1 = this.themeData;
      if (t1.showScaleValue) {
        t2 = sliderTheme.rangeTrackShape;
        rect = t2 == null ? _null : t2.getPreferredRect$2$parentBox$sliderTheme(parentBox, sliderTheme);
        if (rect != null) {
          t2 = t1.divisions;
          t2.toString;
          t2 = t2 > 0;
        } else
          t2 = false;
        if (t2) {
          trackHeight = rect.bottom - rect.top;
          t2 = rect.right;
          t3 = rect.left;
          t4 = t1.divisions;
          t4.toString;
          t5 = center._dx;
          index = C.JSNumber_methods.round$0((t5 - (t3 + trackHeight / 2)) / ((t2 - t3 - trackHeight) / t4));
          t3 = t1.min;
          value = t3 + index * ((t1.max - t3) / t4);
          t2 = t1.scaleFormatter;
          valueFormatter = t2 != null ? t2.call$1(value) : C.JSNumber_methods.toString$0(value);
          painter = F.TextPainter$(_null, _null, _null, _null, F.TextSpan$(_null, enableAnimation.get$value(0) > 0 ? t1.scaleTextStyle : t1.disabledScaleTextStyle, valueFormatter), C.TextAlign_2, C.TextDirection_1, _null, C._LinearTextScaler_1, H.TextWidthBasis_0);
          painter.layout$1$maxWidth(100);
          t1 = painter._layoutCache;
          t2 = t1.contentWidth;
          t1 = t1.layout._paragraph;
          t1.get$height(t1);
          x = t5 - t2 / 2;
          if (index === 0)
            x = t5 - trackHeight;
          else if (index === t4) {
            t1 = painter._layoutCache;
            t2 = t1.contentWidth;
            t1 = t1.layout._paragraph;
            t1.get$height(t1);
            x = t5 - t2 + trackHeight;
          }
          t1 = context.get$canvas(0);
          t2 = painter._layoutCache.layout._paragraph;
          painter.paint$2(t1, new B.Offset(x, center._dy - t2.get$height(t2) - 14));
        }
        context.get$canvas(0).drawCircle$3(center, 4, paint);
      }
    }
  };
  A._TDRoundedRectRangeSliderTrackShape_RangeSliderTrackShape_TDBaseRangeSliderTrackShape.prototype = {};
  A._TDRoundedRectSliderTrackShape_SliderTrackShape_BaseSliderTrackShape.prototype = {};
  var typesOffset = hunkHelpers.updateTypes(["~()", "double(double)", "~(RangeValues)", "~(bool)", "~(TapDownDetails)", "~(TapUpDetails)", "~(double)", "CompositedTransformFollower(BuildContext)", "~(DragUpdateDetails)", "~(DragStartDetails)", "~(DragEndDetails)", "~(AnimationStatus)", "Container(BuildContext,int)", "SizedBox(BuildContext,int)", "~(Map<String,@>,bool)", "bool(Question)", "TDFormItem(Question)", "TDCheckboxGroupContainer(BuildContext,BoxConstraints)", "TDCheckbox(@)", "TDRadioGroup(BuildContext,BoxConstraints)", "TDRadio(@)", "Thumb?(TextDirection,RangeValues,double,Size,Size,double)", "~(_AdjustSliderIntent)", "Color(Set<WidgetState>)", "Expanded(TDCheckbox)", "List<Widget>(TDFormItem)", "@()", "Widget?(BuildContext{currentLength!int,isFocused!bool,maxLength!int?})", "Expanded(TDRadio)"]);
  A._QuestionnairePageState_initState_closure.prototype = {
    call$1(e) {
      return J.toString$0$(e);
    },
    $signature: 54
  };
  A._QuestionnairePageState__onReset_closure.prototype = {
    call$0() {
    },
    $signature: 0
  };
  A._QuestionnairePageState__onChanged_closure.prototype = {
    call$1(q) {
      return type$.Question._as(q).id === this.qid;
    },
    $signature: typesOffset + 15
  };
  A._QuestionnairePageState_build_closure.prototype = {
    call$1(q) {
      var _0_0, t1, t2, t3, _this = this;
      type$.Question._as(q);
      _0_0 = q.type;
      if ("multi" === _0_0)
        return A.TDFormItem$(_this.$this._checkbox$3(_this.context, q.options, q.id), "", q.text, D.TDFormItemType_1);
      if ("single" === _0_0)
        return A.TDFormItem$(_this.$this._radio$3(_this.context, q.options, q.id), "", q.text, D.TDFormItemType_1);
      if ("number" === _0_0) {
        t1 = q.options;
        t2 = B._arrayInstanceType(t1);
        t3 = t2._eval$1("MappedListIterable<1,double>");
        return A.TDFormItem$(_this.$this._slider$3(_this.context, B.List_List$of(new B.MappedListIterable(t1, t2._eval$1("double(1)")._as(new A._QuestionnairePageState_build__closure()), t3), true, t3._eval$1("ListIterable.E")), q.id), "", q.text, D.TDFormItemType_4);
      }
      if ("text" === _0_0) {
        t1 = q.options;
        t1 = t1.length === 0 ? "\u8bf7\u8f93\u5165" : C.JSArray_methods.get$first(t1);
        return A.TDFormItem$(_this.$this._questionnaire_page$_input$3(_this.context, t1, q.id), "", q.text, D.TDFormItemType_0);
      }
      t1 = q.text;
      return A.TDFormItem$(null, "\u8bf7\u8f93\u5165" + t1, t1, D.TDFormItemType_0);
    },
    $signature: typesOffset + 16
  };
  A._QuestionnairePageState_build__closure.prototype = {
    call$1(e) {
      return B.double_parse(B._asString(e));
    },
    $signature: 353
  };
  A._QuestionnairePageState__checkbox_closure.prototype = {
    call$2(context, constraints) {
      var t1, t2, t3, t4, t5, t6;
      type$.BoxConstraints._as(constraints);
      t1 = this.$this;
      t2 = this.qid;
      t3 = type$.nullable_List_String._as(t1._questionnaire_page$_controller.$index(0, t2));
      t4 = this.options;
      t5 = B._arrayInstanceType(t4);
      t6 = t5._eval$1("MappedListIterable<1,TDCheckbox>");
      return A.TDCheckboxGroupContainer$(C.Axis_1, B.List_List$of(new B.MappedListIterable(t4, t5._eval$1("TDCheckbox(1)")._as(new A._QuestionnairePageState__checkbox__closure()), t6), true, t6._eval$1("ListIterable.E")), new A._QuestionnairePageState__checkbox__closure0(t1, t2), t3);
    },
    $signature: typesOffset + 17
  };
  A._QuestionnairePageState__checkbox__closure.prototype = {
    call$1(opt) {
      var t1, t2, t3, _null = null;
      if (type$.Map_dynamic_dynamic._is(opt)) {
        t1 = J.getInterceptor$asx(opt);
        t2 = t1.$index(opt, "id");
        t2.toString;
        B._asStringQ(t2);
        t3 = t1.$index(opt, "title");
        t3.toString;
        B._asStringQ(t3);
        t1 = t1.$index(opt, "subTitle");
        t1.toString;
        t3 = A.TDCheckbox$(_null, false, _null, D.TDContentDirection_1, _null, _null, _null, _null, true, t2, 16, _null, _null, false, D.TDCheckBoxSize_1, _null, D.TDCheckboxStyle_1, B._asStringQ(t1), _null, _null, 1, t3, _null, _null, _null);
        t1 = t3;
      } else {
        t1 = J.getInterceptor$(opt);
        t1 = A.TDCheckbox$(_null, false, _null, D.TDContentDirection_1, _null, _null, _null, _null, true, t1.toString$0(opt), 16, _null, _null, false, D.TDCheckBoxSize_1, _null, D.TDCheckboxStyle_1, _null, _null, _null, 1, t1.toString$0(opt), _null, _null, _null);
      }
      return t1;
    },
    $signature: typesOffset + 18
  };
  A._QuestionnairePageState__checkbox__closure0.prototype = {
    call$1(v) {
      return this.$this._onChanged$2(this.qid, type$.List_String._as(v));
    },
    $signature: 67
  };
  A._QuestionnairePageState__radio_closure.prototype = {
    call$2(context, constraints) {
      var t1, t2, t3, t4, t5, t6;
      type$.BoxConstraints._as(constraints);
      t1 = this.$this;
      t2 = this.qid;
      t3 = B._asStringQ(t1._questionnaire_page$_controller.$index(0, t2));
      t4 = this.options;
      t5 = B._arrayInstanceType(t4);
      t6 = t5._eval$1("MappedListIterable<1,TDRadio>");
      return A.TDRadioGroup$(C.Axis_1, B.List_List$of(new B.MappedListIterable(t4, t5._eval$1("TDRadio(1)")._as(new A._QuestionnairePageState__radio__closure()), t6), true, t6._eval$1("ListIterable.E")), new A._QuestionnairePageState__radio__closure0(t1, t2), t3);
    },
    $signature: typesOffset + 19
  };
  A._QuestionnairePageState__radio__closure.prototype = {
    call$1(opt) {
      var t1, t2, t3;
      if (type$.Map_dynamic_dynamic._is(opt)) {
        t1 = J.getInterceptor$asx(opt);
        t2 = t1.$index(opt, "id");
        t2.toString;
        B._asStringQ(t2);
        t3 = t1.$index(opt, "title");
        t3.toString;
        B._asStringQ(t3);
        t1 = t1.$index(opt, "subTitle");
        t1.toString;
        t3 = A.TDRadio$(t2, false, B._asStringQ(t1), t3);
        t1 = t3;
      } else {
        t1 = J.getInterceptor$(opt);
        t1 = A.TDRadio$(t1.toString$0(opt), false, null, t1.toString$0(opt));
      }
      return t1;
    },
    $signature: typesOffset + 20
  };
  A._QuestionnairePageState__radio__closure0.prototype = {
    call$1(v) {
      return this.$this._onChanged$2(this.qid, v);
    },
    $signature: 83
  };
  A._QuestionnairePageState__slider_closure.prototype = {
    call$1(v) {
      return this.$this._onChanged$2(this.qid, v);
    },
    $signature: 30
  };
  A._QuestionnairePageState__input_closure.prototype = {
    call$1(v) {
      return this.$this._onChanged$2(this.qid, v);
    },
    $signature: 23
  };
  A._SliderState_toggleRange_closure.prototype = {
    call$0() {
      var t1 = this.$this,
        t2 = t1._widget.controller,
        t3 = this.min;
      t2.set$value(0, t2._change_notifier$_value instanceof A.RangeValues ? t3 : new A.RangeValues(t3, this.max));
      t1 = t1._widget;
      t1.onChanged$1(t1.controller._change_notifier$_value);
    },
    $signature: 0
  };
  A._SliderState_build_closure.prototype = {
    call$1(v) {
      return C.JSNumber_methods.toStringAsFixed$1(v, 1);
    },
    $signature: 71
  };
  A._SliderState_build_closure0.prototype = {
    call$1(v) {
      return C.JSNumber_methods.toStringAsFixed$1(v, 0);
    },
    $signature: 71
  };
  A._SliderState_build_closure1.prototype = {
    call$3(__wc0_formal, value, __wc1_formal) {
      var t6, t7, _this = this, _null = null,
        t1 = _this.$this,
        t2 = _this.min,
        t3 = _this.max,
        t4 = A9.StyledList_toRow(B._setArrayType([Ao.IconButton$(_null, _null, F.Icon$(t1._widget.controller._change_notifier$_value instanceof A.RangeValues ? D.IconData_58917_MaterialIcons_null_false : D.IconData_58919_MaterialIcons_null_false, _null, _null, _null), _null, _null, new A._SliderState_build__closure(t1, t2, t3), _null, _null, _null)], type$.JSArray_IconButton), E.CrossAxisAlignment_2, E.MainAxisAlignment_1, E.MainAxisSize_1, _null),
        t5 = _this.sTD;
      if (t1._widget.controller._change_notifier$_value instanceof A.RangeValues) {
        t6 = C.JSNumber_methods.toString$0(t2);
        t7 = C.JSNumber_methods.toString$0(t3);
        t2 = value == null ? new A.RangeValues(t2, t3) : value;
        t5 = new A.TDRangeSlider(type$.RangeValues._as(t2), t6, t7, new A._SliderState_build__closure0(t1), t5, _null);
        t1 = t5;
      } else
        t1 = new A.TDSlider(B._asDouble(value == null ? t2 : value), C.JSNumber_methods.toString$0(t2), C.JSNumber_methods.toString$0(t3), new A._SliderState_build__closure1(t1), t5, _null);
      return Ap.StyledList_toColumn(B._setArrayType([t4, t1], type$.JSArray_Widget), E.CrossAxisAlignment_2, E.MainAxisAlignment_0, E.MainAxisSize_1);
    },
    $signature: 355
  };
  A._SliderState_build__closure.prototype = {
    call$0() {
      return this.$this.toggleRange$2(this.min, this.max);
    },
    $signature: 0
  };
  A._SliderState_build__closure0.prototype = {
    call$1(v) {
      return this.$this._widget.onChanged$1(v);
    },
    $signature: typesOffset + 2
  };
  A._SliderState_build__closure1.prototype = {
    call$1(v) {
      return this.$this._widget.onChanged$1(v);
    },
    $signature: 45
  };
  A._RangeSliderState__handleHoverChanged_closure.prototype = {
    call$0() {
      this.$this._range_slider$_hovering = this.hovering;
    },
    $signature: 0
  };
  A._RangeSliderState_build_effectiveOverlayColor.prototype = {
    call$0() {
      var t1, _this = this;
      _this.$this._widget.toString;
      t1 = U.WidgetStateProperty_resolveAs(_this._box_0.sliderTheme.overlayColor, _this.states, type$.nullable_Color);
      return t1 == null ? _this.theme.colorScheme.primary.withOpacity$1(0.12) : t1;
    },
    $signature: 70
  };
  A._RangeSliderState_build_screenSize.prototype = {
    call$0() {
      return B.InheritedModel_inheritFrom(this.context, C._MediaQueryAspect_0, type$.MediaQuery).data.size;
    },
    $signature: 79
  };
  A._RangeSliderState_showValueIndicator_closure.prototype = {
    call$1(context) {
      var t1;
      type$.BuildContext._as(context);
      t1 = this.$this;
      return R.CompositedTransformFollower$(new A._ValueIndicatorRenderObjectWidget0(t1, null), t1._range_slider$_layerLink, C.Offset_0_0, true);
    },
    $signature: typesOffset + 7
  };
  A._RenderRangeSlider_closure.prototype = {
    call$1($status) {
      var t1, t2;
      if (type$.AnimationStatus._as($status) === H.AnimationStatus_0) {
        t1 = this.$this._range_slider$_state;
        t2 = t1.overlayEntry;
        if (t2 != null)
          t2.remove$0(0);
        t2 = t1.overlayEntry;
        if (t2 != null)
          t2.dispose$0();
        t1.overlayEntry = null;
      }
    },
    $signature: typesOffset + 11
  };
  A._RenderRangeSlider__maxSliderPartWidth_closure.prototype = {
    call$1(size) {
      return type$.Size._as(size)._dx;
    },
    $signature: 46
  };
  A._RenderRangeSlider__maxSliderPartHeight_closure.prototype = {
    call$1(size) {
      return type$.Size._as(size)._dy;
    },
    $signature: 46
  };
  A._RenderRangeSlider__startInteraction_closure.prototype = {
    call$0() {
      var _s24_ = "valueIndicatorController",
        t1 = this.$this,
        t2 = t1._range_slider$_state;
      t2.interactionTimer = null;
      if (!t1._range_slider$_active) {
        t1 = t2.___RangeSliderState_valueIndicatorController_A;
        t1 === $ && B.throwLateFieldNI(_s24_);
        t1 = t1.get$status(0) === H.AnimationStatus_3;
      } else
        t1 = false;
      if (t1) {
        t1 = t2.___RangeSliderState_valueIndicatorController_A;
        t1 === $ && B.throwLateFieldNI(_s24_);
        t1.reverse$0(0);
      }
    },
    $signature: 0
  };
  A._SliderState__handleFocusHighlightChanged_closure.prototype = {
    call$0() {
      this.$this._slider$_focused = this.focused;
    },
    $signature: 0
  };
  A._SliderState__handleHoverChanged_closure.prototype = {
    call$0() {
      this.$this._slider$_hovering = this.hovering;
    },
    $signature: 0
  };
  A._SliderState__buildMaterialSlider_effectiveOverlayColor.prototype = {
    call$0() {
      var t1, t2, t3, _this = this;
      _this.$this._widget.toString;
      t1 = _this.states;
      t2 = type$.nullable_Color;
      t3 = U.WidgetStateProperty_resolveAs(_this._box_0.sliderTheme.overlayColor, t1, t2);
      return t3 == null ? U.WidgetStateProperty_resolveAs(_this.defaults.get$overlayColor(), t1, t2) : t3;
    },
    $signature: 70
  };
  A._SliderState__buildMaterialSlider_screenSize.prototype = {
    call$0() {
      return B.InheritedModel_inheritFrom(this.context, C._MediaQueryAspect_0, type$.MediaQuery).data.size;
    },
    $signature: 79
  };
  A._SliderState__buildMaterialSlider_closure.prototype = {
    call$0() {
      var t2,
        t1 = this.$this;
      if (!t1.get$focusNode(0).get$hasFocus()) {
        t2 = t1.get$focusNode(0);
        t2 = t2._canRequestFocus && C.JSArray_methods.every$1(t2.get$ancestors(), B.focus_manager_FocusNode__allowDescendantsToBeFocused$closure());
      } else
        t2 = false;
      if (t2)
        t1.get$focusNode(0).requestFocus$0();
    },
    $signature: 0
  };
  A._SliderState_showValueIndicator_closure.prototype = {
    call$1(context) {
      var t1;
      type$.BuildContext._as(context);
      t1 = this.$this;
      return R.CompositedTransformFollower$(new A._ValueIndicatorRenderObjectWidget(t1, null), t1._layerLink, C.Offset_0_0, true);
    },
    $signature: typesOffset + 7
  };
  A._RenderSlider_closure.prototype = {
    call$1($status) {
      var t1, t2;
      if (type$.AnimationStatus._as($status) === H.AnimationStatus_0) {
        t1 = this.$this._slider$_state;
        t2 = t1.overlayEntry;
        if (t2 != null)
          t2.remove$0(0);
        t2 = t1.overlayEntry;
        if (t2 != null)
          t2.dispose$0();
        t1.overlayEntry = null;
      }
    },
    $signature: typesOffset + 11
  };
  A._RenderSlider__maxSliderPartWidth_closure.prototype = {
    call$1(size) {
      return type$.Size._as(size)._dx;
    },
    $signature: 46
  };
  A._RenderSlider__maxSliderPartHeight_closure.prototype = {
    call$1(size) {
      return type$.Size._as(size)._dy;
    },
    $signature: 46
  };
  A._RenderSlider__startInteraction_closure.prototype = {
    call$0() {
      var _s24_ = "valueIndicatorController",
        t1 = this.$this,
        t2 = t1._slider$_state;
      t2.interactionTimer = null;
      if (!t1._slider$_active) {
        t1 = t2.___SliderState_valueIndicatorController_A;
        t1 === $ && B.throwLateFieldNI(_s24_);
        t1 = t1.get$status(0) === H.AnimationStatus_3;
      } else
        t1 = false;
      if (t1) {
        t1 = t2.___SliderState_valueIndicatorController_A;
        t1 === $ && B.throwLateFieldNI(_s24_);
        t1.reverse$0(0);
      }
    },
    $signature: 0
  };
  A._SliderDefaultsM3Year2023_overlayColor_closure.prototype = {
    call$1(states) {
      type$.Set_WidgetState._as(states);
      if (states.contains$1(0, A7.WidgetState_3))
        return this.$this.get$_slider$_colors().primary.withOpacity$1(0.1);
      if (states.contains$1(0, S.WidgetState_0))
        return this.$this.get$_slider$_colors().primary.withOpacity$1(0.08);
      if (states.contains$1(0, S.WidgetState_1))
        return this.$this.get$_slider$_colors().primary.withOpacity$1(0.1);
      return C.Color_Edl;
    },
    $signature: typesOffset + 23
  };
  A.TDCheckboxState_build_closure1.prototype = {
    call$1(detail) {
      this.$this._pressState$1(true);
    },
    $signature: typesOffset + 4
  };
  A.TDCheckboxState_build_closure2.prototype = {
    call$1(detail) {
      this.$this._pressState$1(false);
    },
    $signature: typesOffset + 5
  };
  A.TDCheckboxState_build_closure0.prototype = {
    call$0() {
      this.$this._pressState$1(false);
    },
    $signature: 0
  };
  A.TDCheckboxState_build_closure.prototype = {
    call$0() {
      var t1 = this.$this;
      t1.onValueChange$3(this.id, !t1.checked, this.groupState);
    },
    $signature: 0
  };
  A.TDCheckboxState__pressState_closure.prototype = {
    call$0() {
    },
    $signature: 0
  };
  A.TDCheckboxState_onValueChange_closure.prototype = {
    call$0() {
      var t3, _this = this,
        t1 = _this.$this,
        t2 = _this.value;
      t1.checked = t2;
      t3 = _this.groupState;
      if (t3 != null && _this.id != null)
        t3.toggle$2(0, _this.id, t2);
      t1._widget.toString;
    },
    $signature: 0
  };
  A.TDCheckboxGroupState__syncCheckState_closure.prototype = {
    call$1(element) {
      this.$this.checkBoxStates.$indexSet(0, B._asString(element), true);
    },
    $signature: 23
  };
  A.TDCheckboxGroupState_toggle_closure.prototype = {
    call$2(k, v) {
      B._asString(k);
      return B._asBool(v);
    },
    $signature: 153
  };
  A.TDCheckboxGroupState_toggle_closure0.prototype = {
    call$0() {
    },
    $signature: 0
  };
  A.TDCheckboxGroupState__notifyChange_closure.prototype = {
    call$2(k, v) {
      B._asString(k);
      return B._asBool(v);
    },
    $signature: 153
  };
  A.TDCheckboxGroupContainer_closure.prototype = {
    call$2(context, index) {
      var _null = null,
        t1 = this.directionalTdCheckboxes;
      if (!(index >= 0 && index < t1.length))
        return B.ioore(t1, index);
      return F.Container$(_null, t1[index], C.Clip_0, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null);
    },
    $signature: typesOffset + 12
  };
  A.TDCheckboxGroupContainer_closure0.prototype = {
    call$2(context, index) {
      return N.SizedBox_0_0_null_null;
    },
    $signature: typesOffset + 13
  };
  A.TDCheckboxGroupContainer_closure1.prototype = {
    call$1(e) {
      return Q.Expanded$(type$.TDCheckbox._as(e), 1, null);
    },
    $signature: typesOffset + 24
  };
  A.TDCheckboxGroupContainer_closure2.prototype = {
    call$1(ids) {
      type$.List_String._as(ids);
      this._box_0.selectIds = ids;
      this.onCheckBoxGroupChange.call$1(ids);
    },
    $signature: 67
  };
  A._TDFormState_initState_closure.prototype = {
    call$0() {
      var t1 = this.$this,
        t2 = t1._widget.formController.eventType;
      if (t2 === "submit")
        t1.onSubmit$0(0);
      else if (t2 === "reset")
        t1.onReset$0(0);
    },
    $signature: 0
  };
  A._TDFormState_onReset_closure.prototype = {
    call$0() {
      var t1 = this.$this;
      t1.set$_formData(t1._widget.formController.formData);
      t1._isReset = true;
    },
    $signature: 0
  };
  A._TDFormState_onSubmit_closure.prototype = {
    call$2(key, value) {
      var t1;
      B._asString(key);
      t1 = this._box_0;
      if (t1.isValidateSuc)
        t1.isValidateSuc = this.$this.validate$2(key, B.S(value));
    },
    $signature: 7
  };
  A._TDFormState_onSubmit_closure0.prototype = {
    call$0() {
      this.$this._isValidate = true;
    },
    $signature: 0
  };
  A._TDFormState_build_closure.prototype = {
    call$1(item) {
      return B._setArrayType([type$.TDFormItem._as(item), new F.SizedBox(null, 1, null, null)], type$.JSArray_Widget);
    },
    $signature: typesOffset + 25
  };
  A._TDFormState_build_closure0.prototype = {
    call$1(value) {
      this.$this.set$_formData(type$.Map_String_dynamic._as(value));
    },
    $signature: 4
  };
  A._TDFormState_build_closure1.prototype = {
    call$2(context, index) {
      var t1;
      type$.BuildContext._as(context);
      B._asInt(index);
      t1 = this.$this._formItems;
      if (!(index >= 0 && index < t1.length))
        return B.ioore(t1, index);
      return t1[index];
    },
    $signature: 86
  };
  A._TDFormItemState_startValidation_closure.prototype = {
    call$0() {
      var t1 = this.$this;
      t1.errorMessage = t1.validate$0();
    },
    $signature: 0
  };
  A._TDFormItemState__buildSelectRow_closure.prototype = {
    call$0() {
      this.$this._widget.toString;
    },
    $signature: 0
  };
  A.TDInput_buildNormalInput_closure.prototype = {
    call$0() {
      var t1 = this.$this.controller;
      if (t1 != null)
        t1.set$text(0, "");
    },
    $signature: 0
  };
  A.TDRadioGroup_closure.prototype = {
    call$2(context, index) {
      var _null = null,
        t1 = this.directionalTdRadios;
      if (!(index >= 0 && index < t1.length))
        return B.ioore(t1, index);
      return F.Container$(_null, t1[index], C.Clip_0, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null);
    },
    $signature: typesOffset + 12
  };
  A.TDRadioGroup_closure0.prototype = {
    call$2(context, index) {
      return N.SizedBox_0_0_null_null;
    },
    $signature: typesOffset + 13
  };
  A.TDRadioGroup_closure1.prototype = {
    call$1(e) {
      return Q.Expanded$(type$.TDRadio._as(e), 1, null);
    },
    $signature: typesOffset + 28
  };
  A.TDRadioGroup_closure2.prototype = {
    call$1(ids) {
      var t1;
      type$.List_String._as(ids);
      t1 = ids.length;
      if (t1 !== 0) {
        if (0 >= t1)
          return B.ioore(ids, 0);
        t1 = ids[0];
      } else
        t1 = null;
      this.onRadioGroupChange.call$1(t1);
    },
    $signature: 67
  };
  A.TDRadioGroupState_toggle_closure.prototype = {
    call$2(key, value) {
      B._asString(key);
      B._asBool(value);
      this.$this.checkBoxStates.$indexSet(0, key, false);
    },
    $signature: 357
  };
  A.TDSliderState_build_closure1.prototype = {
    call$1($event) {
      var t1, t2;
      type$.PointerDownEvent._as($event);
      t1 = this.$this;
      t2 = $.WidgetsBinding__instance.WidgetsBinding__buildOwner._globalKeyRegistry.$index(0, t1._sliderKey);
      t2 = t2 == null ? null : t2.get$renderObject();
      if (type$.nullable_RenderBox._as(t2) != null)
        t1._widget.toString;
      return;
    },
    $signature: 49
  };
  A.TDSliderState_build_closure0.prototype = {
    call$1($event) {
      type$.PointerDownEvent._as($event);
      this.$this._widget.toString;
      return;
    },
    $signature: 49
  };
  A.TDSliderState_build_closure.prototype = {
    call$1(slideValue) {
      var t1 = this.$this;
      t1.setState$1(new A.TDSliderState_build__closure(t1, B._asDouble(slideValue)));
    },
    $signature: 45
  };
  A.TDSliderState_build__closure.prototype = {
    call$0() {
      var t1 = this.$this,
        t2 = this.slideValue;
      t1.value = t2;
      t1._widget.onChanged.call$1(t2);
    },
    $signature: 0
  };
  A._TDRangeSliderState_build_closure1.prototype = {
    call$1($event) {
      var t1, t2, t3;
      type$.PointerDownEvent._as($event);
      t1 = this.$this;
      t2 = $.WidgetsBinding__instance.WidgetsBinding__buildOwner._globalKeyRegistry.$index(0, t1._sliderRangeKey);
      t2 = t2 == null ? null : t2.get$renderObject();
      type$.nullable_RenderBox._as(t2);
      t3 = t2 == null;
      if (!t3)
        t2.globalToLocal$1($event.get$position($event));
      if (!t3)
        t1._widget.toString;
      return;
    },
    $signature: 49
  };
  A._TDRangeSliderState_build_closure0.prototype = {
    call$1($event) {
      type$.PointerDownEvent._as($event);
      this.$this._widget.toString;
      return;
    },
    $signature: 49
  };
  A._TDRangeSliderState_build_closure.prototype = {
    call$1(slideValue) {
      var t1 = this.$this;
      t1.setState$1(new A._TDRangeSliderState_build__closure(t1, type$.RangeValues._as(slideValue)));
    },
    $signature: typesOffset + 2
  };
  A._TDRangeSliderState_build__closure.prototype = {
    call$0() {
      var t1 = this.$this,
        t2 = this.slideValue;
      t1.rangeValues = t2;
      t1._widget.onChanged.call$1(t2);
    },
    $signature: 0
  };
  A.MapExt_count_closure.prototype = {
    call$2(key, value) {
      var _this = this;
      if (B.boolConversionCheck(_this.test.call$2(_this.K._as(key), _this.V._as(value))))
        ++_this._box_0.count;
    },
    $signature() {
      return this.K._eval$1("@<0>")._bind$1(this.V)._eval$1("~(1,2)");
    }
  };
  A.MapExt_where_closure.prototype = {
    call$2(key, value) {
      var _this = this;
      _this.K._as(key);
      _this.V._as(value);
      if (B.boolConversionCheck(_this.test.call$2(key, value)))
        _this.r.$indexSet(0, key, value);
    },
    $signature() {
      return this.K._eval$1("@<0>")._bind$1(this.V)._eval$1("~(1,2)");
    }
  };
  (function aliases() {
    var _ = A.__RangeSliderState_State_TickerProviderStateMixin.prototype;
    _.super$__RangeSliderState_State_TickerProviderStateMixin$dispose = _.dispose$0;
    _ = A.__RenderRangeSlider_RenderBox_RelayoutWhenSystemFontsChangeMixin.prototype;
    _.super$__RenderRangeSlider_RenderBox_RelayoutWhenSystemFontsChangeMixin$attach = _.attach$1;
    _.super$__RenderRangeSlider_RenderBox_RelayoutWhenSystemFontsChangeMixin$detach = _.detach$0;
    _ = A.__RenderValueIndicator_RenderBox_RelayoutWhenSystemFontsChangeMixin.prototype;
    _.super$__RenderValueIndicator_RenderBox_RelayoutWhenSystemFontsChangeMixin$attach0 = _.attach$1;
    _.super$__RenderValueIndicator_RenderBox_RelayoutWhenSystemFontsChangeMixin$detach0 = _.detach$0;
    _ = A.__RenderSlider_RenderBox_RelayoutWhenSystemFontsChangeMixin.prototype;
    _.super$__RenderSlider_RenderBox_RelayoutWhenSystemFontsChangeMixin$attach = _.attach$1;
    _.super$__RenderSlider_RenderBox_RelayoutWhenSystemFontsChangeMixin$detach = _.detach$0;
    _ = A.__RenderValueIndicator_RenderBox_RelayoutWhenSystemFontsChangeMixin0.prototype;
    _.super$__RenderValueIndicator_RenderBox_RelayoutWhenSystemFontsChangeMixin$attach = _.attach$1;
    _.super$__RenderValueIndicator_RenderBox_RelayoutWhenSystemFontsChangeMixin$detach = _.detach$0;
    _ = A.__SliderState_State_TickerProviderStateMixin.prototype;
    _.super$__SliderState_State_TickerProviderStateMixin$dispose = _.dispose$0;
    _ = A.TDCheckboxState.prototype;
    _.super$TDCheckboxState$build = _.build$1;
    _ = A.TDCheckboxGroupState.prototype;
    _.super$TDCheckboxGroupState$toggle = _.toggle$3;
  })();
  (function installTearOffs() {
    var _instance_2_u = hunkHelpers._instance_2u,
      _instance_0_u = hunkHelpers._instance_0u,
      _instance_1_u = hunkHelpers._instance_1u,
      _instance = hunkHelpers.installInstanceTearOff,
      _instance_0_i = hunkHelpers._instance_0i;
    var _;
    _instance_2_u(_ = A._QuestionnairePageState.prototype, "get$_onSubmit", "_onSubmit$2", 14);
    _instance_0_u(_, "get$_onReset", "_onReset$0", 0);
    _instance_1_u(_ = A._RangeSliderState.prototype, "get$_range_slider$_handleHoverChanged", "_range_slider$_handleHoverChanged$1", 3);
    _instance_1_u(_, "get$_range_slider$_handleChanged", "_range_slider$_handleChanged$1", 2);
    _instance(_, "get$_defaultRangeThumbSelector", 0, 6, null, ["call$6"], ["_defaultRangeThumbSelector$6"], 21, 0, 0);
    _instance_1_u(_ = A._RenderRangeSlider.prototype, "get$_range_slider$_handleDragUpdate", "_range_slider$_handleDragUpdate$1", 8);
    _instance_1_u(_, "get$_range_slider$_handleDragStart", "_range_slider$_handleDragStart$1", 9);
    _instance_1_u(_, "get$_range_slider$_handleDragEnd", "_range_slider$_handleDragEnd$1", 10);
    _instance_0_u(_, "get$_range_slider$_handleDragCancel", "_range_slider$_handleDragCancel$0", 0);
    _instance_1_u(_, "get$_range_slider$_handleTapDown", "_range_slider$_handleTapDown$1", 4);
    _instance_1_u(_, "get$_range_slider$_handleTapUp", "_range_slider$_handleTapUp$1", 5);
    _instance_1_u(_, "get$computeMinIntrinsicWidth", "computeMinIntrinsicWidth$1", 1);
    _instance_1_u(_, "get$computeMaxIntrinsicWidth", "computeMaxIntrinsicWidth$1", 1);
    _instance_1_u(_, "get$computeMinIntrinsicHeight", "computeMinIntrinsicHeight$1", 1);
    _instance_1_u(_, "get$computeMaxIntrinsicHeight", "computeMaxIntrinsicHeight$1", 1);
    _instance_0_u(_, "get$_increaseStartAction", "_increaseStartAction$0", 0);
    _instance_0_u(_, "get$_decreaseStartAction", "_decreaseStartAction$0", 0);
    _instance_0_u(_, "get$_increaseEndAction", "_increaseEndAction$0", 0);
    _instance_0_u(_, "get$_decreaseEndAction", "_decreaseEndAction$0", 0);
    _instance_1_u(_ = A._SliderState0.prototype, "get$_slider$_handleChanged", "_slider$_handleChanged$1", 6);
    _instance_1_u(_, "get$_slider$_handleDragStart", "_slider$_handleDragStart$1", 6);
    _instance_1_u(_, "get$_slider$_handleDragEnd", "_slider$_handleDragEnd$1", 6);
    _instance_1_u(_, "get$_actionHandler", "_actionHandler$1", 22);
    _instance_1_u(_, "get$_handleFocusHighlightChanged", "_handleFocusHighlightChanged$1", 3);
    _instance_1_u(_, "get$_handleHoverChanged", "_handleHoverChanged$1", 3);
    _instance_0_u(_ = A._RenderSlider.prototype, "get$_endInteraction", "_endInteraction$0", 0);
    _instance_1_u(_, "get$_slider$_handleDragStart", "_slider$_handleDragStart$1", 9);
    _instance_1_u(_, "get$_slider$_handleDragUpdate", "_slider$_handleDragUpdate$1", 8);
    _instance_1_u(_, "get$_slider$_handleDragEnd", "_slider$_handleDragEnd$1", 10);
    _instance_1_u(_, "get$_slider$_handleTapDown", "_slider$_handleTapDown$1", 4);
    _instance_1_u(_, "get$_slider$_handleTapUp", "_slider$_handleTapUp$1", 5);
    _instance_1_u(_, "get$computeMinIntrinsicWidth", "computeMinIntrinsicWidth$1", 1);
    _instance_1_u(_, "get$computeMaxIntrinsicWidth", "computeMaxIntrinsicWidth$1", 1);
    _instance_1_u(_, "get$computeMinIntrinsicHeight", "computeMinIntrinsicHeight$1", 1);
    _instance_1_u(_, "get$computeMaxIntrinsicHeight", "computeMaxIntrinsicHeight$1", 1);
    _instance_0_u(_, "get$increaseAction", "increaseAction$0", 0);
    _instance_0_u(_, "get$decreaseAction", "decreaseAction$0", 0);
    _instance_0_i(A.FormController.prototype, "get$submit", "submit$0", 26);
    _instance(A.TDInputView.prototype, "get$_buildCounter", 0, 1, null, ["call$4$currentLength$isFocused$maxLength"], ["_buildCounter$4$currentLength$isFocused$maxLength"], 27, 0, 0);
  })();
  (function inheritance() {
    var _mixinHard = hunkHelpers.mixinHard,
      _mixin = hunkHelpers.mixin,
      _inheritMany = hunkHelpers.inheritMany,
      _inherit = hunkHelpers.inherit;
    _inheritMany(B.StatefulWidget, [A.QuestionnairePage, A.Slider, A.RangeSlider, A.Slider0, A.TDCheckbox, A.TDCheckboxGroup, A.TDForm, A.TDFormItem, A.TDSlider, A.TDRangeSlider]);
    _inheritMany(B.State, [A._QuestionnairePageState, A._SliderState, A.__RangeSliderState_State_TickerProviderStateMixin, A.__SliderState_State_TickerProviderStateMixin, A.TDCheckboxState, A.TDCheckboxGroupState, A._TDFormState, A._TDFormItemState, A.TDSliderState, A._TDRangeSliderState]);
    _inheritMany(B.Closure, [A._QuestionnairePageState_initState_closure, A._QuestionnairePageState__onChanged_closure, A._QuestionnairePageState_build_closure, A._QuestionnairePageState_build__closure, A._QuestionnairePageState__checkbox__closure, A._QuestionnairePageState__checkbox__closure0, A._QuestionnairePageState__radio__closure, A._QuestionnairePageState__radio__closure0, A._QuestionnairePageState__slider_closure, A._QuestionnairePageState__input_closure, A._SliderState_build_closure, A._SliderState_build_closure0, A._SliderState_build_closure1, A._SliderState_build__closure0, A._SliderState_build__closure1, A._RangeSliderState_showValueIndicator_closure, A._RenderRangeSlider_closure, A._RenderRangeSlider__maxSliderPartWidth_closure, A._RenderRangeSlider__maxSliderPartHeight_closure, A._SliderState_showValueIndicator_closure, A._RenderSlider_closure, A._RenderSlider__maxSliderPartWidth_closure, A._RenderSlider__maxSliderPartHeight_closure, A._SliderDefaultsM3Year2023_overlayColor_closure, A.TDCheckboxState_build_closure1, A.TDCheckboxState_build_closure2, A.TDCheckboxGroupState__syncCheckState_closure, A.TDCheckboxGroupContainer_closure1, A.TDCheckboxGroupContainer_closure2, A._TDFormState_build_closure, A._TDFormState_build_closure0, A.TDRadioGroup_closure1, A.TDRadioGroup_closure2, A.TDSliderState_build_closure1, A.TDSliderState_build_closure0, A.TDSliderState_build_closure, A._TDRangeSliderState_build_closure1, A._TDRangeSliderState_build_closure0, A._TDRangeSliderState_build_closure]);
    _inheritMany(B.Closure0Args, [A._QuestionnairePageState__onReset_closure, A._SliderState_toggleRange_closure, A._SliderState_build__closure, A._RangeSliderState__handleHoverChanged_closure, A._RangeSliderState_build_effectiveOverlayColor, A._RangeSliderState_build_screenSize, A._RenderRangeSlider__startInteraction_closure, A._SliderState__handleFocusHighlightChanged_closure, A._SliderState__handleHoverChanged_closure, A._SliderState__buildMaterialSlider_effectiveOverlayColor, A._SliderState__buildMaterialSlider_screenSize, A._SliderState__buildMaterialSlider_closure, A._RenderSlider__startInteraction_closure, A.TDCheckboxState_build_closure0, A.TDCheckboxState_build_closure, A.TDCheckboxState__pressState_closure, A.TDCheckboxState_onValueChange_closure, A.TDCheckboxGroupState_toggle_closure0, A._TDFormState_initState_closure, A._TDFormState_onReset_closure, A._TDFormState_onSubmit_closure0, A._TDFormItemState_startValidation_closure, A._TDFormItemState__buildSelectRow_closure, A.TDInput_buildNormalInput_closure, A.TDSliderState_build__closure, A._TDRangeSliderState_build__closure]);
    _inheritMany(B.Closure2Args, [A._QuestionnairePageState__checkbox_closure, A._QuestionnairePageState__radio_closure, A.TDCheckboxGroupState_toggle_closure, A.TDCheckboxGroupState__notifyChange_closure, A.TDCheckboxGroupContainer_closure, A.TDCheckboxGroupContainer_closure0, A._TDFormState_onSubmit_closure, A._TDFormState_build_closure1, A.TDRadioGroup_closure, A.TDRadioGroup_closure0, A.TDRadioGroupState_toggle_closure, A.MapExt_count_closure, A.MapExt_where_closure]);
    _inherit(A.SliderController, B.ValueNotifier);
    _inherit(A._RangeSliderState, A.__RangeSliderState_State_TickerProviderStateMixin);
    _inheritMany(B.LeafRenderObjectWidget, [A._RangeSliderRenderObjectWidget, A._ValueIndicatorRenderObjectWidget0, A._SliderRenderObjectWidget, A._ValueIndicatorRenderObjectWidget]);
    _inheritMany(B.RenderBox, [A.__RenderRangeSlider_RenderBox_RelayoutWhenSystemFontsChangeMixin, A.__RenderValueIndicator_RenderBox_RelayoutWhenSystemFontsChangeMixin, A.__RenderSlider_RenderBox_RelayoutWhenSystemFontsChangeMixin, A.__RenderValueIndicator_RenderBox_RelayoutWhenSystemFontsChangeMixin0]);
    _inherit(A._RenderRangeSlider, A.__RenderRangeSlider_RenderBox_RelayoutWhenSystemFontsChangeMixin);
    _inherit(A._RenderValueIndicator0, A.__RenderValueIndicator_RenderBox_RelayoutWhenSystemFontsChangeMixin);
    _inheritMany(B._Enum, [A._SliderType, A.SliderInteraction, A._SliderAdjustmentType, A.ShowValueIndicator, A.Thumb, A.TDCheckboxStyle, A.TDContentDirection, A.TDCheckBoxSize, A.TDFormItemType, A.TDInputType, A.TDInputSize, A.TDRadioStyle]);
    _inherit(A._SliderState0, A.__SliderState_State_TickerProviderStateMixin);
    _inherit(A._RenderSlider, A.__RenderSlider_RenderBox_RelayoutWhenSystemFontsChangeMixin);
    _inherit(A._AdjustSliderIntent, M.Intent);
    _inherit(A._RenderValueIndicator, A.__RenderValueIndicator_RenderBox_RelayoutWhenSystemFontsChangeMixin0);
    _inheritMany(I.SliderThemeData, [A._SliderDefaultsM2, A._SliderDefaultsM3Year2023]);
    _inherit(A.SliderTheme, F.InheritedTheme);
    _inheritMany(B.Object, [A.SliderComponentShape, A.SliderTickMarkShape, A.SliderTrackShape, A.RangeSliderThumbShape, A.RangeSliderValueIndicatorShape, A.RangeSliderTickMarkShape, A.RangeSliderTrackShape, A.BaseSliderTrackShape, A.BaseRangeSliderTrackShape, A.RangeValues, A._FormController_Object_ChangeNotifier, A.TDInputSpacer, A.TDSliderThemeData, A.SliderMeasureData, A.TDBaseRangeSliderTrackShape]);
    _inheritMany(A.SliderTrackShape, [A._RoundedRectSliderTrackShape_SliderTrackShape_BaseSliderTrackShape, A._TDRoundedRectSliderTrackShape_SliderTrackShape_BaseSliderTrackShape]);
    _inherit(A.RoundedRectSliderTrackShape, A._RoundedRectSliderTrackShape_SliderTrackShape_BaseSliderTrackShape);
    _inheritMany(A.RangeSliderTrackShape, [A._RoundedRectRangeSliderTrackShape_RangeSliderTrackShape_BaseRangeSliderTrackShape, A._TDRoundedRectRangeSliderTrackShape_RangeSliderTrackShape_TDBaseRangeSliderTrackShape]);
    _inherit(A.RoundedRectRangeSliderTrackShape, A._RoundedRectRangeSliderTrackShape_RangeSliderTrackShape_BaseRangeSliderTrackShape);
    _inheritMany(A.SliderTickMarkShape, [A.RoundSliderTickMarkShape, A.TDRoundSliderTickMarkShape]);
    _inheritMany(A.RangeSliderTickMarkShape, [A.RoundRangeSliderTickMarkShape, A.TDRoundRangeSliderTickMarkShape]);
    _inheritMany(A.SliderComponentShape, [A.RoundSliderThumbShape, A.RoundSliderOverlayShape, A.RectangularSliderValueIndicatorShape, A.DropSliderValueIndicatorShape, A.RoundedRectSliderValueIndicatorShape, A.TDRoundSliderThumbShape, A.TDNoOverlayShape]);
    _inheritMany(A.RangeSliderThumbShape, [A.RoundRangeSliderThumbShape, A.TDRoundRangeSliderThumbShape]);
    _inherit(A.RectangularRangeSliderValueIndicatorShape, A.RangeSliderValueIndicatorShape);
    _inheritMany(B.StatelessWidget, [A.RadioCornerIcon, A.TDInputView, A.TDInput]);
    _inherit(A.RadioCorner, I.CustomPainter);
    _inheritMany(B.InheritedWidget, [A.TDCheckboxGroupInherited, A.TDFormInherited]);
    _inheritMany(A.TDCheckboxGroup, [A.TDCheckboxGroupContainer, A.TDRadioGroup]);
    _inheritMany(A.TDCheckboxGroupState, [A.TDCheckboxGroupContainerState, A.TDRadioGroupState]);
    _inherit(A.FormController, A._FormController_Object_ChangeNotifier);
    _inherit(A.TDRadio, A.TDCheckbox);
    _inherit(A.TDRadioState, A.TDCheckboxState);
    _inherit(A.TDRoundedRectSliderTrackShape, A._TDRoundedRectSliderTrackShape_SliderTrackShape_BaseSliderTrackShape);
    _inherit(A.TDRoundedRectRangeSliderTrackShape, A._TDRoundedRectRangeSliderTrackShape_RangeSliderTrackShape_TDBaseRangeSliderTrackShape);
    _mixinHard(A.__RangeSliderState_State_TickerProviderStateMixin, F.TickerProviderStateMixin);
    _mixinHard(A.__RenderRangeSlider_RenderBox_RelayoutWhenSystemFontsChangeMixin, F.RelayoutWhenSystemFontsChangeMixin);
    _mixinHard(A.__RenderValueIndicator_RenderBox_RelayoutWhenSystemFontsChangeMixin, F.RelayoutWhenSystemFontsChangeMixin);
    _mixinHard(A.__RenderSlider_RenderBox_RelayoutWhenSystemFontsChangeMixin, F.RelayoutWhenSystemFontsChangeMixin);
    _mixinHard(A.__RenderValueIndicator_RenderBox_RelayoutWhenSystemFontsChangeMixin0, F.RelayoutWhenSystemFontsChangeMixin);
    _mixinHard(A.__SliderState_State_TickerProviderStateMixin, F.TickerProviderStateMixin);
    _mixin(A._RoundedRectRangeSliderTrackShape_RangeSliderTrackShape_BaseRangeSliderTrackShape, A.BaseRangeSliderTrackShape);
    _mixin(A._RoundedRectSliderTrackShape_SliderTrackShape_BaseSliderTrackShape, A.BaseSliderTrackShape);
    _mixin(A._FormController_Object_ChangeNotifier, B.ChangeNotifier);
    _mixin(A._TDRoundedRectRangeSliderTrackShape_RangeSliderTrackShape_TDBaseRangeSliderTrackShape, A.TDBaseRangeSliderTrackShape);
    _mixin(A._TDRoundedRectSliderTrackShape_SliderTrackShape_BaseSliderTrackShape, A.BaseSliderTrackShape);
  })();
  B._Universe_addRules(init.typeUniverse, JSON.parse('{"Slider":{"StatefulWidget":[],"Widget":[],"DiagnosticableTree":[]},"QuestionnairePage":{"StatefulWidget":[],"Widget":[],"DiagnosticableTree":[]},"_QuestionnairePageState":{"State":["QuestionnairePage"],"State.T":"QuestionnairePage"},"SliderController":{"ValueNotifier":["@"],"ChangeNotifier":[],"ValueListenable":["@"],"Listenable":[],"ValueNotifier.T":"@"},"_SliderState":{"State":["Slider"],"State.T":"Slider"},"RangeSlider":{"StatefulWidget":[],"Widget":[],"DiagnosticableTree":[]},"_RangeSliderState":{"TickerProviderStateMixin":["RangeSlider"],"State":["RangeSlider"],"TickerProvider":[],"State.T":"RangeSlider"},"_RangeSliderRenderObjectWidget":{"RenderObjectWidget":[],"Widget":[],"DiagnosticableTree":[]},"_RenderRangeSlider":{"RenderBox":[],"RenderObject":[],"DiagnosticableTree":[],"HitTestTarget":[]},"_ValueIndicatorRenderObjectWidget0":{"RenderObjectWidget":[],"Widget":[],"DiagnosticableTree":[]},"_RenderValueIndicator0":{"RenderBox":[],"RenderObject":[],"DiagnosticableTree":[],"HitTestTarget":[]},"Slider0":{"StatefulWidget":[],"Widget":[],"DiagnosticableTree":[]},"_AdjustSliderIntent":{"Intent":[]},"_SliderType":{"Enum":[]},"SliderInteraction":{"Enum":[]},"_SliderState0":{"TickerProviderStateMixin":["Slider0"],"State":["Slider0"],"TickerProvider":[],"State.T":"Slider0"},"_SliderRenderObjectWidget":{"RenderObjectWidget":[],"Widget":[],"DiagnosticableTree":[]},"_RenderSlider":{"RenderBox":[],"RenderObject":[],"DiagnosticableTree":[],"HitTestTarget":[]},"_SliderAdjustmentType":{"Enum":[]},"_ValueIndicatorRenderObjectWidget":{"RenderObjectWidget":[],"Widget":[],"DiagnosticableTree":[]},"_RenderValueIndicator":{"RenderBox":[],"RenderObject":[],"DiagnosticableTree":[],"HitTestTarget":[]},"_SliderDefaultsM2":{"SliderThemeData":[]},"_SliderDefaultsM3Year2023":{"SliderThemeData":[]},"SliderTheme":{"InheritedTheme":[],"InheritedWidget":[],"ProxyWidget":[],"Widget":[],"DiagnosticableTree":[]},"ShowValueIndicator":{"Enum":[]},"Thumb":{"Enum":[]},"RoundedRectSliderTrackShape":{"SliderTrackShape":[]},"RoundedRectRangeSliderTrackShape":{"RangeSliderTrackShape":[]},"RoundSliderTickMarkShape":{"SliderTickMarkShape":[]},"RoundRangeSliderTickMarkShape":{"RangeSliderTickMarkShape":[]},"RoundSliderThumbShape":{"SliderComponentShape":[]},"RoundRangeSliderThumbShape":{"RangeSliderThumbShape":[]},"RoundSliderOverlayShape":{"SliderComponentShape":[]},"RectangularSliderValueIndicatorShape":{"SliderComponentShape":[]},"RectangularRangeSliderValueIndicatorShape":{"RangeSliderValueIndicatorShape":[]},"DropSliderValueIndicatorShape":{"SliderComponentShape":[]},"TDCheckbox":{"StatefulWidget":[],"Widget":[],"DiagnosticableTree":[]},"TDCheckboxStyle":{"Enum":[]},"TDContentDirection":{"Enum":[]},"TDCheckBoxSize":{"Enum":[]},"TDCheckboxState":{"State":["TDCheckbox"],"State.T":"TDCheckbox"},"RadioCornerIcon":{"StatelessWidget":[],"Widget":[],"DiagnosticableTree":[]},"RadioCorner":{"CustomPainter":[],"Listenable":[]},"TDCheckboxGroup":{"StatefulWidget":[],"Widget":[],"DiagnosticableTree":[]},"TDCheckboxGroupInherited":{"InheritedWidget":[],"ProxyWidget":[],"Widget":[],"DiagnosticableTree":[]},"TDCheckboxGroupContainer":{"TDCheckboxGroup":[],"StatefulWidget":[],"Widget":[],"DiagnosticableTree":[]},"TDCheckboxGroupState":{"State":["TDCheckboxGroup"],"State.T":"TDCheckboxGroup"},"TDCheckboxGroupContainerState":{"TDCheckboxGroupState":[],"State":["TDCheckboxGroup"],"State.T":"TDCheckboxGroup"},"TDForm":{"StatefulWidget":[],"Widget":[],"DiagnosticableTree":[]},"_TDFormState":{"State":["TDForm"],"State.T":"TDForm"},"FormController":{"ChangeNotifier":[],"Listenable":[]},"TDFormInherited":{"InheritedWidget":[],"ProxyWidget":[],"Widget":[],"DiagnosticableTree":[]},"TDFormItem":{"StatefulWidget":[],"Widget":[],"DiagnosticableTree":[]},"TDFormItemType":{"Enum":[]},"_TDFormItemState":{"State":["TDFormItem"],"State.T":"TDFormItem"},"TDInputView":{"StatelessWidget":[],"Widget":[],"DiagnosticableTree":[]},"TDInputType":{"Enum":[]},"TDInputSize":{"Enum":[]},"TDInput":{"StatelessWidget":[],"Widget":[],"DiagnosticableTree":[]},"TDRadio":{"TDCheckbox":[],"StatefulWidget":[],"Widget":[],"DiagnosticableTree":[]},"TDRadioGroup":{"TDCheckboxGroup":[],"StatefulWidget":[],"Widget":[],"DiagnosticableTree":[]},"TDRadioStyle":{"Enum":[]},"TDRadioState":{"State":["TDCheckbox"],"State.T":"TDCheckbox"},"TDRadioGroupState":{"TDCheckboxGroupState":[],"State":["TDCheckboxGroup"],"State.T":"TDCheckboxGroup"},"TDSlider":{"StatefulWidget":[],"Widget":[],"DiagnosticableTree":[]},"TDRangeSlider":{"StatefulWidget":[],"Widget":[],"DiagnosticableTree":[]},"TDSliderState":{"State":["TDSlider"],"State.T":"TDSlider"},"_TDRangeSliderState":{"State":["TDRangeSlider"],"State.T":"TDRangeSlider"},"TDRoundedRectSliderTrackShape":{"SliderTrackShape":[]},"TDRoundSliderThumbShape":{"SliderComponentShape":[]},"TDNoOverlayShape":{"SliderComponentShape":[]},"TDRoundSliderTickMarkShape":{"SliderTickMarkShape":[]},"TDRoundedRectRangeSliderTrackShape":{"RangeSliderTrackShape":[]},"TDRoundRangeSliderThumbShape":{"RangeSliderThumbShape":[]},"TDRoundRangeSliderTickMarkShape":{"RangeSliderTickMarkShape":[]}}'));
  var type$ = (function rtii() {
    var findType = B.findType;
    return {
      Action_Intent: findType("Action<Intent>"),
      AnimationStatus: findType("AnimationStatus"),
      Animation_double: findType("Animation<double>"),
      BoxConstraints: findType("BoxConstraints"),
      BoxHitTestEntry: findType("BoxHitTestEntry"),
      BuildContext: findType("BuildContext"),
      CallbackAction__AdjustSliderIntent: findType("CallbackAction<_AdjustSliderIntent>"),
      ContainerLayer: findType("ContainerLayer0"),
      CustomMessage: findType("CustomMessage"),
      Directionality: findType("Directionality"),
      GeneralConstantMap_ShortcutActivator_Intent: findType("GeneralConstantMap<ShortcutActivator,Intent>"),
      HitTestEntry_HitTestTarget: findType("HitTestEntry<HitTestTarget>"),
      Iterable_SemanticsNode: findType("Iterable<SemanticsNode>"),
      Iterable_dynamic: findType("Iterable<@>"),
      JSArray_IconButton: findType("JSArray<IconButton>"),
      JSArray_SemanticsNode: findType("JSArray<SemanticsNode>"),
      JSArray_Size: findType("JSArray<Size>"),
      JSArray_String: findType("JSArray<String>"),
      JSArray_Widget: findType("JSArray<Widget>"),
      JSArray_of_void_Function_Action_Intent: findType("JSArray<~(Action<Intent>)>"),
      LabeledGlobalKey_State_StatefulWidget: findType("LabeledGlobalKey<State<StatefulWidget>>"),
      List_String: findType("List<String>"),
      List_Widget: findType("List<Widget>"),
      List_double: findType("List<double>"),
      List_dynamic: findType("List<@>"),
      Map_String_dynamic: findType("Map<String,@>"),
      Map_dynamic_dynamic: findType("Map<@,@>"),
      Map_of_Type_and_Action_Intent: findType("Map<Type,Action<Intent>>"),
      MediaQuery: findType("MediaQuery"),
      ObserverList_of_void_Function_Action_Intent: findType("ObserverList<~(Action<Intent>)>"),
      OverlayState: findType("OverlayState"),
      PointerDownEvent: findType("PointerDownEvent"),
      Question: findType("Question"),
      RangeSlider: findType("RangeSlider"),
      RangeValues: findType("RangeValues"),
      Set_WidgetState: findType("Set<WidgetState>"),
      Size: findType("Size"),
      SliderController: findType("SliderController"),
      SliderTheme: findType("SliderTheme"),
      String: findType("String"),
      TDCheckbox: findType("TDCheckbox"),
      TDCheckboxGroup: findType("TDCheckboxGroup"),
      TDCheckboxGroupInherited: findType("TDCheckboxGroupInherited"),
      TDFormInherited: findType("TDFormInherited"),
      TDFormItem: findType("TDFormItem"),
      TDRadio: findType("TDRadio"),
      TDRadioGroup: findType("TDRadioGroup"),
      TDRangeSlider: findType("TDRangeSlider"),
      TDSlider: findType("TDSlider"),
      TextDirection: findType("TextDirection"),
      Tween_double: findType("Tween<double>"),
      Type: findType("Type"),
      WidgetState: findType("WidgetState"),
      WidgetStatePropertyAll_nullable_Size: findType("WidgetStatePropertyAll<Size?>"),
      _AdjustSliderIntent: findType("_AdjustSliderIntent"),
      _CombiningGestureArenaMember: findType("_CombiningGestureArenaMember"),
      _RenderRangeSlider: findType("_RenderRangeSlider"),
      _RenderSlider: findType("_RenderSlider"),
      _RenderValueIndicator: findType("_RenderValueIndicator0"),
      _RenderValueIndicator_2: findType("_RenderValueIndicator"),
      bool: findType("bool"),
      dynamic: findType("@"),
      int: findType("int"),
      nullable_Color: findType("Color?"),
      nullable_List_String: findType("List<String>?"),
      nullable_MouseCursor: findType("MouseCursor?"),
      nullable_RenderBox: findType("RenderBox?"),
      nullable_TextEditingController: findType("TextEditingController?"),
      nullable_Thumb: findType("Thumb?"),
      nullable_void_Function_RangeValues: findType("~(RangeValues)?"),
      nullable_void_Function_double: findType("~(double)?"),
      void: findType("~"),
      void_Function: findType("~()"),
      void_Function_AnimationStatus: findType("~(AnimationStatus)")
    };
  })();
  (function constants() {
    D.BoxDecoration_6xp = new F.BoxDecoration(H.Color_wst, null, null, null, null, null, null, H.BoxShape_0);
    D.C_DropSliderValueIndicatorShape = new A.DropSliderValueIndicatorShape();
    D.C_RectangularRangeSliderValueIndicatorShape = new A.RectangularRangeSliderValueIndicatorShape();
    D.C_RectangularSliderValueIndicatorShape = new A.RectangularSliderValueIndicatorShape();
    D.C_RoundRangeSliderThumbShape = new A.RoundRangeSliderThumbShape();
    D.C_RoundRangeSliderTickMarkShape = new A.RoundRangeSliderTickMarkShape();
    D.C_RoundSliderOverlayShape = new A.RoundSliderOverlayShape();
    D.C_RoundSliderThumbShape = new A.RoundSliderThumbShape();
    D.C_RoundedRectRangeSliderTrackShape = new A.RoundedRectRangeSliderTrackShape();
    D.C_RoundedRectSliderTrackShape = new A.RoundedRectSliderTrackShape();
    D.C_TDNoOverlayShape = new A.TDNoOverlayShape();
    D.Color_SHX = new B.Color(0.5, 0, 0, 0, C.ColorSpace_0);
    D.EdgeInsets_0_0_16_0 = new B.EdgeInsets(0, 0, 16, 0);
    D.EdgeInsets_0_12_0_12 = new B.EdgeInsets(0, 12, 0, 12);
    D.EdgeInsets_0_16_0_16 = new B.EdgeInsets(0, 16, 0, 16);
    D.EdgeInsets_16_0_0_0 = new B.EdgeInsets(16, 0, 0, 0);
    D.EdgeInsets_2_0_0_0 = new B.EdgeInsets(2, 0, 0, 0);
    D.EdgeInsets_2_8_0_0 = new B.EdgeInsets(2, 8, 0, 0);
    D.EdgeInsets_4_0_0_0 = new B.EdgeInsets(4, 0, 0, 0);
    D.IconData_58917_MaterialIcons_null_false = new F.IconData(58917, "MaterialIcons", null, false);
    D.IconData_58919_MaterialIcons_null_false = new F.IconData(58919, "MaterialIcons", null, false);
    D._SliderAdjustmentType_1 = new A._SliderAdjustmentType(1, "left");
    D._AdjustSliderIntent__SliderAdjustmentType_1 = new A._AdjustSliderIntent(D._SliderAdjustmentType_1);
    D._SliderAdjustmentType_0 = new A._SliderAdjustmentType(0, "right");
    D._AdjustSliderIntent__SliderAdjustmentType_0 = new A._AdjustSliderIntent(D._SliderAdjustmentType_0);
    D.Map_ANauy = new B.GeneralConstantMap([W.SingleActivator_uUl2, D._AdjustSliderIntent__SliderAdjustmentType_1, W.SingleActivator_uUl3, D._AdjustSliderIntent__SliderAdjustmentType_0], type$.GeneralConstantMap_ShortcutActivator_Intent);
    D._SliderAdjustmentType_2 = new A._SliderAdjustmentType(2, "up");
    D._AdjustSliderIntent__SliderAdjustmentType_2 = new A._AdjustSliderIntent(D._SliderAdjustmentType_2);
    D._SliderAdjustmentType_3 = new A._SliderAdjustmentType(3, "down");
    D._AdjustSliderIntent__SliderAdjustmentType_3 = new A._AdjustSliderIntent(D._SliderAdjustmentType_3);
    D.Map_LMmfw = new B.GeneralConstantMap([W.SingleActivator_uUl4, D._AdjustSliderIntent__SliderAdjustmentType_2, W.SingleActivator_uUl5, D._AdjustSliderIntent__SliderAdjustmentType_3, W.SingleActivator_uUl2, D._AdjustSliderIntent__SliderAdjustmentType_1, W.SingleActivator_uUl3, D._AdjustSliderIntent__SliderAdjustmentType_0], type$.GeneralConstantMap_ShortcutActivator_Intent);
    D.Map_empty8 = new B.ConstantStringMap(C.Object_empty, [], B.findType("ConstantStringMap<String,TDFormValidation>"));
    D._TDIconsData_MTr = new G._TDIconsData("check", 57733, "TDIcons", "tdesign_flutter", false);
    D.Icon_5Fn = new F.Icon(D._TDIconsData_MTr, 14, H.Color_wst, null, null);
    D.Positioned_vkN = new I.Positioned(2, 3, null, null, null, null, D.Icon_5Fn, null);
    D.RangeValues_0_100 = new A.RangeValues(0, 100);
    D.RoundSliderTickMarkShape_null = new A.RoundSliderTickMarkShape(null);
    D.ShowValueIndicator_0 = new A.ShowValueIndicator(0, "onlyForDiscrete");
    D.ShowValueIndicator_3 = new A.ShowValueIndicator(3, "never");
    D.Size_0_40 = new B.Size(0, 40);
    D.SizedBox_20_null_null_null = new F.SizedBox(20, null, null, null);
    D.SliderInteraction_0 = new A.SliderInteraction(0, "tapAndSlide");
    D.SliderInteraction_2 = new A.SliderInteraction(2, "slideOnly");
    D.TDCheckBoxSize_1 = new A.TDCheckBoxSize(1, "small");
    D.TDCheckboxStyle_0 = new A.TDCheckboxStyle(0, "circle");
    D.TDCheckboxStyle_1 = new A.TDCheckboxStyle(1, "square");
    D.TDCheckboxStyle_2 = new A.TDCheckboxStyle(2, "check");
    D.TDContentDirection_1 = new A.TDContentDirection(1, "right");
    D.TDDivider_3M0 = new K.TDDivider(null, D.EdgeInsets_16_0_0_0, null, null, null);
    D.EdgeInsets_48_0_0_0 = new B.EdgeInsets(48, 0, 0, 0);
    D.TDDivider_QF6 = new K.TDDivider(null, D.EdgeInsets_48_0_0_0, null, null, null);
    D.TDFormItemType_0 = new A.TDFormItemType(0, "input");
    D.TDFormItemType_1 = new A.TDFormItemType(1, "radios");
    D.TDFormItemType_4 = new A.TDFormItemType(4, "stepper");
    D.TDFormItemType_5 = new A.TDFormItemType(5, "rate");
    D.TDInputSize_1 = new A.TDInputSize(1, "large");
    D.TDInputType_0 = new A.TDInputType(0, "normal");
    D.TDRadioStyle_0 = new A.TDRadioStyle(0, "circle");
    D.TextStyle_IpK = new F.TextStyle(true, null, null, null, null, null, null, null, null, 0, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
    D.Thumb_0 = new A.Thumb(0, "start");
    D.Thumb_1 = new A.Thumb(1, "end");
    D.Type__AdjustSliderIntent_bIn = B.typeLiteral("_AdjustSliderIntent");
    D._SliderType_0 = new A._SliderType(0, "material");
    D._TDIconsData_2bp = new G._TDIconsData("check_rectangle_filled", 57731, "TDIcons", "tdesign_flutter", false);
    D._TDIconsData_3Eb = new G._TDIconsData("rectangle", 58896, "TDIcons", "tdesign_flutter", false);
    D._TDIconsData_GAI = new G._TDIconsData("circle", 57784, "TDIcons", "tdesign_flutter", false);
    D._TDIconsData_Tod = new G._TDIconsData("chevron_right", 57761, "TDIcons", "tdesign_flutter", false);
    D._TDIconsData_pHz = new G._TDIconsData("close_circle_filled", 57829, "TDIcons", "tdesign_flutter", false);
  })();
};
;
((d, h) => {
  d[h] = d.current;
  d.eventLog.push({p: "main.dart.js_203", e: "endPart", h: h});
})($__dart_deferred_initializers__, "tlmmZzoFbcKK9k8X4iafF+GgaqU=");
;
//# sourceMappingURL=main.dart.js_203.part.js.map
