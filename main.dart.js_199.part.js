// Generated by dart2js (NullSafetyMode.sound, csp, intern-composite-values), the Dart to JavaScript compiler version: 3.7.2.
((s, d, e) => {
  s[d] = s[d] || {};
  s[d][e] = s[d][e] || [];
  s[d][e].push({p: "main.dart.js_199", e: "beginPart"});
})(self, "$__dart_deferred_initializers__", "eventLog");
$__dart_deferred_initializers__.current = function(hunkHelpers, init, holdersList, $) {
  var A,
  B = {
    ShaderMaskLayer$() {
      return new B.ShaderMaskLayer(A.LinkedHashMap_LinkedHashMap$_empty(type$.int, type$.void_Function), A.LayerHandle$(type$.Layer));
    },
    ShaderMaskLayer: function ShaderMaskLayer(t0, t1) {
      var _ = this;
      _._lastChild = _._firstChild = _._layer$_blendMode = _._maskRect = _._layer$_shader = null;
      _._callbacks = t0;
      _._compositionCallbackCount = 0;
      _._parentHandle = t1;
      _._refCount = 0;
      _._layer$_parent = null;
      _._needsAddToScene = true;
      _._layer$_owner = _._engineLayer = null;
      _._layer$_depth = 0;
      _._previousSibling = _._nextSibling = null;
    }
  };
  A = holdersList[0];
  B = hunkHelpers.updateHolder(holdersList[24], B);
  B.ShaderMaskLayer.prototype = {
    set$shader(value) {
      if (value !== this._layer$_shader) {
        this._layer$_shader = value;
        this.markNeedsAddToScene$0();
      }
    },
    set$maskRect(value) {
      if (!value.$eq(0, this._maskRect)) {
        this._maskRect = value;
        this.markNeedsAddToScene$0();
      }
    },
    set$blendMode(value) {
      if (value !== this._layer$_blendMode) {
        this._layer$_blendMode = value;
        this.markNeedsAddToScene$0();
      }
    },
    addToScene$1(builder) {
      var t2, t3, _this = this,
        t1 = _this._layer$_shader;
      t1.toString;
      t2 = _this._maskRect;
      t2.toString;
      t3 = _this._layer$_blendMode;
      t3.toString;
      _this.set$engineLayer(builder.pushShaderMask$4$oldLayer(t1, t2, t3, type$.nullable_ShaderMaskEngineLayer._as(_this._engineLayer)));
      _this.addChildrenToScene$1(builder);
      builder.pop$0();
    }
  };
  var typesOffset = hunkHelpers.updateTypes([]);
  (function inheritance() {
    var _inherit = hunkHelpers.inherit;
    _inherit(B.ShaderMaskLayer, A.ContainerLayer0);
  })();
  A._Universe_addRules(init.typeUniverse, JSON.parse('{"ShaderMaskLayer":{"ContainerLayer0":[],"Layer0":[],"DiagnosticableTree":[]},"FlyerChatTextStreamMessage":{"StatefulWidget":[],"Widget":[],"DiagnosticableTree":[]}}'));
  var type$ = {
    Layer: A.findType("Layer0"),
    int: A.findType("int"),
    nullable_ShaderMaskEngineLayer: A.findType("ShaderMaskEngineLayer0?"),
    void_Function: A.findType("~()")
  };
};
;
((d, h) => {
  d[h] = d.current;
  d.eventLog.push({p: "main.dart.js_199", e: "endPart", h: h});
})($__dart_deferred_initializers__, "iCUW5YWWiVO4jFMkCR1+aPAigpA=");
;
//# sourceMappingURL=main.dart.js_199.part.js.map
