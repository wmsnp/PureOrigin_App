// Generated by dart2js (NullSafetyMode.sound, csp, intern-composite-values), the Dart to JavaScript compiler version: 3.7.2.
((s, d, e) => {
  s[d] = s[d] || {};
  s[d][e] = s[d][e] || [];
  s[d][e].push({p: "main.dart.js_207", e: "beginPart"});
})(self, "$__dart_deferred_initializers__", "eventLog");
$__dart_deferred_initializers__.current = function(hunkHelpers, init, holdersList, $) {
  var J, A, C, D, E,
  B = {_JSSecureRandom: function _JSSecureRandom(t0) {
      this._math$_buffer = t0;
    }, RNG: function RNG() {
    }, CryptoRNG: function CryptoRNG() {
    }, Uuid: function Uuid() {
    }},
  F;
  J = holdersList[1];
  A = holdersList[0];
  C = holdersList[2];
  D = holdersList[81];
  E = holdersList[153];
  B = hunkHelpers.updateHolder(holdersList[30], B);
  F = holdersList[154];
  B._JSSecureRandom.prototype = {
    _JSSecureRandom$0() {
      var $crypto = self.crypto;
      if ($crypto != null)
        if ($crypto.getRandomValues != null)
          return;
      throw A.wrapException(A.UnsupportedError$("No source of cryptographically secure random numbers available."));
    },
    nextInt$1(max) {
      var byteCount, t1, start, randomLimit, t2, t3, random, result;
      if (max <= 0 || max > 4294967296)
        throw A.wrapException(A.RangeError$("max must be in range 0 < max \u2264 2^32, was " + max));
      if (max > 255)
        if (max > 65535)
          byteCount = max > 16777215 ? 4 : 3;
        else
          byteCount = 2;
      else
        byteCount = 1;
      t1 = this._math$_buffer;
      t1.$flags & 2 && A.throwUnsupportedOperation(t1, 11);
      t1.setUint32(0, 0, false);
      start = 4 - byteCount;
      randomLimit = A._asInt(Math.pow(256, byteCount));
      for (t2 = max - 1, t3 = (max & t2) >>> 0 === 0; true;) {
        crypto.getRandomValues(J.asUint8List$2$x(C.NativeByteData_methods.get$buffer(t1), start, byteCount));
        random = t1.getUint32(0, false);
        if (t3)
          return (random & t2) >>> 0;
        result = random % max;
        if (random - result + max < randomLimit)
          return result;
      }
    }
  };
  B.RNG.prototype = {
    generate$0() {
      var uint8list = this._generateInternal$0();
      if (uint8list.length !== 16)
        throw A.wrapException(A.Exception_Exception("The length of the Uint8list returned by the custom RNG must be 16."));
      else
        return uint8list;
    }
  };
  B.CryptoRNG.prototype = {
    _generateInternal$0() {
      var i, k, t1, t2,
        b = new Uint8Array(16);
      for (i = 0; i < 16; i += 4) {
        k = $.$get$CryptoRNG__secureRandom().nextInt$1(C.JSNumber_methods.toInt$0(Math.pow(2, 32)));
        if (!(i < 16))
          return A.ioore(b, i);
        b[i] = k;
        t1 = i + 1;
        t2 = C.JSInt_methods._shrOtherPositive$1(k, 8);
        if (!(t1 < 16))
          return A.ioore(b, t1);
        b[t1] = t2;
        t2 = i + 2;
        t1 = C.JSInt_methods._shrOtherPositive$1(k, 16);
        if (!(t2 < 16))
          return A.ioore(b, t2);
        b[t2] = t1;
        t1 = i + 3;
        t2 = C.JSInt_methods._shrOtherPositive$1(k, 24);
        if (!(t1 < 16))
          return A.ioore(b, t1);
        b[t1] = t2;
      }
      return b;
    }
  };
  B.Uuid.prototype = {
    v4$0() {
      var rng, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t1 = null;
      if (null == null)
        rng = t1;
      else
        rng = t1;
      if (rng == null)
        rng = $.$get$V4State_random().generate$0();
      t1 = rng.length;
      if (6 >= t1)
        return A.ioore(rng, 6);
      t2 = rng[6];
      rng.$flags & 2 && A.throwUnsupportedOperation(rng);
      rng[6] = t2 & 15 | 64;
      if (8 >= t1)
        return A.ioore(rng, 8);
      rng[8] = rng[8] & 63 | 128;
      if (t1 < 16)
        A.throwExpression(A.RangeError$("buffer too small: need 16: length=" + t1));
      t2 = $.$get$UuidParsing__byteToHex();
      t3 = rng[0];
      if (!(t3 < 256))
        return A.ioore(t2, t3);
      t3 = t2[t3];
      t4 = rng[1];
      if (!(t4 < 256))
        return A.ioore(t2, t4);
      t4 = t2[t4];
      t5 = rng[2];
      if (!(t5 < 256))
        return A.ioore(t2, t5);
      t5 = t2[t5];
      t6 = rng[3];
      if (!(t6 < 256))
        return A.ioore(t2, t6);
      t6 = t2[t6];
      t7 = rng[4];
      if (!(t7 < 256))
        return A.ioore(t2, t7);
      t7 = t2[t7];
      t8 = rng[5];
      if (!(t8 < 256))
        return A.ioore(t2, t8);
      t8 = t2[t8];
      t9 = rng[6];
      if (!(t9 < 256))
        return A.ioore(t2, t9);
      t9 = t2[t9];
      t10 = rng[7];
      if (!(t10 < 256))
        return A.ioore(t2, t10);
      t10 = t2[t10];
      t11 = rng[8];
      if (!(t11 < 256))
        return A.ioore(t2, t11);
      t11 = t2[t11];
      if (9 >= t1)
        return A.ioore(rng, 9);
      t12 = rng[9];
      if (!(t12 < 256))
        return A.ioore(t2, t12);
      t12 = t2[t12];
      if (10 >= t1)
        return A.ioore(rng, 10);
      t13 = rng[10];
      if (!(t13 < 256))
        return A.ioore(t2, t13);
      t13 = t2[t13];
      if (11 >= t1)
        return A.ioore(rng, 11);
      t14 = rng[11];
      if (!(t14 < 256))
        return A.ioore(t2, t14);
      t14 = t2[t14];
      if (12 >= t1)
        return A.ioore(rng, 12);
      t15 = rng[12];
      if (!(t15 < 256))
        return A.ioore(t2, t15);
      t15 = t2[t15];
      if (13 >= t1)
        return A.ioore(rng, 13);
      t16 = rng[13];
      if (!(t16 < 256))
        return A.ioore(t2, t16);
      t16 = t2[t16];
      if (14 >= t1)
        return A.ioore(rng, 14);
      t17 = rng[14];
      if (!(t17 < 256))
        return A.ioore(t2, t17);
      t17 = t2[t17];
      if (15 >= t1)
        return A.ioore(rng, 15);
      t1 = rng[15];
      if (!(t1 < 256))
        return A.ioore(t2, t1);
      return t3 + t4 + t5 + t6 + "-" + t7 + t8 + "-" + t9 + t10 + "-" + t11 + t12 + "-" + t13 + t14 + t15 + t16 + t17 + t2[t1];
    }
  };
  var typesOffset = hunkHelpers.updateTypes([]);
  (function inheritance() {
    var _inheritMany = hunkHelpers.inheritMany,
      _inherit = hunkHelpers.inherit;
    _inheritMany(A.Object, [B._JSSecureRandom, B.RNG, B.Uuid]);
    _inherit(B.CryptoRNG, B.RNG);
  })();
  (function constants() {
    F.SingleActivator_uUl5 = new D.SingleActivator(C.LogicalKeyboardKey_4294968065, false, false, false, false, E.LockState_0);
    F.SingleActivator_uUl2 = new D.SingleActivator(C.LogicalKeyboardKey_4294968066, false, false, false, false, E.LockState_0);
    F.SingleActivator_uUl3 = new D.SingleActivator(C.LogicalKeyboardKey_4294968067, false, false, false, false, E.LockState_0);
    F.SingleActivator_uUl4 = new D.SingleActivator(C.LogicalKeyboardKey_4294968068, false, false, false, false, E.LockState_0);
  })();
  (function lazyInitializers() {
    var _lazyFinal = hunkHelpers.lazyFinal,
      _lazy = hunkHelpers.lazy;
    _lazyFinal($, "Random__secureRandom", "$get$Random__secureRandom", () => {
      var t1 = new B._JSSecureRandom(A.NativeByteData_NativeByteData(8));
      t1._JSSecureRandom$0();
      return t1;
    });
    _lazy($, "V4State_random", "$get$V4State_random", () => new B.CryptoRNG());
    _lazyFinal($, "UuidParsing__byteToHex", "$get$UuidParsing__byteToHex", () => {
      var i,
        _list = J.JSArray_JSArray$allocateGrowable(256, A.findType("String"));
      for (i = 0; i < 256; ++i)
        _list[i] = C.JSString_methods.padLeft$2(C.JSInt_methods.toRadixString$1(i, 16), 2, "0");
      return _list;
    });
    _lazyFinal($, "CryptoRNG__secureRandom", "$get$CryptoRNG__secureRandom", () => $.$get$Random__secureRandom());
  })();
};
;
((d, h) => {
  d[h] = d.current;
  d.eventLog.push({p: "main.dart.js_207", e: "endPart", h: h});
})($__dart_deferred_initializers__, "4kAywTuIYrYzuleZDT9dTzSbFQY=");
;
//# sourceMappingURL=main.dart.js_207.part.js.map
