// Generated by dart2js (NullSafetyMode.sound, csp, intern-composite-values), the Dart to JavaScript compiler version: 3.7.2.
((s, d, e) => {
  s[d] = s[d] || {};
  s[d][e] = s[d][e] || [];
  s[d][e].push({p: "main.dart.js_215", e: "beginPart"});
})(self, "$__dart_deferred_initializers__", "eventLog");
$__dart_deferred_initializers__.current = function(hunkHelpers, init, holdersList, $) {
  var J, B, C,
  A = {EventRegistry_initializers_closure: function EventRegistry_initializers_closure() {
    }, EventRegistry_initializers_closure0: function EventRegistry_initializers_closure0() {
    },
    Question_Question$fromJson(json) {
      var t6,
        t1 = J.getInterceptor$asx(json),
        t2 = B._asString(t1.$index(json, "id")),
        t3 = B._asString(t1.$index(json, "text")),
        t4 = B._asString(t1.$index(json, "type")),
        t5 = type$.nullable_List_dynamic._as(t1.$index(json, "options"));
      if (t5 == null)
        t5 = null;
      else {
        t5 = J.map$1$1$ax(t5, new A.Question_Question$fromJson_closure(), type$.String);
        t5 = B.List_List$of(t5, true, t5.$ti._eval$1("ListIterable.E"));
      }
      if (t5 == null)
        t5 = B._setArrayType([], type$.JSArray_String);
      t6 = B._asBoolQ(t1.$index(json, "required"));
      t1 = t1.$index(json, "answer");
      return new A.Question(t2, t3, t4, t5, t6 !== false, t1);
    },
    Questionnaire_Questionnaire$fromJson(json) {
      var t3, t4,
        t1 = B._asString(json.$index(0, "questionnaire")),
        t2 = B._asStringQ(json.$index(0, "title"));
      if (t2 == null)
        t2 = "";
      t3 = B._asStringQ(json.$index(0, "description"));
      if (t3 == null)
        t3 = "";
      t4 = J.map$1$1$ax(type$.List_dynamic._as(json.$index(0, "questions")), new A.Questionnaire_Questionnaire$fromJson_closure(), type$.Question);
      return new A.Questionnaire(t1, t2, t3, B.List_List$of(t4, true, t4.$ti._eval$1("ListIterable.E")));
    },
    convertKeys2String(input) {
      return J.map$2$1$ax(input, new A.convertKeys2String_closure(), type$.String, type$.dynamic);
    },
    Question: function Question(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.id = t0;
      _.text = t1;
      _.type = t2;
      _.options = t3;
      _.required = t4;
      _.answer = t5;
    },
    Question_Question$fromJson_closure: function Question_Question$fromJson_closure() {
    },
    Questionnaire: function Questionnaire(t0, t1, t2, t3) {
      var _ = this;
      _.questionnaire = t0;
      _.title = t1;
      _.description = t2;
      _.questions = t3;
    },
    Questionnaire_Questionnaire$fromJson_closure: function Questionnaire_Questionnaire$fromJson_closure() {
    },
    Questionnaire_toJson_closure: function Questionnaire_toJson_closure() {
    },
    convertKeys2String_closure: function convertKeys2String_closure() {
    },
    convertKeys2String__closure: function convertKeys2String__closure() {
    }
  };
  J = holdersList[1];
  B = holdersList[0];
  C = holdersList[124];
  A = hunkHelpers.updateHolder(holdersList[31], A);
  A.Question.prototype = {
    toJson$0() {
      var _this = this;
      return B.LinkedHashMap_LinkedHashMap$_literal(["id", _this.id, "text", _this.text, "type", _this.type, "options", _this.options, "required", _this.required, "answer", _this.answer], type$.String, type$.dynamic);
    }
  };
  A.Questionnaire.prototype = {
    toJson$0() {
      var _this = this,
        t1 = _this.questions,
        t2 = B._arrayInstanceType(t1),
        t3 = t2._eval$1("MappedListIterable<1,Map<String,@>>");
      return B.LinkedHashMap_LinkedHashMap$_literal(["questionnaire", _this.questionnaire, "title", _this.title, "description", _this.description, "questions", B.List_List$of(new B.MappedListIterable(t1, t2._eval$1("Map<String,@>(1)")._as(new A.Questionnaire_toJson_closure()), t3), true, t3._eval$1("ListIterable.E"))], type$.String, type$.dynamic);
    }
  };
  var typesOffset = hunkHelpers.updateTypes(["Future<Questionnaire>(BuildContext,Map<String,@>)", "Question(@)", "Map<String,@>(Question)"]);
  A.EventRegistry_initializers_closure.prototype = {
    call$2(context, metadata) {
      return this.$call$body$EventRegistry_initializers_closure0(context, type$.Map_String_dynamic._as(metadata));
    },
    $call$body$EventRegistry_initializers_closure0(context, metadata) {
      var $async$goto = 0,
        $async$completer = B._makeAsyncAwaitCompleter(type$.Questionnaire),
        $async$returnValue;
      var $async$call$2 = B._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return B._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$returnValue = A.Questionnaire_Questionnaire$fromJson(A.convertKeys2String(type$.Map_dynamic_dynamic._as(J.$index$asx(metadata, "data"))));
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return B._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return B._asyncStartSync($async$call$2, $async$completer);
    },
    $signature: typesOffset + 0
  };
  A.EventRegistry_initializers_closure0.prototype = {
    call$2(context, metadata) {
      return this.$call$body$EventRegistry_initializers_closure(context, type$.Map_String_dynamic._as(metadata));
    },
    $call$body$EventRegistry_initializers_closure(context, metadata) {
      var $async$goto = 0,
        $async$completer = B._makeAsyncAwaitCompleter(type$.Map_String_dynamic),
        $async$returnValue, t1;
      var $async$call$2 = B._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return B._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = J.getInterceptor$asx(metadata);
              $async$goto = 3;
              return B._asyncAwait(C.Provider_of(context, false, type$.HealthDataManager).getRecord$2(B._asString(J.$index$asx(t1.$index(metadata, "data"), "type")), B._asDouble(J.$index$asx(t1.$index(metadata, "data"), "created_at"))), $async$call$2);
            case 3:
              // returning from await.
              $async$returnValue = $async$result;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return B._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return B._asyncStartSync($async$call$2, $async$completer);
    },
    $signature: 336
  };
  A.Question_Question$fromJson_closure.prototype = {
    call$1(e) {
      return J.toString$0$(e);
    },
    $signature: 54
  };
  A.Questionnaire_Questionnaire$fromJson_closure.prototype = {
    call$1(q) {
      return A.Question_Question$fromJson(type$.Map_String_dynamic._as(q));
    },
    $signature: typesOffset + 1
  };
  A.Questionnaire_toJson_closure.prototype = {
    call$1(q) {
      return type$.Question._as(q).toJson$0();
    },
    $signature: typesOffset + 2
  };
  A.convertKeys2String_closure.prototype = {
    call$2(k, v) {
      var t1, t2, t3;
      if (type$.Map_dynamic_dynamic._is(v))
        return new B.MapEntry(J.toString$0$(k), A.convertKeys2String(v), type$.MapEntry_String_dynamic);
      else {
        t1 = J.getInterceptor$(k);
        t2 = type$.MapEntry_String_dynamic;
        if (type$.List_dynamic._is(v)) {
          t1 = t1.toString$0(k);
          t3 = J.map$1$1$ax(v, new A.convertKeys2String__closure(), type$.dynamic);
          return new B.MapEntry(t1, B.List_List$of(t3, true, t3.$ti._eval$1("ListIterable.E")), t2);
        } else
          return new B.MapEntry(t1.toString$0(k), v, t2);
      }
    },
    $signature: 337
  };
  A.convertKeys2String__closure.prototype = {
    call$1(e) {
      return type$.Map_dynamic_dynamic._is(e) ? A.convertKeys2String(e) : e;
    },
    $signature: 20
  };
  (function inheritance() {
    var _inheritMany = hunkHelpers.inheritMany;
    _inheritMany(B.Closure2Args, [A.EventRegistry_initializers_closure, A.EventRegistry_initializers_closure0, A.convertKeys2String_closure]);
    _inheritMany(B.Object, [A.Question, A.Questionnaire]);
    _inheritMany(B.Closure, [A.Question_Question$fromJson_closure, A.Questionnaire_Questionnaire$fromJson_closure, A.Questionnaire_toJson_closure, A.convertKeys2String__closure]);
  })();
  var type$ = (function rtii() {
    var findType = B.findType;
    return {
      HealthDataManager: findType("HealthDataManager"),
      JSArray_String: findType("JSArray<String>"),
      List_dynamic: findType("List<@>"),
      MapEntry_String_dynamic: findType("MapEntry<String,@>"),
      Map_String_dynamic: findType("Map<String,@>"),
      Map_dynamic_dynamic: findType("Map<@,@>"),
      Question: findType("Question"),
      Questionnaire: findType("Questionnaire"),
      String: findType("String"),
      dynamic: findType("@"),
      nullable_List_dynamic: findType("List<@>?")
    };
  })();
  (function lazyInitializers() {
    var _lazyFinal = hunkHelpers.lazyFinal;
    _lazyFinal($, "EventRegistry_initializers", "$get$EventRegistry_initializers", () => B.LinkedHashMap_LinkedHashMap$_literal(["questionnaire", new A.EventRegistry_initializers_closure(), "record_status", new A.EventRegistry_initializers_closure0()], type$.String, B.findType("Future<@>(BuildContext,Map<String,@>)")));
  })();
};
;
((d, h) => {
  d[h] = d.current;
  d.eventLog.push({p: "main.dart.js_215", e: "endPart", h: h});
})($__dart_deferred_initializers__, "hzlSjWQZAnGDr0yFiEmTnWUQbho=");
;
//# sourceMappingURL=main.dart.js_215.part.js.map
